(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1100696,      20991]
NotebookOptionsPosition[   1087764,      20772]
NotebookOutlinePosition[   1088174,      20788]
CellTagsIndexPosition[   1088131,      20785]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.8506639668920794`*^9, 3.850663975323386*^9}, {
  3.850664026183584*^9, 3.850664029215167*^9}, {3.850664091096694*^9, 
  3.850664093948297*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"454785e1-a198-46b5-bd3b-1f8cc638a380"],

Cell[CellGroupData[{

Cell["Find potential", "Title",
 CellChangeTimes->{{3.8603113095318108`*^9, 
  3.8603113120743227`*^9}},ExpressionUUID->"1d9cb3d7-c7d8-4810-bf43-\
ecafb0833ed7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v", ",", "c", ",", "d", ",", "e"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"v", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"z", "  ", 
        SuperscriptBox[
         RowBox[{"Sec", "[", "x", "]"}], "2"]}], ",", " ", "z", ",", " ", 
       RowBox[{"y", " ", "+", 
        RowBox[{"Tan", "[", "x", "]"}], "+", 
        RowBox[{"Cos", "[", "z", "]"}]}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"f1", "=", 
     RowBox[{"Simplify", "[", 
      RowBox[{"\[Integral]", 
       RowBox[{
        RowBox[{"v", "[", 
         RowBox[{"[", "1", "]"}], "]"}], 
        RowBox[{"\[DifferentialD]", "x"}]}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"f2", "=", 
     RowBox[{"Simplify", "[", 
      RowBox[{"\[Integral]", 
       RowBox[{
        RowBox[{"v", "[", 
         RowBox[{"[", "2", "]"}], "]"}], 
        RowBox[{"\[DifferentialD]", "y"}]}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"f3", "=", 
     RowBox[{"Simplify", "[", 
      RowBox[{"\[Integral]", 
       RowBox[{
        RowBox[{"v", "[", 
         RowBox[{"[", "3", "]"}], "]"}], 
        RowBox[{"\[DifferentialD]", "z"}]}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", "--"}]}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"\"\<f1=\>\"", ",", "f1", ",", "\"\<+C(y,z)\>\""}], "]"}], 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<f2=\>\"", ",", "f2", ",", "\"\<+C(x,z)\>\""}], "]"}], 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<f3=\>\"", ",", "f3", ",", "\"\<+C(x,y)\>\""}], "]"}]}]}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.860172522923533*^9, 3.860172699991831*^9}, {
  3.86087132887013*^9, 3.860871337886327*^9}},
 CellLabel->
  "In[445]:=",ExpressionUUID->"c1c4301f-4194-4fdf-8b3e-2731a45cd906"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"f1=\"\>", "\[InvisibleSpace]", 
   RowBox[{"z", " ", 
    RowBox[{"Tan", "[", "x", "]"}]}], "\[InvisibleSpace]", "\<\"+C(y,z)\"\>"}],
  SequenceForm["f1=", $CellContext`z Tan[$CellContext`x], "+C(y,z)"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.86017262477395*^9, {3.8601726711715612`*^9, 3.860172700425353*^9}, 
   3.860871338945559*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[445]:=",ExpressionUUID->"40d5fd23-fd4a-4119-\
83df-c0c60baf0643"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"f2=\"\>", "\[InvisibleSpace]", 
   RowBox[{"y", " ", "z"}], "\[InvisibleSpace]", "\<\"+C(x,z)\"\>"}],
  SequenceForm["f2=", $CellContext`y $CellContext`z, "+C(x,z)"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.86017262477395*^9, {3.8601726711715612`*^9, 3.860172700425353*^9}, 
   3.8608713389479523`*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[445]:=",ExpressionUUID->"b489e14c-2ddc-435a-\
94ab-d8239ddec2ed"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"f3=\"\>", "\[InvisibleSpace]", 
   RowBox[{
    RowBox[{"Sin", "[", "z", "]"}], "+", 
    RowBox[{"z", " ", 
     RowBox[{"(", 
      RowBox[{"y", "+", 
       RowBox[{"Tan", "[", "x", "]"}]}], ")"}]}]}], 
   "\[InvisibleSpace]", "\<\"+C(x,y)\"\>"}],
  SequenceForm[
  "f3=", Sin[$CellContext`z] + $CellContext`z ($CellContext`y + 
     Tan[$CellContext`x]), "+C(x,y)"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.86017262477395*^9, {3.8601726711715612`*^9, 3.860172700425353*^9}, 
   3.860871338951038*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[445]:=",ExpressionUUID->"4a536dac-12ce-49c5-\
8974-09ec16725bd6"]
}, Open  ]],

Cell[BoxData[
 SuperscriptBox["Null", "3"]], "Output",
 CellChangeTimes->{
  3.860172624780469*^9, {3.8601726711769667`*^9, 3.86017270043076*^9}, 
   3.8608713389529743`*^9},
 CellLabel->
  "Out[445]=",ExpressionUUID->"c0878eca-b17b-4470-9f61-face2d0776b1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Potential Function", "Title",
 CellChangeTimes->{{3.8603110245722847`*^9, 
  3.860311029825686*^9}},ExpressionUUID->"4d2b649a-fb04-41a9-838e-\
f0f169d17b7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "F", ",", "F1", ",", "F2", ",", "F3", ",", "A", ",", "B", ",", "sol", ",",
      "potential", ",", "pA", ",", "pB"}], "}"}], ",", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Given", " ", "vector", " ", "field", " ", "F"}], ",", " ", 
     RowBox[{"calculate", " ", "its", " ", "potential"}], ",", " ", 
     RowBox[{"if", " ", "not", " ", "exist"}], ",", " ", 
     RowBox[{"throw", " ", "an", " ", "error"}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"F", "=", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"F1", ",", "F2", ",", "F3"}], "}"}], "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"2", "x", " ", "y"}], "+", 
         RowBox[{"z", "^", "2"}]}], ",", 
        RowBox[{
         RowBox[{"2", "y", " ", "z"}], "+", 
         RowBox[{"x", "^", "2"}]}], ",", 
        RowBox[{
         RowBox[{"2", " ", "x", " ", "z"}], "+", 
         RowBox[{"y", "^", "2"}]}]}], "}"}]}]}], ";", "\n", 
    RowBox[{"(*", 
     RowBox[{
     "Given", " ", "the", " ", "start", " ", "point", " ", "A", " ", "and", 
      " ", "the", " ", "end", " ", "point", " ", "B"}], "*)"}], "\n", 
    RowBox[{"A", "=", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ";", "\n", 
    RowBox[{"B", "=", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], ";", "\n", 
    RowBox[{"sol", "=", 
     RowBox[{"DSolve", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"D", "[", 
           RowBox[{
            RowBox[{"f", "[", 
             RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", "x"}], "]"}], 
          "\[Equal]", "F1"}], ",", 
         RowBox[{
          RowBox[{"D", "[", 
           RowBox[{
            RowBox[{"f", "[", 
             RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", "y"}], "]"}], 
          "\[Equal]", "F2"}], ",", 
         RowBox[{
          RowBox[{"D", "[", 
           RowBox[{
            RowBox[{"f", "[", 
             RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", "z"}], "]"}], 
          "\[Equal]", "F3"}]}], "}"}], ",", 
       RowBox[{"f", "[", 
        RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"\"\<solution to diff eq\>\"", " ", "sol"}], "]"}], ";", "\n", 
    RowBox[{"potential", "=", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"x", ",", "y", ",", "z"}], "]"}], "/.", 
      RowBox[{"sol", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\n", 
    RowBox[{"pA", "=", 
     RowBox[{"potential", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x", "\[Rule]", 
         RowBox[{"B", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", 
        RowBox[{"y", "\[Rule]", 
         RowBox[{"B", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ",", 
        RowBox[{"z", "\[Rule]", 
         RowBox[{"B", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}]}], "}"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"\"\<potential at a\>\"", " ", "pA"}], "]"}], ";", "\n", 
    RowBox[{"pB", "=", 
     RowBox[{"potential", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x", "\[Rule]", 
         RowBox[{"A", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", 
        RowBox[{"y", "\[Rule]", 
         RowBox[{"A", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ",", 
        RowBox[{"z", "\[Rule]", 
         RowBox[{"A", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}]}], "}"}]}]}], " ", ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"\"\<potential at b\>\"", " ", "pB"}], "]"}], ";", "\n", 
    RowBox[{"pA", "-", "pB"}]}]}], "\n", "]"}]], "Input",
 CellChangeTimes->{{3.860311033123487*^9, 3.860311059600739*^9}, {
   3.8603111283256893`*^9, 3.8603112587304087`*^9}, {3.860311380101281*^9, 
   3.860311396113381*^9}, {3.860311429050713*^9, 3.8603114314284143`*^9}, 
   3.860505472632786*^9},
 CellLabel->
  "In[247]:=",ExpressionUUID->"91dde3f9-779b-4525-a19f-05f69f3569aa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"\<\"solution to diff eq\"\>", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"x", ",", "y", ",", "z"}], "]"}], "\[Rule]", 
      RowBox[{
       RowBox[{
        SuperscriptBox["y", "2"], " ", "z"}], "+", 
       RowBox[{"x", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"x", " ", "y"}], "+", 
          SuperscriptBox["z", "2"]}], ")"}]}], "+", 
       TemplateBox[{"1"},
        "C"]}]}], ")"}]}], "}"}], "}"}]], "Print",
 CellChangeTimes->{
  3.860311228727726*^9, 3.860311259130372*^9, 3.86031132225596*^9, {
   3.860311381499817*^9, 3.860311396851091*^9}, 3.860311432201688*^9, {
   3.8605054657589197`*^9, 3.860505473111438*^9}},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[247]:=",ExpressionUUID->"58eb7c8c-1c8c-4c41-\
a499-7e00e51e6408"],

Cell[BoxData[
 RowBox[{"\<\"potential at a\"\>", " ", 
  RowBox[{"(", 
   RowBox[{"23", "+", 
    TemplateBox[{"1"},
     "C"]}], ")"}]}]], "Print",
 CellChangeTimes->{
  3.860311228727726*^9, 3.860311259130372*^9, 3.86031132225596*^9, {
   3.860311381499817*^9, 3.860311396851091*^9}, 3.860311432201688*^9, {
   3.8605054657589197`*^9, 3.860505473113641*^9}},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[247]:=",ExpressionUUID->"42504abf-0cce-454e-\
a8cb-5875b36a783c"],

Cell[BoxData[
 RowBox[{"\<\"potential at b\"\>", " ", 
  TemplateBox[{"1"},
   "C"]}]], "Print",
 CellChangeTimes->{
  3.860311228727726*^9, 3.860311259130372*^9, 3.86031132225596*^9, {
   3.860311381499817*^9, 3.860311396851091*^9}, 3.860311432201688*^9, {
   3.8605054657589197`*^9, 3.860505473116324*^9}},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[247]:=",ExpressionUUID->"82cefded-c80f-4ac3-\
a2e4-c07855ec79e4"]
}, Open  ]],

Cell[BoxData["23"], "Output",
 CellChangeTimes->{3.860505473118051*^9},
 CellLabel->
  "Out[247]=",ExpressionUUID->"ee408cde-b027-4654-af30-7d79b093c05b"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.860311238920875*^9, 
  3.860311243328719*^9}},ExpressionUUID->"151af007-b1e3-4d00-ab55-\
4d1f127abd06"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.86031124197288*^9, 
  3.8603112419755583`*^9}},ExpressionUUID->"f1139cf5-d38a-441b-9238-\
aa3c5f7b8844"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Line Integral", "Title",
 CellChangeTimes->{{3.850663527210003*^9, 3.850663530501173*^9}, {
  3.8603109479657373`*^9, 
  3.860311013992552*^9}},ExpressionUUID->"3e9114e5-25e0-4dd3-b943-\
19012e0fe37e"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.860310990268587*^9, 
  3.860310990717868*^9}},ExpressionUUID->"ee65b125-5f88-457a-ab65-\
dcd0c8404e3b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "v", ",", "x", ",", "y", ",", "z", ",", "dt", ",", "f", ",", "dotted", 
      ",", "intted", ",", "up", ",", "down", ",", "p1", ",", " ", "p2"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"give", " ", "a", " ", "parametrization"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"p1", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "0"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"p2", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{"2", ",", "2", ",", "Pi"}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"v", "=", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "z"}], "}"}], "=", 
       RowBox[{"p1", "+", 
        RowBox[{"t", 
         RowBox[{"(", 
          RowBox[{"p2", "-", "p1"}], ")"}]}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"function", " ", "want", " ", "to", " ", "integrate"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"f", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"2", " ", "x", " ", "y", " ", 
          SuperscriptBox["z", "3"]}], "+", " ", 
         RowBox[{"y", " ", 
          RowBox[{"Exp", "[", 
           RowBox[{"x", " ", "y"}], "]"}]}]}], ",", 
        RowBox[{
         RowBox[{
          SuperscriptBox["x", "2"], 
          SuperscriptBox["z", "3"]}], "+", 
         RowBox[{"x", " ", 
          RowBox[{"Exp", "[", 
           RowBox[{"x", " ", "y"}], "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"3", 
          SuperscriptBox["x", "2"], "y", " ", 
          SuperscriptBox["z", "2"]}], "+", 
         RowBox[{"Cos", "[", "z", "]"}]}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"integration", " ", "bounds"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"up", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"down", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", "--"}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Integral]", " ", 
         RowBox[{"F", " ", ".", " ", 
          RowBox[{"\[DifferentialD]", 
           SuperscriptBox["t", "\[RightVector]"]}]}]}], "  ", "==", " ", 
        RowBox[{"\[Integral]", 
         RowBox[{"F", " ", ".", " ", "t"}]}]}], "\[RightVector]", " ", 
       RowBox[{"\[DifferentialD]", "t"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"dt", " ", "=", " ", 
      RowBox[{"D", "[", 
       RowBox[{"v", ",", "t"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dotted", " ", "=", " ", 
      RowBox[{"Dot", "[", 
       RowBox[{"f", ",", "dt"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"intted", "=", 
      RowBox[{
       SubsuperscriptBox["\[Integral]", "down", "up"], 
       RowBox[{"dotted", 
        RowBox[{"\[DifferentialD]", "t"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{"\"\<dt=\>\"", ",", "dt"}], "]"}], "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<f=\>\"", ",", "f"}], "]"}], "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<dotted=\>\"", ",", "dotted"}], "]"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<intform=\>\"", ",", 
        RowBox[{"Simplify", "[", 
         RowBox[{"\[Integral]", 
          RowBox[{"dotted", 
           RowBox[{"\[DifferentialD]", "t"}]}]}], "]"}]}], "]"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<intted=\>\"", ",", "intted"}], "]"}]}], ";"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.850661935890587*^9, 3.850662146237026*^9}, {
   3.8506621763627987`*^9, 3.850662458042427*^9}, {3.8506638904157763`*^9, 
   3.850663892275023*^9}, {3.86017282331271*^9, 3.860172860500681*^9}, {
   3.860172919785925*^9, 3.860172924703869*^9}, {3.86017296364879*^9, 
   3.8601730729991703`*^9}, {3.860173115010223*^9, 3.860173162285865*^9}, {
   3.861021026900743*^9, 3.861021039460432*^9}, {3.861021088092482*^9, 
   3.861021112637883*^9}, {3.861021155591888*^9, 3.861021157729992*^9}, {
   3.861390616909698*^9, 3.861390745650242*^9}, 3.861390818034459*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"68e1549f-c307-4b64-9b0e-ca8d7a85edb5"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"dt=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "\[Pi]"}], "}"}]}],
  SequenceForm["dt=", {1, 0, Pi}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.850662121991228*^9, {3.850662182867384*^9, 3.850662196871982*^9}, {
   3.8506623237998867`*^9, 3.850662415392762*^9}, {3.850662453261475*^9, 
   3.850662458334043*^9}, 3.860172865460026*^9, 3.8601729251988783`*^9, 
   3.860172967357555*^9, 3.860173165203372*^9, 3.8610211161708803`*^9, 
   3.861021158047701*^9, 3.861390751564557*^9, 3.861390818643674*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[17]:=",ExpressionUUID->"95b8c1f4-5341-42a0-a5fe-\
091da9b29768"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"f=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"2", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "t"}], ")"}]}]]}], "+", 
      RowBox[{"4", " ", 
       SuperscriptBox["\[Pi]", "3"], " ", 
       SuperscriptBox["t", "3"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "t"}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "t"}], ")"}]}]], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "t"}], ")"}]}], "+", 
      RowBox[{
       SuperscriptBox["\[Pi]", "3"], " ", 
       SuperscriptBox["t", "3"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "t"}], ")"}], "2"]}]}], ",", 
     RowBox[{
      RowBox[{"6", " ", 
       SuperscriptBox["\[Pi]", "2"], " ", 
       SuperscriptBox["t", "2"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "t"}], ")"}], "2"]}], "+", 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Pi]", " ", "t"}], "]"}]}]}], "}"}]}],
  SequenceForm[
  "f=", {2 E^(2 (1 + $CellContext`t)) + 
    4 Pi^3 $CellContext`t^3 (1 + $CellContext`t), 
    E^(2 (1 + $CellContext`t)) (1 + $CellContext`t) + 
    Pi^3 $CellContext`t^3 (1 + $CellContext`t)^2, 
    6 Pi^2 $CellContext`t^2 (1 + $CellContext`t)^2 + Cos[Pi $CellContext`t]}],
  
  Editable->False]], "Print",
 CellChangeTimes->{
  3.850662121991228*^9, {3.850662182867384*^9, 3.850662196871982*^9}, {
   3.8506623237998867`*^9, 3.850662415392762*^9}, {3.850662453261475*^9, 
   3.850662458334043*^9}, 3.860172865460026*^9, 3.8601729251988783`*^9, 
   3.860172967357555*^9, 3.860173165203372*^9, 3.8610211161708803`*^9, 
   3.861021158047701*^9, 3.861390751564557*^9, 3.8613908186450033`*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[17]:=",ExpressionUUID->"94ad5276-b105-46ee-a0c9-\
a8171e7cf017"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"dotted=\"\>", "\[InvisibleSpace]", 
   RowBox[{
    RowBox[{"2", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "t"}], ")"}]}]]}], "+", 
    RowBox[{"4", " ", 
     SuperscriptBox["\[Pi]", "3"], " ", 
     SuperscriptBox["t", "3"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "t"}], ")"}]}], "+", 
    RowBox[{"\[Pi]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"6", " ", 
        SuperscriptBox["\[Pi]", "2"], " ", 
        SuperscriptBox["t", "2"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "t"}], ")"}], "2"]}], "+", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Pi]", " ", "t"}], "]"}]}], ")"}]}]}]}],
  SequenceForm[
  "dotted=", 2 E^(2 (1 + $CellContext`t)) + 
   4 Pi^3 $CellContext`t^3 (1 + $CellContext`t) + 
   Pi (6 Pi^2 $CellContext`t^2 (1 + $CellContext`t)^2 + 
     Cos[Pi $CellContext`t])],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.850662121991228*^9, {3.850662182867384*^9, 3.850662196871982*^9}, {
   3.8506623237998867`*^9, 3.850662415392762*^9}, {3.850662453261475*^9, 
   3.850662458334043*^9}, 3.860172865460026*^9, 3.8601729251988783`*^9, 
   3.860172967357555*^9, 3.860173165203372*^9, 3.8610211161708803`*^9, 
   3.861021158047701*^9, 3.861390751564557*^9, 3.861390818646315*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[17]:=",ExpressionUUID->"8b4c0355-3d01-4523-b58d-\
a8206f3ad555"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"intform=\"\>", "\[InvisibleSpace]", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"2", "+", 
      RowBox[{"2", " ", "t"}]}]], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["\[Pi]", "3"], " ", 
     SuperscriptBox["t", "3"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "t"}], ")"}], "2"]}], "+", 
    RowBox[{"Sin", "[", 
     RowBox[{"\[Pi]", " ", "t"}], "]"}]}]}],
  SequenceForm[
  "intform=", E^(2 + 2 $CellContext`t) + 
   2 Pi^3 $CellContext`t^3 (1 + $CellContext`t)^2 + Sin[Pi $CellContext`t]],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.850662121991228*^9, {3.850662182867384*^9, 3.850662196871982*^9}, {
   3.8506623237998867`*^9, 3.850662415392762*^9}, {3.850662453261475*^9, 
   3.850662458334043*^9}, 3.860172865460026*^9, 3.8601729251988783`*^9, 
   3.860172967357555*^9, 3.860173165203372*^9, 3.8610211161708803`*^9, 
   3.861021158047701*^9, 3.861390751564557*^9, 3.861390818671116*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[17]:=",ExpressionUUID->"06655fd1-6ea3-4126-8188-\
f0e8788010fc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"intted=\"\>", "\[InvisibleSpace]", 
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
    SuperscriptBox["\[ExponentialE]", "4"], "+", 
    RowBox[{"8", " ", 
     SuperscriptBox["\[Pi]", "3"]}]}]}],
  SequenceForm["intted=", -E^2 + E^4 + 8 Pi^3],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.850662121991228*^9, {3.850662182867384*^9, 3.850662196871982*^9}, {
   3.8506623237998867`*^9, 3.850662415392762*^9}, {3.850662453261475*^9, 
   3.850662458334043*^9}, 3.860172865460026*^9, 3.8601729251988783`*^9, 
   3.860172967357555*^9, 3.860173165203372*^9, 3.8610211161708803`*^9, 
   3.861021158047701*^9, 3.861390751564557*^9, 3.8613908186720133`*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[17]:=",ExpressionUUID->"bc2494b8-6226-4e1c-8f49-\
f9a4dcb5b987"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Normal Vector", "Title",
 CellChangeTimes->{{3.850663551361526*^9, 3.850663569563322*^9}, {
  3.850663603607647*^9, 
  3.850663620195776*^9}},ExpressionUUID->"768c76d4-39ce-47ad-bfdd-\
f5a2e8e26976"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"f", ",", "gradF", ",", "nGF", ",", "norm"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"f", "=", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"], "-", 
      SuperscriptBox["a", "2"]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"gradF", "=", 
     RowBox[{"Grad", "[", 
      RowBox[{"f", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"nGF", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"gradF", "//", "Normalize"}], "//", "ComplexExpand"}], "//", 
      "Simplify"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"norm", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Norm", "[", "gradF", "]"}], "//", "ComplexExpand"}], "//", 
      "Simplify"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"\"\<the surface is described by f = \>\"", ",", "f"}], "]"}], 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<gradient to the surface gradF =\>\"", ",", "gradF"}], 
      "]"}], "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
      "\"\<the unit normal vector to the surface nGF=\>\"", ",", "nGF"}], 
      "]"}], "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<the norm of the gradient vector norm=\>\"", ",", "norm"}], 
      "]"}]}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.850663582450953*^9, 3.850663583780484*^9}, {
   3.850663628588674*^9, 3.850663927579279*^9}, {3.850663983667818*^9, 
   3.850663996367449*^9}, {3.850664036810752*^9, 3.850664097022444*^9}, {
   3.850664521505228*^9, 3.85066452871357*^9}, {3.850665781345583*^9, 
   3.850665781531766*^9}, {3.850666002258473*^9, 3.8506660062365*^9}, {
   3.8506672384078417`*^9, 3.850667253640534*^9}, {3.860311497743449*^9, 
   3.860311552842287*^9}, {3.860316223633984*^9, 3.860316226697919*^9}, {
   3.860325584531597*^9, 3.860325585109375*^9}, {3.860501649032083*^9, 
   3.860501664534212*^9}, 3.8605016957255697`*^9, {3.860501765696212*^9, 
   3.860501779939163*^9}, {3.8605028457054777`*^9, 3.8605028723122673`*^9}, {
   3.860872861998617*^9, 3.860872884720965*^9}, {3.8608729713920603`*^9, 
   3.8608729803828382`*^9}, {3.860873055890327*^9, 3.86087305623267*^9}, {
   3.8614204280358677`*^9, 3.8614204390160923`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"6acf40b7-b7d2-447b-88e1-e4df9d0b7819"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"the surface is described by f = \"\>", "\[InvisibleSpace]", 
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox["a", "2"]}], "+", 
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"]}]}],
  SequenceForm[
  "the surface is described by f = ", -$CellContext`a^2 + $CellContext`x^2 + \
$CellContext`y^2],
  Editable->False]], "Print",
 CellChangeTimes->{{3.850663863085648*^9, 3.850663870451524*^9}, {
   3.8506639072581797`*^9, 3.85066392795103*^9}, {3.850663980336053*^9, 
   3.850663984844145*^9}, {3.850664032373131*^9, 3.850664064658255*^9}, 
   3.8506640974753513`*^9, 3.850664529189334*^9, 3.850665783329075*^9, 
   3.850666006679427*^9, {3.850667245075845*^9, 3.850667254048718*^9}, 
   3.860173177573518*^9, 3.860311553342801*^9, 3.860316227646419*^9, 
   3.8603255859014063`*^9, 3.8605016663555193`*^9, 3.860501696477169*^9, 
   3.860501780435299*^9, 3.860502873407078*^9, 3.86087288565036*^9, 
   3.860872981199233*^9, 3.860873057610558*^9, 3.861420440065523*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[22]:=",ExpressionUUID->"e4444b17-4d16-4287-a27b-\
d42a9e1adca4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"gradient to the surface gradF =\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"2", " ", "x"}], ",", 
     RowBox[{"2", " ", "y"}], ",", "0"}], "}"}]}],
  SequenceForm[
  "gradient to the surface gradF =", {2 $CellContext`x, 2 $CellContext`y, 0}],
  
  Editable->False]], "Print",
 CellChangeTimes->{{3.850663863085648*^9, 3.850663870451524*^9}, {
   3.8506639072581797`*^9, 3.85066392795103*^9}, {3.850663980336053*^9, 
   3.850663984844145*^9}, {3.850664032373131*^9, 3.850664064658255*^9}, 
   3.8506640974753513`*^9, 3.850664529189334*^9, 3.850665783329075*^9, 
   3.850666006679427*^9, {3.850667245075845*^9, 3.850667254048718*^9}, 
   3.860173177573518*^9, 3.860311553342801*^9, 3.860316227646419*^9, 
   3.8603255859014063`*^9, 3.8605016663555193`*^9, 3.860501696477169*^9, 
   3.860501780435299*^9, 3.860502873407078*^9, 3.86087288565036*^9, 
   3.860872981199233*^9, 3.860873057610558*^9, 3.861420440066915*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[22]:=",ExpressionUUID->"6c0a0a09-f1b3-4fe0-ad8f-\
8ab6509b0390"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"the unit normal vector to the surface nGF=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["x", 
      SqrtBox[
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        SuperscriptBox["y", "2"]}]]], ",", 
     FractionBox["y", 
      SqrtBox[
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        SuperscriptBox["y", "2"]}]]], ",", "0"}], "}"}]}],
  SequenceForm[
  "the unit normal vector to the surface nGF=", {$CellContext`x \
($CellContext`x^2 + $CellContext`y^2)^
     Rational[-1, 2], $CellContext`y ($CellContext`x^2 + $CellContext`y^2)^
     Rational[-1, 2], 0}],
  Editable->False]], "Print",
 CellChangeTimes->{{3.850663863085648*^9, 3.850663870451524*^9}, {
   3.8506639072581797`*^9, 3.85066392795103*^9}, {3.850663980336053*^9, 
   3.850663984844145*^9}, {3.850664032373131*^9, 3.850664064658255*^9}, 
   3.8506640974753513`*^9, 3.850664529189334*^9, 3.850665783329075*^9, 
   3.850666006679427*^9, {3.850667245075845*^9, 3.850667254048718*^9}, 
   3.860173177573518*^9, 3.860311553342801*^9, 3.860316227646419*^9, 
   3.8603255859014063`*^9, 3.8605016663555193`*^9, 3.860501696477169*^9, 
   3.860501780435299*^9, 3.860502873407078*^9, 3.86087288565036*^9, 
   3.860872981199233*^9, 3.860873057610558*^9, 3.8614204400688972`*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[22]:=",ExpressionUUID->"6d4424f9-613d-40b4-90da-\
2d9ccaa24a0d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"the norm of the gradient vector norm=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"2", " ", 
    SqrtBox[
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}]]}]}],
  SequenceForm[
  "the norm of the gradient vector norm=", 
   2 ($CellContext`x^2 + $CellContext`y^2)^Rational[1, 2]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.850663863085648*^9, 3.850663870451524*^9}, {
   3.8506639072581797`*^9, 3.85066392795103*^9}, {3.850663980336053*^9, 
   3.850663984844145*^9}, {3.850664032373131*^9, 3.850664064658255*^9}, 
   3.8506640974753513`*^9, 3.850664529189334*^9, 3.850665783329075*^9, 
   3.850666006679427*^9, {3.850667245075845*^9, 3.850667254048718*^9}, 
   3.860173177573518*^9, 3.860311553342801*^9, 3.860316227646419*^9, 
   3.8603255859014063`*^9, 3.8605016663555193`*^9, 3.860501696477169*^9, 
   3.860501780435299*^9, 3.860502873407078*^9, 3.86087288565036*^9, 
   3.860872981199233*^9, 3.860873057610558*^9, 3.8614204400702877`*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[22]:=",ExpressionUUID->"4a42b358-8c75-479e-a5e0-\
a576c22184b1"]
}, Open  ]],

Cell[BoxData[
 SuperscriptBox["Null", "4"]], "Output",
 CellChangeTimes->{
  3.850666006686687*^9, {3.8506672450823793`*^9, 3.850667254055049*^9}, 
   3.860173177579171*^9, 3.8603115533508673`*^9, 3.86031622765202*^9, 
   3.8603255859064713`*^9, 3.860501666364884*^9, 3.860501696488552*^9, 
   3.860501780442234*^9, 3.860502873411356*^9, 3.860872885660038*^9, 
   3.8608729812075453`*^9, 3.860873057619417*^9, 3.861420440071445*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"618295a6-156e-4736-8884-31c80a3d292e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Norm", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     SuperscriptBox["a", "4"], "x"}], ",", 
    RowBox[{
     SuperscriptBox["a", "4"], "y"}], ",", 
    RowBox[{
     RowBox[{"-", "2"}], " ", 
     SuperscriptBox["z", "3"]}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.860873146544545*^9, 3.8608731733002462`*^9}},
 CellLabel->
  "In[455]:=",ExpressionUUID->"635afcc9-338c-4242-b14a-ca9d814bd38c"],

Cell[BoxData[
 SqrtBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"Abs", "[", 
     RowBox[{
      SuperscriptBox["a", "4"], " ", "x"}], "]"}], "2"], "+", 
   SuperscriptBox[
    RowBox[{"Abs", "[", 
     RowBox[{
      SuperscriptBox["a", "4"], " ", "y"}], "]"}], "2"], "+", 
   RowBox[{"4", " ", 
    SuperscriptBox[
     RowBox[{"Abs", "[", "z", "]"}], "6"]}]}]]], "Output",
 CellChangeTimes->{3.860873173925144*^9},
 CellLabel->
  "Out[455]=",ExpressionUUID->"47b991dc-5f59-4901-b23a-7333da44bca7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Jacobian", "Title",
 CellChangeTimes->{{3.850667484993791*^9, 
  3.850667494159005*^9}},ExpressionUUID->"b02ae45a-a7fe-4c7a-b3d6-\
24a561e8c8ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "x", ",", "y", ",", "z", ",", "vec", ",", "drdu1", ",", "drdu2", ",", 
      "drdu3", ",", "xuCross", ",", "xuMatrix", ",", "normalisedCross", ",", 
      "normXuCross", ",", "detXu"}], " ", "}"}], ",", 
    RowBox[{"Block", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"$Assumptions", "=", 
        RowBox[{
         RowBox[{"u1", " ", "\[Element]", " ", "Reals"}], " ", "&&", " ", 
         RowBox[{"u2", " ", "\[Element]", " ", "Reals"}], " ", "&&", " ", 
         RowBox[{"u3", " ", "\[Element]", " ", "Reals"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", "-"}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y", ",", "z"}], "}"}], "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"c", " ", 
           FractionBox[
            RowBox[{"Sinh", "[", "u1", "]"}], 
            RowBox[{
             RowBox[{"Cosh", "[", "u1", "]"}], "-", 
             RowBox[{"Cos", "[", "u2", "]"}]}]]}], ",", 
          FractionBox[
           RowBox[{"c", " ", 
            RowBox[{"Sin", "[", "u2", "]"}]}], 
           RowBox[{
            RowBox[{"Cosh", "[", "u1", "]"}], "-", 
            RowBox[{"Cos", "[", "u2", "]"}]}]], ",", "u3"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", "-"}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"vec", "=", 
        RowBox[{"{", 
         RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"drdu1", "=", 
        RowBox[{"D", "[", 
         RowBox[{"vec", ",", "u1"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"drdu2", "=", 
        RowBox[{"D", "[", 
         RowBox[{"vec", ",", "u2"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"drdu3", "=", 
        RowBox[{"D", "[", 
         RowBox[{"vec", ",", "u3"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"xuCross", "=", 
        RowBox[{"Simplify", " ", "@", " ", 
         RowBox[{"Cross", "[", 
          RowBox[{"drdu1", ",", "drdu2"}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"xuMatrix", "=", 
        RowBox[{
         RowBox[{"Simplify", "@", " ", 
          RowBox[{"{", 
           RowBox[{"drdu1", ",", "drdu2", ",", "drdu3"}], "}"}]}], 
         "\[Transpose]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"normalisedCross", "=", 
        RowBox[{"Simplify", " ", "@", " ", 
         RowBox[{"Normalize", "[", "xuCross", "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"normXuCross", " ", "=", " ", 
        RowBox[{"Simplify", " ", "@", " ", 
         RowBox[{"Norm", "[", "xuCross", "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"detXu", "=", 
        RowBox[{"Simplify", " ", "@", " ", 
         RowBox[{"Det", "[", "xuMatrix", "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<vec=\>\"", ",", "vec"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<drdu1=\>\"", ",", 
         RowBox[{"MatrixForm", " ", "@", " ", "drdu1"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<drdu2=\>\"", ",", 
         RowBox[{"MatrixForm", " ", "@", " ", "drdu2"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<drdu3=\>\"", " ", 
         RowBox[{"MatrixForm", " ", "@", " ", "drdu3"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<\!\(\*SubscriptBox[\(X\), \(u\)]\) Cross =\>\"", ",", 
         "xuCross"}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<\!\(\*SubscriptBox[\(X\), \(u\)]\) Cross normalised=\>\"", ",", 
         "normalisedCross"}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<\!\(\*SubscriptBox[\(X\), \(u\)]\) Matrix =\>\"", ",", " ", 
         RowBox[{"MatrixForm", " ", "@", " ", "xuMatrix"}]}], " ", "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<cross norm=\>\"", ",", " ", "normXuCross"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<matrix determinate=\>\"", ",", " ", "detXu"}], "]"}]}]}],
      "]"}]}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.850667230210115*^9, 3.8506672327061453`*^9}, {
   3.8506674965567904`*^9, 3.850667665176712*^9}, {3.850667704314375*^9, 
   3.850667783860478*^9}, {3.8506678218128242`*^9, 3.850667834064711*^9}, {
   3.8506678675667*^9, 3.85066796296883*^9}, {3.8506692874477262`*^9, 
   3.850669294720014*^9}, {3.860175370057185*^9, 3.860175375181396*^9}, {
   3.860176119196621*^9, 3.860176123497645*^9}, {3.8605039579685*^9, 
   3.8605039892567472`*^9}, {3.860505556142098*^9, 3.8605055568033447`*^9}, {
   3.860505615584577*^9, 3.860505665364883*^9}, {3.8605057051418056`*^9, 
   3.860505724347612*^9}, {3.86050576761207*^9, 3.860506174762269*^9}, 
   3.860507913337676*^9, {3.8605080194331703`*^9, 3.860508112325778*^9}, {
   3.860508144116708*^9, 3.8605082225917187`*^9}, {3.861384067077821*^9, 
   3.861384099928522*^9}, {3.8613842574692163`*^9, 3.861384294752544*^9}, {
   3.861384383277471*^9, 3.861384417198708*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"82712719-29d9-431e-bf1d-0a5e883d49d2"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"vec=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"c", " ", 
       RowBox[{"Sinh", "[", "u1", "]"}]}], 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Cos", "[", "u2", "]"}]}], "+", 
       RowBox[{"Cosh", "[", "u1", "]"}]}]], ",", 
     FractionBox[
      RowBox[{"c", " ", 
       RowBox[{"Sin", "[", "u2", "]"}]}], 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Cos", "[", "u2", "]"}]}], "+", 
       RowBox[{"Cosh", "[", "u1", "]"}]}]], ",", "u3"}], "}"}]}],
  SequenceForm[
  "vec=", {$CellContext`c (-Cos[$CellContext`u2] + Cosh[$CellContext`u1])^(-1)
       Sinh[$CellContext`u1], $CellContext`c (-Cos[$CellContext`u2] + 
      Cosh[$CellContext`u1])^(-1) Sin[$CellContext`u2], $CellContext`u3}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.8605081126740417`*^9, {3.86050814566995*^9, 3.860508170961779*^9}, {
   3.860508208317856*^9, 3.860508216867268*^9}, 3.861384101008604*^9, 
   3.8613844313452597`*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[8]:=",ExpressionUUID->"7288e5d2-7846-465b-a62c-\
d8de788c0ef3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"drdu1=\"\>", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
     TagBox[GridBox[{
        {
         RowBox[{
          FractionBox[
           RowBox[{"c", " ", 
            RowBox[{"Cosh", "[", "u1", "]"}]}], 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"Cos", "[", "u2", "]"}]}], "+", 
            RowBox[{"Cosh", "[", "u1", "]"}]}]], "-", 
          FractionBox[
           RowBox[{"c", " ", 
            SuperscriptBox[
             RowBox[{"Sinh", "[", "u1", "]"}], "2"]}], 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "u2", "]"}]}], "+", 
              RowBox[{"Cosh", "[", "u1", "]"}]}], ")"}], "2"]]}]},
        {
         RowBox[{"-", 
          FractionBox[
           RowBox[{"c", " ", 
            RowBox[{"Sin", "[", "u2", "]"}], " ", 
            RowBox[{"Sinh", "[", "u1", "]"}]}], 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "u2", "]"}]}], "+", 
              RowBox[{"Cosh", "[", "u1", "]"}]}], ")"}], "2"]]}]},
        {"0"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      Column], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}],
  SequenceForm["drdu1=", 
   MatrixForm[{$CellContext`c Cosh[$CellContext`u1]/(-Cos[$CellContext`u2] + 
      Cosh[$CellContext`u1]) - $CellContext`c (-Cos[$CellContext`u2] + 
       Cosh[$CellContext`u1])^(-2) 
     Sinh[$CellContext`u1]^2, -$CellContext`c (-Cos[$CellContext`u2] + 
       Cosh[$CellContext`u1])^(-2) Sin[$CellContext`u2] Sinh[$CellContext`u1],
      0}]],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.8605081126740417`*^9, {3.86050814566995*^9, 3.860508170961779*^9}, {
   3.860508208317856*^9, 3.860508216867268*^9}, 3.861384101008604*^9, 
   3.861384431346486*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[8]:=",ExpressionUUID->"fb26d1a3-90f5-4875-ae1b-\
cd39c636c0ac"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"drdu2=\"\>", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
     TagBox[GridBox[{
        {
         RowBox[{"-", 
          FractionBox[
           RowBox[{"c", " ", 
            RowBox[{"Sin", "[", "u2", "]"}], " ", 
            RowBox[{"Sinh", "[", "u1", "]"}]}], 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "u2", "]"}]}], "+", 
              RowBox[{"Cosh", "[", "u1", "]"}]}], ")"}], "2"]]}]},
        {
         RowBox[{
          FractionBox[
           RowBox[{"c", " ", 
            RowBox[{"Cos", "[", "u2", "]"}]}], 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"Cos", "[", "u2", "]"}]}], "+", 
            RowBox[{"Cosh", "[", "u1", "]"}]}]], "-", 
          FractionBox[
           RowBox[{"c", " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", "u2", "]"}], "2"]}], 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "u2", "]"}]}], "+", 
              RowBox[{"Cosh", "[", "u1", "]"}]}], ")"}], "2"]]}]},
        {"0"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      Column], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}],
  SequenceForm["drdu2=", 
   MatrixForm[{-$CellContext`c (-Cos[$CellContext`u2] + 
       Cosh[$CellContext`u1])^(-2) Sin[$CellContext`u2] 
     Sinh[$CellContext`u1], $CellContext`c 
      Cos[$CellContext`u2]/(-Cos[$CellContext`u2] + 
      Cosh[$CellContext`u1]) - $CellContext`c (-Cos[$CellContext`u2] + 
       Cosh[$CellContext`u1])^(-2) Sin[$CellContext`u2]^2, 0}]],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.8605081126740417`*^9, {3.86050814566995*^9, 3.860508170961779*^9}, {
   3.860508208317856*^9, 3.860508216867268*^9}, 3.861384101008604*^9, 
   3.861384431348463*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[8]:=",ExpressionUUID->"f621ad63-aaf8-4450-a388-\
f65f264a9b7e"],

Cell[BoxData[
 RowBox[{"\<\"drdu3=\"\>", " ", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", 
    TagBox[GridBox[{
       {"0"},
       {"0"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Column], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Print",
 CellChangeTimes->{
  3.8605081126740417`*^9, {3.86050814566995*^9, 3.860508170961779*^9}, {
   3.860508208317856*^9, 3.860508216867268*^9}, 3.861384101008604*^9, 
   3.861384431349238*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[8]:=",ExpressionUUID->"09b638ed-5ac0-4cd2-b8d1-\
0f83d402fb6a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\!\\(\\*SubscriptBox[\\(X\\), \\(u\\)]\\) Cross =\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{"-", 
      FractionBox[
       SuperscriptBox["c", "2"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Cos", "[", "u2", "]"}], "-", 
          RowBox[{"Cosh", "[", "u1", "]"}]}], ")"}], "2"]]}]}], "}"}]}],
  SequenceForm[
  "\!\(\*SubscriptBox[\(X\), \(u\)]\) Cross =", {
   0, 0, -$CellContext`c^2 (Cos[$CellContext`u2] - 
      Cosh[$CellContext`u1])^(-2)}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.8605081126740417`*^9, {3.86050814566995*^9, 3.860508170961779*^9}, {
   3.860508208317856*^9, 3.860508216867268*^9}, 3.861384101008604*^9, 
   3.861384431349921*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[8]:=",ExpressionUUID->"e4ded364-f92e-4cd2-8494-\
55371cb4a800"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\!\\(\\*SubscriptBox[\\(X\\), \\(u\\)]\\) Cross normalised=\"\
\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{"-", 
      FractionBox[
       SuperscriptBox["c", "2"], 
       SuperscriptBox[
        RowBox[{"Abs", "[", "c", "]"}], "2"]]}]}], "}"}]}],
  SequenceForm[
  "\!\(\*SubscriptBox[\(X\), \(u\)]\) Cross normalised=", {
   0, 0, -$CellContext`c^2 Abs[$CellContext`c]^(-2)}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.8605081126740417`*^9, {3.86050814566995*^9, 3.860508170961779*^9}, {
   3.860508208317856*^9, 3.860508216867268*^9}, 3.861384101008604*^9, 
   3.861384431350646*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[8]:=",ExpressionUUID->"ee56fcc4-4427-4cb3-9d62-\
fc30b7950f50"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\!\\(\\*SubscriptBox[\\(X\\), \\(u\\)]\\) Matrix =\"\>", 
   "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        FractionBox[
         RowBox[{"c", "-", 
          RowBox[{"c", " ", 
           RowBox[{"Cos", "[", "u2", "]"}], " ", 
           RowBox[{"Cosh", "[", "u1", "]"}]}]}], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cos", "[", "u2", "]"}], "-", 
            RowBox[{"Cosh", "[", "u1", "]"}]}], ")"}], "2"]], 
        RowBox[{"-", 
         FractionBox[
          RowBox[{"c", " ", 
           RowBox[{"Sin", "[", "u2", "]"}], " ", 
           RowBox[{"Sinh", "[", "u1", "]"}]}], 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Cos", "[", "u2", "]"}], "-", 
             RowBox[{"Cosh", "[", "u1", "]"}]}], ")"}], "2"]]}], "0"},
       {
        RowBox[{"-", 
         FractionBox[
          RowBox[{"c", " ", 
           RowBox[{"Sin", "[", "u2", "]"}], " ", 
           RowBox[{"Sinh", "[", "u1", "]"}]}], 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Cos", "[", "u2", "]"}], "-", 
             RowBox[{"Cosh", "[", "u1", "]"}]}], ")"}], "2"]]}], 
        FractionBox[
         RowBox[{"c", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{
             RowBox[{"Cos", "[", "u2", "]"}], " ", 
             RowBox[{"Cosh", "[", "u1", "]"}]}]}], ")"}]}], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cos", "[", "u2", "]"}], "-", 
            RowBox[{"Cosh", "[", "u1", "]"}]}], ")"}], "2"]], "0"},
       {"0", "0", "1"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}],
  SequenceForm["\!\(\*SubscriptBox[\(X\), \(u\)]\) Matrix =", 
   MatrixForm[{{(Cos[$CellContext`u2] - 
        Cosh[$CellContext`u1])^(-2) ($CellContext`c - $CellContext`c 
       Cos[$CellContext`u2] 
       Cosh[$CellContext`u1]), -$CellContext`c (Cos[$CellContext`u2] - 
        Cosh[$CellContext`u1])^(-2) Sin[$CellContext`u2] 
      Sinh[$CellContext`u1], 
      0}, {-$CellContext`c (Cos[$CellContext`u2] - Cosh[$CellContext`u1])^(-2)
         Sin[$CellContext`u2] 
      Sinh[$CellContext`u1], $CellContext`c (Cos[$CellContext`u2] - 
        Cosh[$CellContext`u1])^(-2) (-1 + 
       Cos[$CellContext`u2] Cosh[$CellContext`u1]), 0}, {0, 0, 1}}]],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.8605081126740417`*^9, {3.86050814566995*^9, 3.860508170961779*^9}, {
   3.860508208317856*^9, 3.860508216867268*^9}, 3.861384101008604*^9, 
   3.861384431351521*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[8]:=",ExpressionUUID->"8272fa6d-74d6-486b-90df-\
77dd00732037"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"cross norm=\"\>", "\[InvisibleSpace]", 
   FractionBox[
    SuperscriptBox[
     RowBox[{"Abs", "[", "c", "]"}], "2"], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Cos", "[", "u2", "]"}], "-", 
       RowBox[{"Cosh", "[", "u1", "]"}]}], ")"}], "2"]]}],
  SequenceForm[
  "cross norm=", 
   Abs[$CellContext`c]^2 (Cos[$CellContext`u2] - Cosh[$CellContext`u1])^(-2)],
  
  Editable->False]], "Print",
 CellChangeTimes->{
  3.8605081126740417`*^9, {3.86050814566995*^9, 3.860508170961779*^9}, {
   3.860508208317856*^9, 3.860508216867268*^9}, 3.861384101008604*^9, 
   3.8613844313523417`*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[8]:=",ExpressionUUID->"4dcfefd6-0be3-431a-aef4-\
d9813ee39894"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"matrix determinate=\"\>", "\[InvisibleSpace]", 
   RowBox[{"-", 
    FractionBox[
     SuperscriptBox["c", "2"], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Cos", "[", "u2", "]"}], "-", 
        RowBox[{"Cosh", "[", "u1", "]"}]}], ")"}], "2"]]}]}],
  SequenceForm[
  "matrix determinate=", -$CellContext`c^2 (Cos[$CellContext`u2] - 
     Cosh[$CellContext`u1])^(-2)],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.8605081126740417`*^9, {3.86050814566995*^9, 3.860508170961779*^9}, {
   3.860508208317856*^9, 3.860508216867268*^9}, 3.861384101008604*^9, 
   3.861384431352968*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[8]:=",ExpressionUUID->"75aec9f7-98a6-4877-a700-\
8f58ed754454"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Jacobi Matrix", "Title",
 CellChangeTimes->{{3.860507962296105*^9, 3.86050797729622*^9}, {
  3.860508228425721*^9, 3.860508243032433*^9}, {3.8613816735055933`*^9, 
  3.86138167793137*^9}},ExpressionUUID->"9426b2f2-40fc-48b3-b7a9-\
5c2a073a62c5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"jacobiMatrix", "[", 
   RowBox[{"target_", ",", "variables_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"D", "[", 
       RowBox[{"target", ",", "#"}], "]"}], "&"}], ",", "variables"}], "]"}], 
   "\[Transpose]"}]}]], "Input",
 CellChangeTimes->{{3.860508434816044*^9, 3.8605084635177107`*^9}, {
   3.860508543161818*^9, 3.860508613159012*^9}, {3.8605086507409973`*^9, 
   3.860508652595471*^9}, 3.860508902842821*^9, 3.8605089549358273`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"4be11f7a-0b44-41cc-bf29-c3a4fde63ed4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacobiMatrix", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "  ", "u2", " ", 
      RowBox[{"Cos", "[", "u3", "]"}]}], ",", 
     RowBox[{"u1", " ", "u2", " ", 
      RowBox[{"Sin", "[", "u3", "]"}]}], ",", 
     RowBox[{
      RowBox[{"1", "/", "2"}], 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["u1", "2"], "-", 
        SuperscriptBox["u2", "2"]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"u1", ",", "u2", ",", "u3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.860508669243122*^9, {3.860509177109577*^9, 3.8605092167415247`*^9}, {
   3.8605092553970613`*^9, 3.860509260683514*^9}, {3.860509424359722*^9, 
   3.8605094345478086`*^9}},
 NumberMarks->False,
 CellLabel->"In[2]:=",ExpressionUUID->"7f3b74b9-9fc8-4c3e-99d8-bf8b951ab585"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u2", " ", 
      RowBox[{"Cos", "[", "u3", "]"}]}], ",", 
     RowBox[{"u1", " ", 
      RowBox[{"Cos", "[", "u3", "]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "u1"}], " ", "u2", " ", 
      RowBox[{"Sin", "[", "u3", "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u2", " ", 
      RowBox[{"Sin", "[", "u3", "]"}]}], ",", 
     RowBox[{"u1", " ", 
      RowBox[{"Sin", "[", "u3", "]"}]}], ",", 
     RowBox[{"u1", " ", "u2", " ", 
      RowBox[{"Cos", "[", "u3", "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"u1", ",", 
     RowBox[{"-", "u2"}], ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.861380464038205*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"b9eb6766-fda6-44f3-8be6-c370394e6664"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"jacobiMatrix", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SuperscriptBox["u", "3"], "+", 
      RowBox[{"u", " ", "v"}], " ", "+", " ", 
      SuperscriptBox["v", "3"]}], ",", " ", 
     RowBox[{
      SuperscriptBox["u", "2"], "-", 
      SuperscriptBox["v", "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"u", ",", "v"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.86138046812805*^9, 3.861380495680051*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"7d33fd12-08db-4048-94a4-4897b311d2c3"],

Cell[BoxData[
 RowBox[{"Inverse", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"3", " ", 
        SuperscriptBox["u", "2"]}], "+", "v"}], ",", 
      RowBox[{"u", "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["v", "2"]}]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"2", " ", "u"}], ",", 
      RowBox[{
       RowBox[{"-", "2"}], " ", "v"}]}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.861380769521495*^9, 3.8613807713659*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"bfe43850-e968-4e6a-b152-30bffd438733"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        RowBox[{"2", " ", "v"}], 
        RowBox[{
         RowBox[{
          RowBox[{"-", "2"}], " ", 
          SuperscriptBox["u", "2"]}], "-", 
         RowBox[{"6", " ", 
          SuperscriptBox["u", "2"], " ", "v"}], "-", 
         RowBox[{"2", " ", 
          SuperscriptBox["v", "2"]}], "-", 
         RowBox[{"6", " ", "u", " ", 
          SuperscriptBox["v", "2"]}]}]]}], ",", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "u"}], "-", 
        RowBox[{"3", " ", 
         SuperscriptBox["v", "2"]}]}], 
       RowBox[{
        RowBox[{
         RowBox[{"-", "2"}], " ", 
         SuperscriptBox["u", "2"]}], "-", 
        RowBox[{"6", " ", 
         SuperscriptBox["u", "2"], " ", "v"}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["v", "2"]}], "-", 
        RowBox[{"6", " ", "u", " ", 
         SuperscriptBox["v", "2"]}]}]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        RowBox[{"2", " ", "u"}], 
        RowBox[{
         RowBox[{
          RowBox[{"-", "2"}], " ", 
          SuperscriptBox["u", "2"]}], "-", 
         RowBox[{"6", " ", 
          SuperscriptBox["u", "2"], " ", "v"}], "-", 
         RowBox[{"2", " ", 
          SuperscriptBox["v", "2"]}], "-", 
         RowBox[{"6", " ", "u", " ", 
          SuperscriptBox["v", "2"]}]}]]}], ",", 
      FractionBox[
       RowBox[{
        RowBox[{"3", " ", 
         SuperscriptBox["u", "2"]}], "+", "v"}], 
       RowBox[{
        RowBox[{
         RowBox[{"-", "2"}], " ", 
         SuperscriptBox["u", "2"]}], "-", 
        RowBox[{"6", " ", 
         SuperscriptBox["u", "2"], " ", "v"}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["v", "2"]}], "-", 
        RowBox[{"6", " ", "u", " ", 
         SuperscriptBox["v", "2"]}]}]]}], "}"}]}], "}"}], "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"u", "->", "1"}], ",", 
    RowBox[{"v", "->", "1"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.86138078300946*^9, 3.8613807930300426`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"7a4d2a4f-9a01-435e-b3c2-f27aa934993a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "8"], ",", 
     FractionBox["1", "4"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "8"], ",", 
     RowBox[{"-", 
      FractionBox["1", "4"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.861380793568715*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"c273567e-421c-4bc8-b41a-3e25436c8940"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:6362\:5143\:79ef\:5206", "Title",
 CellChangeTimes->{
  3.85066952393988*^9},ExpressionUUID->"25f09848-e7ba-429a-8d1f-f58d6c8d6e6a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "x", ",", "y", ",", "z", ",", "f", ",", "j", ",", "equation", ",", 
      "inner", ",", "innerC", ",", " ", "outter", ",", "outterC"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", "-"}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "y", ",", "z"}], "}"}], "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"v", " ", 
         RowBox[{"Cos", "[", "u", "]"}]}], ",", 
        RowBox[{"v", " ", 
         RowBox[{"Sin", "[", "u", "]"}]}], ",", 
        RowBox[{"a", "-", "v"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"f", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Dot", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x", ",", "0", ",", "0"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["x", 
             RowBox[{
              SqrtBox["2"], " ", 
              SqrtBox[
               RowBox[{
                SuperscriptBox["x", "2"], "+", 
                SuperscriptBox["y", "2"]}]]}]], ",", 
            FractionBox["y", 
             RowBox[{
              SqrtBox["2"], " ", 
              SqrtBox[
               RowBox[{
                SuperscriptBox["x", "2"], "+", 
                SuperscriptBox["y", "2"]}]]}]], ",", 
            FractionBox["1", 
             SqrtBox["2"]]}], "}"}]}], "]"}], "//", "ComplexExpand"}], "//", 
       "Simplify"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"j", "=", "v"}], ";", "\[IndentingNewLine]", 
     RowBox[{"equation", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"f", " ", "j"}], "//", "ComplexExpand"}], "//", 
       "FullSimplify"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     
     RowBox[{"(*", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", "-"}]}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"inner", "=", 
      RowBox[{"\[Integral]", 
       RowBox[{"equation", 
        RowBox[{"\[DifferentialD]", "v"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"innerC", "=", 
      RowBox[{
       SubsuperscriptBox["\[Integral]", "0", "a"], 
       RowBox[{"equation", 
        RowBox[{"\[DifferentialD]", "v"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"outter", "=", 
      RowBox[{"\[Integral]", 
       RowBox[{"innerC", 
        RowBox[{"\[DifferentialD]", "u"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"outterC", "=", 
      RowBox[{
       SubsuperscriptBox["\[Integral]", "0", 
        RowBox[{"2", " ", "Pi"}]], 
       RowBox[{"innerC", 
        RowBox[{"\[DifferentialD]", "u"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{"\"\<equation=\>\"", ",", "equation"}], "]"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<inner=\>\"", ",", "inner"}], "]"}], "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<innerC=\>\"", ",", "innerC"}], "]"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<outter=\>\"", ",", "outter"}], "]"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<outterC=\>\"", ",", "outterC"}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.850669226591919*^9, 3.85066931274376*^9}, {
  3.8506693441210537`*^9, 3.8506695834260197`*^9}, {3.850669692406344*^9, 
  3.85067001262357*^9}, {3.850670047990206*^9, 3.850670089053741*^9}, {
  3.850670122109255*^9, 3.8506703279194393`*^9}, {3.850670378895007*^9, 
  3.8506703808140907`*^9}, {3.850670448343964*^9, 3.8506704608995237`*^9}, {
  3.860173210610795*^9, 3.860173213721859*^9}, {3.860503597470756*^9, 
  3.8605037157067947`*^9}, {3.8605037551259947`*^9, 3.8605037811383753`*^9}, {
  3.8605038219449577`*^9, 3.8605038239213953`*^9}, {3.860503864041917*^9, 
  3.8605038642131767`*^9}},
 CellLabel->
  "In[245]:=",ExpressionUUID->"4138af34-9486-4122-b198-abc1de561e00"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"equation=\"\>", "\[InvisibleSpace]", 
   FractionBox[
    RowBox[{"v", " ", 
     SqrtBox[
      SuperscriptBox["v", "2"]], " ", 
     SuperscriptBox[
      RowBox[{"Cos", "[", "u", "]"}], "2"]}], 
    SqrtBox["2"]]}],
  SequenceForm[
  "equation=", 
   2^Rational[-1, 2] $CellContext`v ($CellContext`v^2)^Rational[1, 2] 
   Cos[$CellContext`u]^2],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.850670064466174*^9, 3.8506701056748343`*^9, 3.850670140421299*^9, 
   3.850670204058221*^9, 3.850670240594996*^9, 3.850670277337234*^9, 
   3.8506703393552637`*^9, 3.850670392176649*^9, 3.85067047220513*^9, 
   3.8601732295406857`*^9, {3.860503698773486*^9, 3.860503716006398*^9}, 
   3.860503781658435*^9, 3.860503864944314*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[245]:=",ExpressionUUID->"07fcd1fa-349e-45c6-\
827f-0bb319381652"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"inner=\"\>", "\[InvisibleSpace]", 
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox["v", "2"], ")"}], 
      RowBox[{"3", "/", "2"}]], " ", 
     SuperscriptBox[
      RowBox[{"Cos", "[", "u", "]"}], "2"]}], 
    RowBox[{"3", " ", 
     SqrtBox["2"]}]]}],
  SequenceForm[
  "inner=", Rational[1, 3] 
   2^Rational[-1, 2] ($CellContext`v^2)^Rational[3, 2] Cos[$CellContext`u]^2],
  
  Editable->False]], "Print",
 CellChangeTimes->{
  3.850670064466174*^9, 3.8506701056748343`*^9, 3.850670140421299*^9, 
   3.850670204058221*^9, 3.850670240594996*^9, 3.850670277337234*^9, 
   3.8506703393552637`*^9, 3.850670392176649*^9, 3.85067047220513*^9, 
   3.8601732295406857`*^9, {3.860503698773486*^9, 3.860503716006398*^9}, 
   3.860503781658435*^9, 3.860503864945383*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[245]:=",ExpressionUUID->"068d2860-43be-4740-\
a5cf-0e69f1fdd4fa"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"innerC=\"\>", "\[InvisibleSpace]", 
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox["a", "2"], ")"}], 
      RowBox[{"3", "/", "2"}]], " ", 
     SuperscriptBox[
      RowBox[{"Cos", "[", "u", "]"}], "2"]}], 
    RowBox[{"3", " ", 
     SqrtBox["2"]}]]}],
  SequenceForm[
  "innerC=", Rational[1, 3] 
   2^Rational[-1, 2] ($CellContext`a^2)^Rational[3, 2] Cos[$CellContext`u]^2],
  
  Editable->False]], "Print",
 CellChangeTimes->{
  3.850670064466174*^9, 3.8506701056748343`*^9, 3.850670140421299*^9, 
   3.850670204058221*^9, 3.850670240594996*^9, 3.850670277337234*^9, 
   3.8506703393552637`*^9, 3.850670392176649*^9, 3.85067047220513*^9, 
   3.8601732295406857`*^9, {3.860503698773486*^9, 3.860503716006398*^9}, 
   3.860503781658435*^9, 3.860503864946398*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[245]:=",ExpressionUUID->"29aa6424-d52a-4a19-\
bb0a-0d3fb4e1191d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"outter=\"\>", "\[InvisibleSpace]", 
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox["a", "2"], ")"}], 
      RowBox[{"3", "/", "2"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox["u", "2"], "+", 
       RowBox[{
        FractionBox["1", "4"], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"2", " ", "u"}], "]"}]}]}], ")"}]}], 
    RowBox[{"3", " ", 
     SqrtBox["2"]}]]}],
  SequenceForm[
  "outter=", Rational[1, 3] 
   2^Rational[-1, 2] ($CellContext`a^2)^Rational[3, 2] (
    Rational[1, 2] $CellContext`u + Rational[1, 4] Sin[2 $CellContext`u])],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.850670064466174*^9, 3.8506701056748343`*^9, 3.850670140421299*^9, 
   3.850670204058221*^9, 3.850670240594996*^9, 3.850670277337234*^9, 
   3.8506703393552637`*^9, 3.850670392176649*^9, 3.85067047220513*^9, 
   3.8601732295406857`*^9, {3.860503698773486*^9, 3.860503716006398*^9}, 
   3.860503781658435*^9, 3.860503864947217*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[245]:=",ExpressionUUID->"86244048-5fe8-45d3-\
b3ac-4656cdfb813a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"outterC=\"\>", "\[InvisibleSpace]", 
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox["a", "2"], ")"}], 
      RowBox[{"3", "/", "2"}]], " ", "\[Pi]"}], 
    RowBox[{"3", " ", 
     SqrtBox["2"]}]]}],
  SequenceForm[
  "outterC=", Rational[1, 3] 
   2^Rational[-1, 2] ($CellContext`a^2)^Rational[3, 2] Pi],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.850670064466174*^9, 3.8506701056748343`*^9, 3.850670140421299*^9, 
   3.850670204058221*^9, 3.850670240594996*^9, 3.850670277337234*^9, 
   3.8506703393552637`*^9, 3.850670392176649*^9, 3.85067047220513*^9, 
   3.8601732295406857`*^9, {3.860503698773486*^9, 3.860503716006398*^9}, 
   3.860503781658435*^9, 3.8605038649480143`*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[245]:=",ExpressionUUID->"0d0228f5-a955-46d5-\
bb21-f83d46059ae3"]
}, Open  ]],

Cell[BoxData[
 SuperscriptBox["Null", "5"]], "Output",
 CellChangeTimes->{
  3.850670339420308*^9, 3.8506703921913443`*^9, 3.8506704722197933`*^9, 
   3.860173229567107*^9, {3.8605036987784567`*^9, 3.860503716014255*^9}, 
   3.860503781662684*^9, 3.86050386494878*^9},
 CellLabel->
  "Out[245]=",ExpressionUUID->"2560b832-ddd2-4f6c-be61-c0a072955d56"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Curl Div Lap", "Title",
 CellChangeTimes->{{3.860311293487667*^9, 
  3.860311297916522*^9}},ExpressionUUID->"7b2b9068-e4a0-4b5a-9525-\
748f3bbf98ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v", ",", "c", ",", "d", ",", "e"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"v", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"2", " ", "x", " ", "y", " ", 
         SuperscriptBox["z", "3"]}], "+", 
        RowBox[{"y", " ", 
         RowBox[{"Exp", "[", 
          RowBox[{"x", " ", "y"}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         SuperscriptBox["x", "2"], 
         SuperscriptBox["z", "3"]}], "+", " ", 
        RowBox[{"x", " ", 
         RowBox[{"Exp", "[", 
          RowBox[{"x", " ", "y"}], "]"}]}]}], ",", " ", 
       RowBox[{
        RowBox[{"\[Beta]", " ", 
         SuperscriptBox["x", "2"], "y", " ", 
         SuperscriptBox["z", "2"]}], "+", 
        RowBox[{"Cos", "[", "z", "]"}]}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"c", "=", " ", 
     RowBox[{"Curl", "[", 
      RowBox[{"v", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"d", "=", 
     RowBox[{"FullSimplify", "[", " ", 
      RowBox[{"Div", "[", 
       RowBox[{"v", ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"e", "=", 
     RowBox[{"FullSimplify", "[", " ", 
      RowBox[{"Laplacian", "[", 
       RowBox[{"v", ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}], "]"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", "--"}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"\"\<v = \>\"", ",", " ", "v"}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"\"\<curl=\>\"", ",", "c"}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"\"\<simplified curl=\>\"", ",", " ", 
      RowBox[{"FullSimplify", " ", "@", " ", "c"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"\"\<div=\>\"", ",", "d"}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"\"\<lap=\>\"", ",", "e"}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.860171885949217*^9, 3.860172093237638*^9}, {
  3.860172153591194*^9, 3.860172228317235*^9}, {3.860172364708817*^9, 
  3.860172374870494*^9}, {3.8601725088136253`*^9, 3.8601725095736437`*^9}, {
  3.8603163257599363`*^9, 3.86031635663519*^9}, {3.8603163940122337`*^9, 
  3.860316428257243*^9}, {3.860871122744225*^9, 3.8608711772228317`*^9}, {
  3.8608712581971617`*^9, 3.860871272363495*^9}, {3.861020539992467*^9, 
  3.86102056339509*^9}, {3.861020611580873*^9, 3.861020655960869*^9}, {
  3.861390417283293*^9, 3.8613905557260733`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"05b2d8e8-8916-498b-92ce-90815552ecb6"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"v = \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"x", " ", "y"}]], " ", "y"}], "+", 
      RowBox[{"2", " ", "x", " ", "y", " ", 
       SuperscriptBox["z", "3"]}]}], ",", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"x", " ", "y"}]], " ", "x"}], "+", 
      RowBox[{
       SuperscriptBox["x", "2"], " ", 
       SuperscriptBox["z", "3"]}]}], ",", 
     RowBox[{
      RowBox[{
       SuperscriptBox["x", "2"], " ", "y", " ", 
       SuperscriptBox["z", "2"], " ", "\[Beta]"}], "+", 
      RowBox[{"Cos", "[", "z", "]"}]}]}], "}"}]}],
  SequenceForm[
  "v = ", {E^($CellContext`x $CellContext`y) $CellContext`y + 
    2 $CellContext`x $CellContext`y $CellContext`z^3, 
    E^($CellContext`x $CellContext`y) $CellContext`x + $CellContext`x^2 \
$CellContext`z^3, $CellContext`x^2 $CellContext`y $CellContext`z^2 \
$CellContext`\[Beta] + Cos[$CellContext`z]}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.860172229063884*^9, {3.860172365625064*^9, 3.860172375312442*^9}, 
   3.860316357213121*^9, 3.86031642872787*^9, 3.860871178323616*^9, 
   3.860871273520501*^9, 3.861020546123096*^9, {3.8610206247399178`*^9, 
   3.861020656426137*^9}, 3.8613904899129887`*^9, 3.861390557098484*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[15]:=",ExpressionUUID->"fc8d7b9c-bd06-4cea-b9d1-\
f1aa5417fbbe"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"curl=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "3"}], " ", 
       SuperscriptBox["x", "2"], " ", 
       SuperscriptBox["z", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["x", "2"], " ", 
       SuperscriptBox["z", "2"], " ", "\[Beta]"}]}], ",", 
     RowBox[{
      RowBox[{"6", " ", "x", " ", "y", " ", 
       SuperscriptBox["z", "2"]}], "-", 
      RowBox[{"2", " ", "x", " ", "y", " ", 
       SuperscriptBox["z", "2"], " ", "\[Beta]"}]}], ",", "0"}], "}"}]}],
  SequenceForm[
  "curl=", {(-3) $CellContext`x^2 $CellContext`z^2 + $CellContext`x^2 \
$CellContext`z^2 $CellContext`\[Beta], 
    6 $CellContext`x $CellContext`y $CellContext`z^2 - 
    2 $CellContext`x $CellContext`y $CellContext`z^2 $CellContext`\[Beta], 0}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.860172229063884*^9, {3.860172365625064*^9, 3.860172375312442*^9}, 
   3.860316357213121*^9, 3.86031642872787*^9, 3.860871178323616*^9, 
   3.860871273520501*^9, 3.861020546123096*^9, {3.8610206247399178`*^9, 
   3.861020656426137*^9}, 3.8613904899129887`*^9, 3.861390557099463*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[15]:=",ExpressionUUID->"1ae4065b-1c86-41f5-b22f-\
9943d6cff209"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"simplified curl=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], " ", 
      SuperscriptBox["z", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "3"}], "+", "\[Beta]"}], ")"}]}], ",", 
     RowBox[{
      RowBox[{"-", "2"}], " ", "x", " ", "y", " ", 
      SuperscriptBox["z", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "3"}], "+", "\[Beta]"}], ")"}]}], ",", "0"}], "}"}]}],
  SequenceForm[
  "simplified curl=", {$CellContext`x^2 $CellContext`z^2 (-3 + $CellContext`\
\[Beta]), (-2) $CellContext`x $CellContext`y $CellContext`z^2 (-3 + \
$CellContext`\[Beta]), 0}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.860172229063884*^9, {3.860172365625064*^9, 3.860172375312442*^9}, 
   3.860316357213121*^9, 3.86031642872787*^9, 3.860871178323616*^9, 
   3.860871273520501*^9, 3.861020546123096*^9, {3.8610206247399178`*^9, 
   3.861020656426137*^9}, 3.8613904899129887`*^9, 3.861390557100717*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[15]:=",ExpressionUUID->"86633bc9-9b5a-4bcd-90b4-\
f1b069141837"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"div=\"\>", "\[InvisibleSpace]", 
   RowBox[{
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"x", " ", "y"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}], ")"}]}], "+", 
    RowBox[{"2", " ", "y", " ", "z", " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["z", "2"], "+", 
       RowBox[{
        SuperscriptBox["x", "2"], " ", "\[Beta]"}]}], ")"}]}], "-", 
    RowBox[{"Sin", "[", "z", "]"}]}]}],
  SequenceForm[
  "div=", E^($CellContext`x $CellContext`y) ($CellContext`x^2 + \
$CellContext`y^2) + 
   2 $CellContext`y $CellContext`z ($CellContext`z^2 + $CellContext`x^2 \
$CellContext`\[Beta]) - Sin[$CellContext`z]],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.860172229063884*^9, {3.860172365625064*^9, 3.860172375312442*^9}, 
   3.860316357213121*^9, 3.86031642872787*^9, 3.860871178323616*^9, 
   3.860871273520501*^9, 3.861020546123096*^9, {3.8610206247399178`*^9, 
   3.861020656426137*^9}, 3.8613904899129887`*^9, 3.861390557101481*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[15]:=",ExpressionUUID->"d4c4b623-3aec-4eb8-8fa1-\
b9b7901f7761"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"lap=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"x", " ", "y"}]], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "x"}], "+", 
         RowBox[{
          SuperscriptBox["x", "2"], " ", "y"}], "+", 
         SuperscriptBox["y", "3"]}], ")"}]}], "+", 
      RowBox[{"12", " ", "x", " ", "y", " ", "z"}]}], ",", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"x", " ", "y"}]], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["x", "3"], "+", 
         RowBox[{"2", " ", "y"}], "+", 
         RowBox[{"x", " ", 
          SuperscriptBox["y", "2"]}]}], ")"}]}], "+", 
      RowBox[{"2", " ", "z", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"3", " ", 
          SuperscriptBox["x", "2"]}], "+", 
         SuperscriptBox["z", "2"]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"2", " ", "y", " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["x", "2"], "+", 
         SuperscriptBox["z", "2"]}], ")"}], " ", "\[Beta]"}], "-", 
      RowBox[{"Cos", "[", "z", "]"}]}]}], "}"}]}],
  SequenceForm[
  "lap=", {E^($CellContext`x $CellContext`y) (
      2 $CellContext`x + $CellContext`x^2 $CellContext`y + $CellContext`y^3) + 
    12 $CellContext`x $CellContext`y $CellContext`z, 
    E^($CellContext`x $CellContext`y) ($CellContext`x^3 + 
      2 $CellContext`y + $CellContext`x $CellContext`y^2) + 
    2 $CellContext`z (3 $CellContext`x^2 + $CellContext`z^2), 
    2 $CellContext`y ($CellContext`x^2 + $CellContext`z^2) $CellContext`\
\[Beta] - Cos[$CellContext`z]}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.860172229063884*^9, {3.860172365625064*^9, 3.860172375312442*^9}, 
   3.860316357213121*^9, 3.86031642872787*^9, 3.860871178323616*^9, 
   3.860871273520501*^9, 3.861020546123096*^9, {3.8610206247399178`*^9, 
   3.861020656426137*^9}, 3.8613904899129887`*^9, 3.861390557102314*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[15]:=",ExpressionUUID->"e51b0ffd-0f14-4342-bd9c-\
a2d61cd05368"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParametricPlot3D", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u2", " ", 
      RowBox[{"Cos", "[", "u1", "]"}]}], ",", 
     RowBox[{"u2", " ", 
      RowBox[{"Sin", "[", "u1", "]"}]}], ",", 
     RowBox[{"5", "-", "u2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"u2", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"u1", ",", "0", ",", 
     RowBox[{"2", "Pi"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.860507587817651*^9, 3.8605076638837137`*^9}},
 CellLabel->
  "In[250]:=",ExpressionUUID->"97d2eec0-8b49-43ec-8e46-8615c75d6402"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1: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
g4jzTKgH3Ug9iDi7QH9jKulvIM7y0N/oTvobiLMc9DeKSX8DcfaA/gZL+huI
swf0N/4j/Q3E2RT6G/Gkv4E4NyaT/sZF0t9AnAugvzGJ9DcQZyn0N8aR/gbm
wVDobxiR/gbmQQ/ob/Qh/Q3Mg/bQ3+iS8be/gXlwHPQ32jn87W9gHjwM/Q1f
0t/4x8/Q35Bj/vY3EGfar2u9+bvQr0uU7dedsFldZ+/tK5Xt16mOrBH6dVLZ
ft2H7h1TfHuck8r269hrd4V+nVS2XxcyeJ7m8KIbUtl+nemCeqFfJ5Xt14V3
SRX6dVLZfl2nj2eEfp1Utl/nf3nVtCdGd6Sy/bpfzmMLjIruSWX7dc4DNNaf
PZ4ole3XfXN3Ffp1Utl+3cV5tpMTtiVJZft1C8aO067IfCClOG/XedcnwfIR
o/HM+dUku0tM4n3VHQZW2pKh156dys5PYs6b5def87qP452u72WE+nxT4X/H
zHlep/tiuONJsX/ce+ZUcLW2i4+UUTigcsk1T0typX+rw8zzXEY/bVPBZocs
HC+Jmaf6Jfcbo7Myt8vcNU8ZywXKqXGubSRBu84U75vzmfmilMs6pn/A8ddu
NQHnPauYsvHv3pikZTCd/s7bUrLoe2SLaosyRtLzV2v/8mIcN25jeuGF1i/m
pc00g+mF2cyVv/6gIQkY4KgT2bGaSeumGWWnVo7jwWF7ohsuNjJ3FiWuWfwr
jxkaoLjXwIqPf8dSw2UBP5lfkZ3sVgdV4bjnxRXvdTopSKbHnVh4x+89c3+I
fE6cq7JkbtDmkXrqDUwvpr+cV586HB9aoVE8oEhJYpb4XD6pbSEz8UVjb6sA
BUmXFV49v3ByktnPx1w7duc3jn8wjSqbEK4qGfZQ5erTkE/MpbyfZXGuTUyr
3SlhSfUKEk/7yTZXLRtx/NiB2XXzN6vzesF0amafYuaObvXhvLhfjFyI+vDg
0cqSObUDdtiXyknouHnuz8b1TEtJh8zNFbm3vjLptmWD5eSqmYp46/ub3VQl
pYnDbVbEKkjo+J9j073NldpI1N9EnCg0/c48Mcw6axVQyhRmHjefEdVC4u1r
YrB+h5KEjr+610013VlL0lDweWzp0zKm/Ox/BQEGH5is729S+5dqSDpOM/+5
zVxFQsdvfqj0X5DWVuK+8fC6bf14vnZW81yX94jRq8mbKvQvhm96d8qEz3vU
bx+pdbVV6dNKEtVuaqqPppqEfl6j8sWRyKxbjMmwsn51Jx+i33p1Huor9Dvm
ff9g1orPk9Rvey0OZ324NOaqjVPL8sJ89M8LjlvzdP/LYTr4XB9fmViCfpij
fiisbv4H5vtgG6ZWqRL9zWHZ4hJHm8/Mi5Ap9lX96tCvviQO6f3c4hsTrTFp
e7lNPfpPvMaumODO5cxTk/OpmxPkJNRPdtxxmTEzqJJJqApdsGm6ooT6A+M0
s1xVu4YJuxH8deMHZQndd8W2Yw8nHqxjQpac3rrBTQ3395G056CNar+Zg7pB
autVNXAf96/STOvjXc94vgg8ufZ0S9wva92aVfkNjczoZCvt+PZtcF8kJ8xO
CX2NHT+t43gdjXX3vo9rlCffl5NEhT6ZP9JBC/FX3HRr8WJvJ+ndFeTfKf79
Clcunp3qY7rr9YUsIX9S/CMdc7rs6eEl3QDzUfz1i5Odhhf5S2sMiH0U/5S4
uXMqMgOkJrAeiv+OrWlbnxgFSRs7kPVT/IeZTAg5ezxEyuYSvDCuPRc6JGw7
L+WeE3wp/hkOHSp79b8k7QH/TvHvPz7TOyDvinT3UfL/U/z9eh7Uadx/XVpY
Seaj+H9UsrzqYnJTOmE2sY/ib/pZwTirNEKaOZ+sh+KfVrjI6dzzKKn3frJ+
in9Cy76uQr/DVXNv4988Cfhvm20yKLtXjNSI+jfg/3hH2aOorFus6d3x72tF
/v91kimfR0cmdiP9EsT/9J63R/ZwaWz1JceQMpH/r7jabXHH/3LYi7UzPlWI
/J/zLbn3c/4Hdvm0Xw01Iv9Pix8/cZnNZ3b7WasWYv/PLTmT8cLiG3uk4lQ7
sf9XH9wWEdK5nM3sXnNY7P9/evV2mxVUyb6bHKIj9n957qVxC+0a9stGizNi
/1eb59UkPVjHVgZ/7yb2/5aVA1Lc1H6zf1ICr6wT+b/O/jf+/bzrWdWycQPE
/q9vsMfmfUMj20KzKidO5P+ZmmFthbx+YDbBi+J/dJGexpT7ctyhbo87if3f
p15X+XV+Equdz5WdFeXNeamnLwl9k/o0Wz+x/7cJVhwieZ7L6rw6qyPOjz8W
Jq7xn/OZnXnnagdxHsz6tiWFz3fsqT2eBvtE+W7RuI6H+LzGrrsRpivOaxlK
W+7y+Ys9frTD2VWi/GWemlXE5yk2fou3oacoT719qreXz0fc28VlYQGifBQY
/qTzg3oFrmnigmFXRHnH+qj7LT6/cG1PLn27UJRf1Db1snJ3U+Uu+p86u1yU
R5LtsvL5fMGN8HjhuE6UL3aa+LgNKNXgnqxX7iXOCy99fHb85HVhRr+hiWL/
H9nNSF21TytuntPYEm8R/4/r2dea1zPsmG3MCAuRnjF6drtG6Kes7RTTu6WI
/6u9dynvj3vPvqkfaegk0i0d2NGjeH3CWnX58nqWSJ90bnCP5XUIq7341KEx
Ih0SeXpWGq83WPnBzNApIr0hGT34M68r2LLGopcLRLqiZKVvE68fuLUrLMbG
ifTDLeMqjYFFStwK66ADUpFO2Ka2RNc8XJWzH/Xt3SORHjB//dxgwWZ1zrar
6eAXoryvecVk6AamJTdF9ajXa1F+XzUmK5TP49yEssKMAlEeT++uacjna87k
9ciexaJ83S5A3Vaof3ouzn62V8T/w1tMCOPzNXeqwHzMFlG+pviPIPizFP+8
sqgVQv0fHqf2ykykGyn+6QR/Vhb/8QR/Vhb/VgR/Vhb/P4P+4s/K4l9M8Gdl
8V9J8Gdl8Xck+LOy+M8l+LOy+E8n+LOy+JsT/FlZ/McS/FlZ/I0I/izF/8uO
RWuEOv/kqVPTx4j0D8X/OMGfpfj7Av9oEf75//C/SvDHurUt8I824R/Evxz4
x4bwD+L/GvjnBOEfxH8x8M8awj+I/0vgnwDCP4j/ROCf24R/EP984J9cwj+I
/0ngn3rCP4j/DOCfNoR/OIq/OvDPecI/HMU/BfjHiPAPR/H3BP55RPiHk8U/
gODPUvxHA//MJfzDUfyfQf4dR/Iv4j8C+Gc14R/EPxTybxXJv4j/Ssi/F0j+
RfyTm+dfxD8d8u82kn8R/3zIv4dJ/kX8a5vnX47i39g8/3IUfyXIv59J/uUo
/hqQfytI/kX8tSD//ib5F/HXg/yrQvIv4t8d8q8ayb+If3vgn26Ef7A/cAzy
70GSfxH/2UH9loj0J+K/sHn+RfzbJVZ0FelPxF/rVdAKkf5E/P1qzs4V6U/E
X2XXxu0i/Yn4+2pOOivSn4i/wtSDS0T6E/F/oOVeJdKfiL/Xawdfkf5E/M1C
JncQ6U/Ev8lx+HWR/kT82T5dxor0J+IvqfNeLtKfiH825N90kn8R/665WwaL
9CfiX19B6i8Jqb8Q/9aXHs8U6U/EvxXUXxGk/kL8D0H91ZnUX4j/f1B/VZD6
C/GfDvXXK1J/If6ZUH/Fk/oL8Q+D+iuN1F+IvyvUXyypvxD/QVB/RZH6C/Gv
0CL11wVSfyH+MVB/HSP1F+LvBvWXL6m/EP9RUH+ZkPoL8T8ypUpbpD8R/x1Q
f8WS+gvx7wd9m1jSt0H8O0L95UvqL8T/DPRn+pH+DOJ/GPowVaQPg/jPgH7L
DNJvQfz9oa/ymvRVEP+V0D9RifrbP0H8p0CfZATpkyD/d4B+iBPphyD/q0Lf
4xjpeyD//wwm/Y0lpL+B+BdDH+Mn6WMg/m+gX3GE9CsQ/2fQl+hD+hKIfzjU
X+tJ/fXv+RH0H1jSf0D8t0A/bSDppyH+W6H/sJr0HxD/ntA3SyV9M8T/C/TH
GNIfQ/yzoA+mOeFvHwzxHwX9rl+k34X4n4K+1mfS10L8d0L/yoX0rxD/wdCn
WkL6VIh/AfSj5pB+FOJ/FPpO00jfCfWPGfSXJpD+EuqfX9BHGkP6SKh/MqFf
NPT9334R6h8j6D8cIP0HxP8G9IuOkX4R6p+XTuTvbd/5Dou9N0kp/nrQtwwi
fUvEvwP0l2aS/hLm91P3yP/nOfkpX2c/kMp+/y293MX895vS72+xvfSeUG/v
lDQtieb5j477T13iJNTVrzu4bfXjeY7u76OBV+KEujpuUnW3TjzP0f29lDvt
nVBXJ5mdHP+L5zm6v06hlgWVQl29OLaaz/NYXxg6TvhQxtfVB3ZmXEnneY7u
b1Xbs+uFuvruNPcBoTzP0f195RZc6cbX1Tff+irP5nmO7m9s9qmNQl0duup4
Pp/nsb4IHH2yej1fVwf8vhDP8jxH99ft9PFNQl3tsy/6yCae5+j+zqk/WruG
r6vddTmX/jzP0f3tFPk4QairV119Pv4Dz3N0fynOq8oWCjibYh/PYWL9CL6u
HnTmx0E+z2N9V9J3mItQVxsZcmN4nYs4P86KjdrE18+tZ3p48XoWcd535FDy
Er5+TrJ8Hs3rWcR5UNyDiL18/bzd2b5nDc9nFOevrn9S5/L1c0fzzc8EPqM4
J3oFjhfq57qX4xSdeD6jOB8+NviOB18/v1qqbNKR5zOK89IrTwcK9fObrcvv
CXxGcR5xd+nFy3z9/Njs2Rxez2IfQ+mzxwGhfo5rMahK4DOKs2vZlElC/Xwp
4+hhXs9iHf36p66CUD8fO1XTfybPZxRnM4XP97fy9fPuJfOe8HoW6+gbGrfc
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
HvynnvgPvhewEPznEPEfPK/+GeL3NIlftH8bxO9cEr/4/sguiN8lJH7xvQa/
5vGL9h+C+N1M4hftD4T49SLxi/YHQ/z6k/hF+2c2j1+0v4dLUJCIP/H9l4+D
dvcT8Sfaf7561X0Rf6L9S+7ZThfxJ9rfzYt5L+JPtL/Aou8GEX+i/S98W+wW
8SfaH+ncOFnEn2j/cchf10n+Qvw1IX9NJPkL7X8O+Ws0yV9o/2HIX31J/kL7
Z0D+6kjyF9qvDflLk+QvtD8L8lcDyV9o/1TIXz9J/kL7F4J+CCX6Ae0fB/oh
jegH9P/DoB/qiX5A//cE/RBI9APavw70w0CiH9B+B9APD4l+QPtngH5YSPQD
2j8e9EM10Q9o/2XQb++IfkP754B++0T0G9qvCvotj+g3tP8O6LdMot+Qf1xA
vz0h+g35pyPoN5boN+QfJ9Bvt4l+Q/4xBf2WTfQb8o/9ztrBuUGqkuEhnheP
eZczxTfqOsjJNTJqpZ9NTaaoS+TO3F93b3kl0/ilMt7A6idza/7raaENmpLU
oF/jPlhVM+0Mf8y1CqhkHJ4+XigX1VoSdGKkhtrAWsbmYWZZXlwJo6z/dsTQ
oVqSpcc35gxq85OR2xmweHLAW6bkRcqs7eG87nBe02kH/5fOa2+49Hd4jKIk
ZtC7nAj+L503Y5vc+ffxypL91VNOfOD/0nkt0kMmaSeqSpbduzerHf+XznvX
cOwPiwctJOO8+mpN4v/SeUM1txw6yq/znOvog8K66bxfuzzrcodf53rrjCvC
uum8o4bqR+bz65wwdCUnrJvO6zNhDaPMr7O9tmKusG46b7ot96I/v86Nv9O2
Cuum82q7qLqdXJbNGgfWNyW9VsN5K3UDI6VVOey7VjYzT0Ro/Fvvkx7fPu3O
Y3ftvXhppW8rnDd6S1Svlm3zWe1d27d3jWiD81q26zr0tM17tmjc5Uv79Nri
vHktNFornv7NGpaNTVbrr4zzvrk00W/qpQa2x7JGo/knVHHe0q5JTZPnynHd
3nCXwuTVcd7V3/MT1r6V57pM99ZpWK2J8369V+9+fIki1zHZYs/0nFY47+sO
1jX8fNzyoqtrFU7/Rr/igp6t4ufjNC1vZk251IB+dUNv4kd+Pu6NbU4IPz/O
e/x0kh0/Hxful2vDz4/z7ug07gU/H+d5960iPz/OO3zOHvUHr9W4s0lpfseX
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
8s//7scSS7I/UxvUFB9cTjLl7PZby8u9YlynrdDxL3/CPHvV/lOtxQvcx6Di
6b32lecwXz9Y3K2xKMD9GqdTc2557EfmzgA5uS1uX3BffsL9LQ/gPk+KzzrX
wq2nWtUzGUUat+edlJdQHIrHPfO6MaCJeWBU2HBnv6KE4jDELyfZ3lBeErP7
3kRdL2UJxaH7+lrnMWnRzBqzs+8ueL5EO71cp0qN05KYI4FRPS54FqKday90
tsy+9Yxx8T+avYH5jnY+gvt8rsN9mNROhdFJDu9Vipj8jE3JgWXKaOc43xHe
fpLPTLvWa8r3LVZDO7dmXr88aFsxM3nq8s4eL9TRzu/uY2JN0qLZtXf174vt
nL7oSAuTtCQ2s9UgebGdl70U77659Yz9zk27JLazffP7ndDOsGOuNR9ViljH
Pw9CxHaaLZy8xF/ymS354v9IbGe2Qe+0oduK2bWvZpbtFNmp8/u93P7yJ6zJ
i2l9xfu+5sATLf/yHHZZ4Y6GatG+l0w7MmNF7Ec2cG3fje6ifR8K933thvsY
qZ0tTFN3n25Vz97NWTlFvO8fzXpcDRvQxA4L8t0r3vd3Pe47LTKU527MPZfS
QbTvc6ekdK9TymQLHr4Y8EvEM4XflTbxfMK+0Hfd81PEJ51G9p63XvUbO3ju
hs1uIt5IhfvfHsB9htTOXOOdN/k45ea7XlKeK4rTL//5OvFxylUkXJaPE8Vp
jf2hLpmP1Lh96lcb2oni9CCJJ7bsy6+h0a33mFA7HUj8sd0vb10U1fqECbVz
G4lXtlf/P1oP958zoXY2Qp9dFe4DpHaaE37iZpwdHX05444JtdOf8Bl35r+T
F84cSzChdqYT/uM+1dUeO2orNaF22gGe7wieLLWzCPBMJXiy1E59wLM/wZOl
dtL79Di4T08Wz7kETxbjHfD8QfBkZfH0JXiy1M724J/GxD/RznXgn47EP9HO
r+Cfx4l/op30vlBPuI+O2qkB/nmH+CdH7SwC/xxC/JOjduaDf14n/slRO+ub
xzvaad883tHO+xDvpSTe0U5DiPc8uM+N2nm/ebyjnbMh3otJvKOd3yDe15B4
RzvVgD/XEv5EO1cAfx4l/Il2Tgb+XEX4E+0Mb36fMNr5eRThz/eEP9HOLsCf
7Ql/op1zgD+nEv5EOx0gH2WRfIR2+kM+qiX5CO00gnyURPIR2vkV8lEa3CdG
7XSAfJRD8hHa+Rry0VOSj9DOXpCP7pF8hHZ2B/0zgOgftLMr6JxKonPQzgjQ
M9OJnkE780FXTIT7uKidu0A/2BP9gHFkAPrBjegHjKMnoB/8iX7AOJozh+T5
3geDnSozd0tldVrQBsNo4b1VWT0WHLpjMK/HpLK6y+ZTiaC7pLK6a+Z2nRO8
7pLK6i5bLbMs4X1TWd0VNmukOq+7pLK66ybclyWrr26WLLHi9ZWU4pDSm3xf
eGydc7hfvJTikGJC5o/wPLhX4+NdKcXBb4a2k/m2TObchx+jF4dIMY/cyj3Y
OfL9R0bZ6fLIbqufYR6J2WB2KOdlKXOhXn62UXA65hF6P/wAGR245d2qw/uf
Kkn84nxX+oyuwDzi/sw3fNnVZ4z5uci7ji/TcN78tOT+jyzfMrZNo1Y95v9i
nq3Yr7F30WfGfPl4z/0NhThvA/izVEZfte7f29y6voG5cnT3ys+P5DDPhg4y
2nHSMI5ZcdS++POofzqkz7LUD/r8Og8o9nUW1k3n3dmuy0vF2mzmx4aGOKf4
bzhvOsT7NRm9NK6PTrLl12Jm2rxvsz+G/tMh93eN/aiVdoMdIt9a/0b8v3lz
VoRO1f4azdaoZDQ+L/inf4xfef6qLbnBhkwNWfut6p/+0ZS5T5vO6zLkvH5M
r3xW22zXp5BBKjhv9GStolOGj9lRLk7FN63Tcd4jRld1FC2z2NzyG/Fjyt7j
vConjVt8V37Hvjqe6Bdv9hXnHQj5wkdGz3SZ+WDZFPXf7Pvv0VPPz1PAefvW
2bbotSuD9c+da2A1LxnnfWFxr4Cfj3UIMzihYJmF817YbOS0272YzT+oOnTY
wg8473+QTx/L6JOLrgXbrKIVubOZRVnrHtagXy1/9WFaVd1LdpKut/eUiqM4
79CxjOqLgkK2/kWL2jZfo3HeMr3KBzuPfWcHGc0Ne6b3kJHVG9zC2rJv3m9Q
byzNSBxdvlmFcy75dmbj4Ic47+nFsaF8HLE1OSs17UOkyHuXz0+25v2JHZbQ
rrHz6mfIe606P0vl44it31B4fmhwOvLec1jvfRn90Khmls7HEbdzz/ah3qMr
kPfe9dY75HT1GTt5ZGP5kpdpOO/K8gQ5Pn7Y0gLmBB9POO/8+jYX+Dhic7++
zPZvKMR5x8L+bpXRA9aFqRKb+gb2YFror0+P5DAvDIlSYU8ZxrHvu4ZL+TjC
eYvb2Hfsyq8z2nT1SGHddN44tV1uyrXZrNGn/Q58HOG8o8Gfc2Xy+5Uf46dP
+VrMxr5V6sXHEc5rsdnHtGXaDab4vOUIPo5w3vKRm8624vd19prw1sI+03kV
pv9+X1xyg8m4NWkHH0c472mZ+0vpvNuCNxbd7JXPNGl/lA8dpILzZv5a8yPI
8DGjr+fPhFun47w/ul9oL/jxm1NPVcfyfk3ntS/P2PlN+R2zUipfw8cRzvsR
+OqlTP7d93SVzWT138yYgQkRfBzhvHlZOznDXRlMxOzK/pPnJeO8ZafPHBbi
9sq9voFCHNN5z2zY8XGXezGznDEr4eMI580DfraRyafnppX24eNIYrV3Q+P6
hzXoVxdGrbPg44hJ/zK0ZHbFUZw3JMOxVuAplaZhF3V43qLzbrnaKYSPI6bH
tG69nus9xHn/5a/V/cT565q86WA+jiQx+daDPAY//P/mPUPmxfj9ADicJjjg
eCjYk9r41x6M6xrA5wTBB8e3gp21U//aifF+GXCbT3DD8fBOjN6xyz+ZGatD
zvbn0hmax2cYpxbmK/9kvN59KWuKyMPxGxGTbp1YWs04f3w6pulHKY63Hl/3
ptOlSuaexmY29Fo5jk/007h1+0UDo/ii5dOuBc8YqgfUq+fVKc+oZ15azb7R
IaMQxxVvth7xevkvZlfwnWNKpWU4ftnKVO/4yBom2TlLLZD/S8frFU4nVm2R
l+z4pn585nKWkdUVU5sSm/VzLnvdff67n5ykVO3IqeinX/Hz+TNW6sldaGQe
bBmR3vVHOY5/AL8aLZP3Tx3aF7R5Zh3jPffo7Wrd3/h5uu8byL4jf14FPxxG
/BDH30Ifzxv6eFTPmMHzx0/w/JGOJ2y9Xu+nryFpc/bChfrVH7EOnaEaU7/f
VUWS8ym6Q8zLJhyn9zqWZ5B7HWkfSQLjYzKbj9fAPQlFcN8jHf8K45Uy429b
yWsZK7eRHDIrKQ599Imh/aij+uPCXo1pLVmUU3DyQGMFjms+iHu3eZe6JKjT
2G4HnitI6Pggo0WBiWPVJB3ily2Wv6aM45oVkXtfLdWSLB75J+/SvAKG9rVs
5brFBPm0kVzSyVp/pksdjh+Pfep3+UJLyRUVr30KZxUkdPz7ttLTN1k1iX3n
DTHh/F86ntPY7sGGO20lYf4nXU0z0xnaHyvbmlQcOlNL0jFNOsHvVj2OV717
YtrWpY1EJ++4eWxPBQkd15HzulharybZNCHqVL9aDRz/ALzagfAqxvUf4NVs
wqsYv+uBV50Ir2KcbrGKtD01uJh5YXLUZc2HGoyvMb/tZtv1KGSuGevvfaVb
h+OlFt9tFfj4ybo8u0SIJxovvU5F99Ph4807YvwKFT7+6LiG9UPvIkk1M99J
a77r/nr05yrg80cy+vOw+9DphQ6FjN/aqtridDkJ/fwp4PnhhOdRLznAc+0l
8Fyb+rNfF/mWD/jxV/2W5AVoqWH/JwvuS9kL91VSf4uF8SMy43MnLcvRXt/E
HJtX0vbtek30n/KFXFNOwU/GuLNVSLhKKxxXXv10jDzvHw/7d5x/hfcX6g8e
U0/6BfH+JP9gRZXgX3Q8VX9o3rhbypKbwZm3HANb4f4m6b8/YpJczczZ7zJq
hVJbHHeHPP6F5HHcd91RzfL4Px0OeTyd5HHc93jHFwNOusYxezWSrv6o+Yn7
2314ybcLrnHsT3WjEPH4reXrJ+jwPLts/Z8cgXf/8eTgSfoFz9i67ChWPL70
zWSdlRtfMy1fab+8JZHHfbz/f/RL93L+Bms2vmZznOUTxZ+PAV3RQHQF7vtd
OFeQBucK6L4XtyiMYsOeMEY2U2NK3TRw3z8qlV8S6kYzuCeT7m++0rnr/2t8
dV/N1lp90hgvt4PH3Izb4P4aD540u1ufNHZ57+gD4vGxnmsDg3ge2WicESrw
Ct3fyTPcH56bV8BuWdzmiHhcr7r22phuJUyhS69Jg3b829+Xkg0KTLcSNn+Z
12DxeHfQjR+JbvzXt2yuG//Vm6AbhxPdiPv+fXX/qHk9CtmyH20l4rhushly
9vTgYrZdJ+9WYh7QbNMlq31GIau776q+OK7ZbLdXiqVl7IKwXuvFPGDvfMPy
k0Mhu6/V1kxx/HZr3o/Cfa+dFDP/k6SatR97NGm1iB8CQcfeJjoW9/03nOtY
Aec66L4v1661HKxZw1ZU3HfXd26B+95YQe4Hq4f7Oen+6sG9YbUy41v9viXn
Fvxke627yIjj+ogR66Ozvol9Ocg/OE/EA9df6mw93aWO7XPy42NxXI999V2P
zxPcob1FaZdFPDBWsifSNLmavdRzdhtxXG8ZvTXJ9JYyNyvftY2YB/KgTplK
6hTcdxeoU76TOgX33Q7qlDxSp+C+Z3dZPlf/UiV79o+ekVhHmewZ0e3k0mpW
TptVbRTpriOLf97hdRE7zLaTy3GRLpp8fVw4v9+saeuhOooiHRW1Ud3efWYd
q9WrVlmsW0ZAfeQhU/9+9y4K4nUR+3DhoZIuIl00HeqmQ6Ruwn3fC+dqBsK5
Grrva7yYETN3KXGtVXUs2s1SwH1XgHv5rsK9oHR/NWD8jMx4lM2a0dKxatxY
9e/X5EQ64bfdzFXuu9S5l1ZX7faLdEX/Yxa2fL7n3qnq/bwpyvvaC5q0ed7n
PM4tuCEv0gnFuuqbv9ercRYN+971FeVxhy3a3nze537ouU27Jcr7tC7+Tepi
RrYuHkXqYka2Lpbf+Lcuxn1PflTcoUD5J6t4Y7F+g0hvuxg+Hs3rc/aY0ZS7
fUT6/KR+jRkf52yXrC9NOiL9LGc4J5XndzZ0hE2Krkhv33XpJf+nnxx36lxw
TKRI99J+vlSm/xCxquEhr6u5V6069hgv0tUNUKd7kToddexgONd0Cc410X2/
X2d8Im+1Oreg99eUyI0/UJeqwX2YK+A+Utx3GB8oM57x8s8PXk9y57ofT/IX
6cnUD56GvP7kdqUV9Twj0p8KAy+/4+Oca3V0jtcpkT6sSl13kud3LnFF1c1g
kZ5csPFJl7Mztbj1fRXH+Ir03vhdTU95fcgVW5iHjhDpQ9qHGUr6MKxsH6aS
9GFY2T6MIenDYP1I9/cA2V+W7i/1hz/X//oDjsvD/h4i+8vS/Q0Cf+hI/AHH
I2EfI8g+snQfaf9n60Ttbn1+pt6n+34P/OQ48RP8PO0LWZO+ENazQ+FcWS6c
K6P7viDerutefQ3uk5zOhl+rP2Jfmt6DagD3oNL9pf6wWGac7u8Wsr8s3d9M
8IczxB9wnO7vDbK/LN1f6g/qxB9wnO7vS7K/LN1f6g+riT/geD/o+/mRvh8r
2/dbRPp+uO8Xoe/3lvT9cN/HAZ83tP3L57i/r4H/Qwj/4/gU4PMxhM9xf48C
/w8l/I/jP4C3HxDexn2k/caHMv23GMgLrUlewM9fgj5kMOlD4r5nwLm+dXCu
j+67+0YftwOuKpxpRmVK1Msm3PeWwOen4f5Vur9KMH5ZZrwe+DyD8DlH9zcG
+N+Y8D+OtwM+30H4nKP7OxD4P4/wP44vAT4vJXzO0f0tAf43J/yP47HQZx5J
+sy470ehz/yG9Jlx31tAn/kl6TPjvivMaKbfcH/Lm+s9HOdAv80n+g33tw3o
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
r/3eui+EPP2+etRtd1F8pflrtRX4Wq6fqsRLFF/2497OF/JZ0bkDxr1EfDgN
7sFbCff40XWZrAiOEt5XcVzeIeyDiA/779iRJ7yvwodk5V4RH3Y6ulBFeF9l
5g5n4yEiPlSH51aTZZ5X/rqnv1DIl+MD7j72EPFh9QqPCUK+HNP5Y6teIj5c
veGHnZAv9WYrhy0X8SFdVx5ZFyu7Lie43092XQvJuljZdc0m62Jl1zWFrIuV
Xdd4medxdF3GZF2s7LqGknWxsutqR9aFdfd28EM14oe4ribww4lw7x9d13jw
Qx/ih7guH/DDZOKHuK5H4Ie7iB9in6oF+OE5medNU8APWeKHqB8Ogh/mEz9E
/fAC/LCh718/xLzcC3gjj/AGrmsr8MYcuA+Qrmsx8AZDeAP7b+bAG70Jb2D/
rR/wRhvCG7iuNsAbv2Sep9QAb3wgvIHrygPeeEZ4A9f1HnjjDeGNf89Bzmep
i3gedeMHuCcQeB7XVZwwaLKI53FdZZZ5LiKex3XVZvntE/E8rqsBfrdO9nmB
Uvn7JyKex3XtkU6sFvE8rquFcmclEc/juh5CXnYieRn3SwPysgXcH0jXNRzy
sh3Jy7gue8jLq0hexnX5QV72IHkZ1xUFefmoTD/8DeTlSyQv/+uLQl6OJ3kZ
19Ue8rITycu4rg6go7yJjsJ1jQUdlQr3CtJ1DQEd1Y7oKIyvB6Cj7ImOwvia
DTpqFtFRuK7PoKPqZPq9W0BHnSE6CtelDjpKQnTUvzoCdFQR0VG4rgWge08T
3YvrsgXdWwT3DdJ12YDu/UN0L65rMuhe7Ud/dS+uyxx0bz+ie5EPGdC9ZjL9
TGPQvXZE9yIfdgTdu47oXuTDDqB7JxDdi3xI7yE0gHsIqT3zYNxMZjwE+rGF
pB+L+WjCmC42wrm6B84T1IZo1uD4d+jnZ8J9g/R7PsL4O5nx29Dnjyd9fszj
MUs/1mnz/37K3WTbTP6/0/EweE4UDPcK0u85COPnZcZ7w/Oj9uT5EX7P8Zyf
oyL49ehNKIwR1kfHXzo3e/6I32MNzyVHyoyva/5cEr/HM32B+p/VH9kpevKt
9ur/G38Kz7X7wj2B/86pkvEuMuOXmz/vxu9ZtTBzTfTLJlbR9MzoA64qOJ4O
5yU2wn2A9HtyYXy2zPhmOEdhRs5R4D4uODX1uvB8fZbl2AfCuWk6Ts/hFMO9
f/R7jGB8lsw4PZ/zjZzPwe/RG+VxU3iO+/Xps16Pwp7g+BA433Ue7vej39MX
xlNkxum5r5nk3BfGkfG1BWeF54Vv7l/bN0izBsf3wbnB/nCPH/2eHTA+WmZ8
LZwnbEnOEyL/OF2fFCD8e4+948t5/8XxxubnUfF7Psvc44ffD+dUy8g5Vfwe
D7e8WdH8er7cOLJVWB8d39P8/jT8nq/Nzz/juBmcfx5Ozj/j95gPef6mjt+P
b7Oihgj7Q8dt4Pz8crh/j36PU/P74v7ZD+fq88i5evyecebanQV/unXVNUrw
Lzo+Bt43+QX37P0f76Hg+ER436SKvG+C+7h0Q08LIR6Onowc8JD/PB23gu95
JvM+iwt8fjv5PPrbdliXncz7AlPB/ghiP8bXSD2Cc6rMOfN5gOdXgid+/h3s
u6vM+WT35vuLn98OfjhG5lzrMvA3A+Jv+HkaF09kzkOOBv9/S/wf10vj1ELm
HB2Nx/9IPCKeecAbM2TOXy0EfrAh/ICf/wQ81lXm3I4b8JU84Sv0B5fmvPrv
nA/wpxXhT/z8bpn7xxAf4HN9wuf4+TzIO59kni9fhfxykeQX/PwcyIPWMs8l
TSHfvSH5DtdL78+JgHuxZO/PidS5K9yfI5W9P8du3VXh/hwpzdf0ffNg01XC
++amsu+bv2io9NP4eNeUzpsL73M9gvug6Ofpe15LZcbvwvtcFuR9LrTfVu7j
OSFvjZ94uu1L0b7T+6ZUZN4Xo59PsPj7efSrXN0hL5W6ZDEbD85Y5umRxDgY
kN8feF3dWBhicML0wag9vup2u/G+r4S+Gj2UunxiLI2PZnh4ZDCX4XcM1CZ5
5CqHlzFZYb/KE8flMtm+5HcP+sVsearYpYYZ2nroXg+PD/D9mpIMScxlH6ff
zBbLTx265H9iSuF3FQzTtM1P9E1nzBae/S38pfYkV5jqBlQeMbX3uPZa+Evt
WWbieT+w73vGJ0V94wn+L7VneED1HAfTYubL2xTnJfxfao9CdeyWwL7ljOE2
yeAT/F9qz7fQspTfRtVMtnKXG3/4v9SeuZ2m++3kcbnX4s8IZR4nas9OublH
1XhcJjmfmBLK40TtScs+WL2Dx2VRh2wfASdqz/ezboYJPC751yPWqPA4UXv8
YgeG7eBxGRw6YYASjxO1p4Pe+eROPC5rvwzu7svjRO0xynSptffeJHW4S+6n
pvaEx1ea2Xv7SofDfdZ03m4T7B769jgizasi91/TeV36xX9Z6B0oDYmD+75h
3hit9hrDi05LF20l92vTeT12jPk/fkejpM//+h2Nx0tP/c/f0Vj92vJ//o5G
myk/3/2v39G4Lb269n/9jsbAU2H/83c0mmZ6/8/f0cjUXNBW9LvYEjm4z22R
s02Kh0cSa7OyS7WSaH+d9Y4M4/2b7bzt13jxPp5rdFfg/ZvVYgs1xPtYWjG4
ZKcHX1corPiqKNrHvUU9Z3TO/8TuMHj73Ee0j4avO9y9P+4rWzdxxi3l8Cb8
XYmkpxrdF4b8YO8ML5wyYdu/3/UYnO/5cKdHBVuT0lmq2EUZ8dz5euuWaRFV
7LC5dkMeJv37XY//0jcO6Jxfw64tDrjg46SOeOo9c31f2vIne3NrWjuLFi0R
zxXJK47fH/ebLVFX81MOb414xt1fYnnAtZ7Vnn6+3rGPFuKpHLegfkFIIxtz
Qjpiwra2iOeGgY8S+bhl2YZSL3H83goaOpKPT7Zppd2vQFGchnf0asnHJ9tl
7pgYB1Gczp6+opKPUza0+6HbgaI4nXG41SI+PtmIDk1a4jidnn77qYPpT1ba
ct0a/i/iOUXLfsQjy3o2TfHDsxTLevydDoO+u9MD+8pxP+qvHeP/Ip4Xntru
eTJIgat1/2DG/0U8u6/sa/LHSIlrrNQr/22khHieVW+oGGiswqmsmRnK/0U8
u4SlX3UwVeNalvhP5f8iniFTLtkfm6DOtV+W/DtggjriqV/qrv3IUpPrUvDn
WoqlJuJ55p6mDs87rN14614eIn6e9fTLUt4v2aCfh47tFPGw3Qircbxfsoo2
tdr3RTwcYWOrwfMLG/9y0OSdIh6OUlH5yfsl6+rp6K8v4uHY+3FFvF+yPfuf
eJYw7iviueDuLWfeL7k32U/VF4T8QDwXttMs4P2Sm5TkYcj7Kf7uif3aZba8
X3I9TgalTI2owt89WfTs/n+8X3INq2Oc9PNr8HdPHAx1xvN+yeWMT1Xm/RR/
92SJl+sd3i+5GN3PlxPG/cbfPYn+7thhaR8t7tCPJov9rvX4uyfDOh2eyfsl
5/JQ7/P8kEZGFk9bgidL8VwY1Kovz+NSxkVrdAu73Xiv42zAOZDgzFKc5wHO
TdZ/cWYpzpGAcyzBmaU4RwPOLgRnluK8EeJFSuIF7Um5nHuSz3NSk1RNO+Ev
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
Dr7cQHTQ3ST1jEogJRPG5QZQfzIN/YlfkcfuJRuTyNJofwfZnwxHf/IJ410j
iHcCi3c7Md7tgngneGG883Fu3aTc5wuZ3WCzsexnpqGf6YRxUAvioMDiYKvx
Bt4HU7NI/qE1arL/yUL/EzVaz967PJtYDdRpm/hXLXHHJxUjW3110emkatHh
NnnEvPPtZbJfWop+6Vqb2qm7LuWRtbFD9x5uoyY2Xl+zKLFXbfHi4eqz88YW
kHl3CjPmUX9VC/2VSrMqP+f3BeTOtHXqjhEaovXgsvWJwTVChV+pg6V3ETk/
ysxB9mOG6MeOaOdV1VB+0Gt96df39bTFhXdzHxjbFgr7sL/bCPfz2Yz+LUs9
MzBmXjlZ0tDC0f9qfbFO8YuHvsZZwifvz14XdCtJoMq3N72o3wtEv9fne5rr
0cOV5M34Xl+unNcTFyb76d5yTxEsVqZ0XilUk9G22vqy3/NGv7cJ+YMX8AeR
8Yes81ZZlCcQK4/ZVw4p8ITMNwMCpg98RJx1y4bRq7DzBz+k6xfrJ72gfsLX
1QIP946UN5DYwqlJlQr8waKvejblCUQzffdZmS94IU8wDZvwYO/gTNIu3nPa
XgU+0AH5WA/gY5yHN0A+1gn4GOfh9ZGP9QU+xnn4juPHjClvIFYjtkeWK/CH
elaL35naVJJhURGL6VVwPqgyPzFYTdyaarOb8gYyzqq6rcwfApA/aK1rZuM7
9juZcqdn3J6x34WvvWrC3BNriYMblK6mvEEKbN5bUOQP94OedKf8QLq1f0GO
zBeWIE8YiPszxOH+PIwn3O3etB6N99KbdePOpCjE/Srkk47AJ3kesSG7QSTl
e+Tl8BemfyvwvYhf62x8Xg43mrmN8j1i0WRO1CjK92yR770oMThGeR3ZmHZ4
xkwFXjc/qF9/yt9IXj/VT6cU+Fsu5gtWkC/wPDEP84USyBd4nliI+cIlyBd4
nlhxOWPKU5PakovLA6NZDXKFriNVgt0d1MSwiDVelNdJY0fGFYxW4HV3Wr/O
ofxNql3l09RLgb+FrzR3pTxNSn5++LaNAk9zwf1MbHF/G8a7WF5wFfICgeUF
mxDPBMCTMDxZHXUQ1FE5nkcQT3PAkzA8ExDPdYAnUcYzG/AkDM87+L4j4H2J
8vt+r/zxvoS9L8H3fQfvS9j7Tsf3tcb9W9j7Ktk1P49pIdppDNgpYXbaHe1U
A+yUMDs1Qzs1ATslzE53on2JYF+E2dc2tKOxYEeE2ZE12stVsBeJ2csDtJcQ
sBeJ2YuA9hKL+5kwe+mO9XBXqIf/PBcJ7eg12JHE7GgOxs1VEDcJ489/YhzU
gDhIWBychfGuFOIdYfw54Nd4R1i82/lr/CIsfplinMqDOCWxOOWG8cgM4pHE
4tHNX+OOxHiy2j6IL2chvkgsvpz6NY5IjCcX/hovJMaTW+J3mZbwXYbX36x+
jRcS48kN8btYEHwX439/BPOR+ZCPcDzT6wyKbJl8U7jdu9sOykMI4yGGmKcc
hzyF43xyv4f1NvdoYdEH42eUbxDGN/7A/GUC5C8c/36Yv8yD/IXjvxbrKqFQ
V+H59Qisq1RCXYXn1zcwr8mBvIbP1xustwyAegvPuwXMdwwh3+HzOOOI44g1
5dmC8O2AHeUbEuMb6ZgH3YI8iM/vcpWMoJ2X8oRUg/rxlG9IjG+YYn40GfIj
Pu93r7Ud6PS+QPDus2Ek5RuSDfINT8ybyiFv4uvBtvG+SdU0/t3zWWiVVE9b
8kS+UYP7TljivhNsnex6HPMxel65MP1MehjlG5Ie8o0hmGflQp7F18/LVXUW
HDlcKaybadb86nk9ifGNrZhnDYQ8i6+fFlinioc6Fa9XnMe6xG2oS3C/5GF9
LceF8gzTE+u/y7yD8Y25qE8YAfoE/r1GDesVNVCv4H4sFusSblCX4H7sCNYf
YqD+wP2YD9b9fKDux+s/7bHuVwR1P17/0cG63zmo+/H6jw/WK9ZBvYL7w2Jb
Qx2ZZ0wNbWvVhfIOJ+Qbs7Be0QvqFdxPJhaNtZd5hp7N9zCZdzC+0R7rFcVQ
r+D+8x+sS8RAXYL7z6Jf9wHm/nM21hl6Q52B+8m2WLc0hrolr1+twvpSGtSX
eHwMQx2LG+hY+LwYY32pK9SXeHycinWk61BH4vFxAtaLRkK9iJzD+DgO69Jt
oS6N60FbLMG6tAfUpXl98gjWpe9AXZoEIN9oYzimLeUbolYPuyFzGuQSc+Qb
RVhHsoc6EnmB8dcG60UvoF7E4+8hrAuthLoQicf4W4B1noa4DwOLv9ew/rwX
6s+8Dvkc9UjvQY/EcWtWuqKnRqtI4WnP+C3ea4J4/aFjr1PbNC6nCLVVQteH
D3jC6wwut6xrNszMFHZ6DnFplfyS1xNeZzo4DF5ZILT4fNl7qn+ywM4xWb1i
X++Ie5Qfd643dvSVNF4fMK4TazBEq1poPpOk5OhkCN2wDjBzhFrZ9A61xOlH
Fy/Y4Z4tsHz/tn5btz+iVcWXWXvX7nfLE1her/1uQELaAg3Rq47HULf9BQLL
36edsB8UYKAltjAZptsrqkhgefq12V6BriH1xHAro9fqJSUCy8c1uvq1MqF+
fbpT1dGXJuUCy7svr5oc5blWT9RY9crt9MRKgeXXk1Lcqsc/byCePxBotnRj
tcDy5fO5/Scc6CgJYVseaR2kV4ZnqdGW5GkD3winF9vnudArw3Pkl9tald0/
Cb3GZeTIV4ZnywHmAZHDsoWDs0+lRdErw9PLdnzrR2YFQo1wNVu+Mjydi7bP
79K3RLj6dPssM3pleA499vC27+AKwcVu7se99Mrw7Da8tmbZqBqhYdrQqeX0
yvDcvrLVBTNTin+I/nxzemV41ooLG+vSTVW0XO3TcTq9MjyXmEwp3dtLXTQY
nJfuR68Mz68rS/yjLDXFnDrOAQ/pleHpFLfXulzUEqNinrlU0CvD87lJt6zO
NvXEo379W3ehV4bn/ICYS2voulyca31QXqcMTyusm91Wqput+NTjVhhdr5ZH
XrTWlNcv4uyKdTNPpbrZVMtaOi3oOj467f6KjXRdM/xLsG5WrFQ3W62WMcCe
ru9dK54FyeudzUsE1s364/uz+7Fus3qPpOs+9v7tM7IdsPnSwbpZjVLdzPnp
uzFZ1B50tc8clu2DzSOrpxGsm7H738xHz95K7eRsJ9thM6jd/FfdzOrJNMmP
2s+wMeS+bE//VTfb/Nc/I12pXX1Z3HPAJ2pn/1U3e26W8KY7tbfNBy+GyPb3
X3WzJqk6M1WpHba/29ZiJrXL/6qbuewdmh8v22fqgUuyvf5X3ezCEJ/VJ6nd
9lDdZLCY2vF/1c3yS0O1PKk9b2h0f+wEat//VR8brvE8c+2aIHJr+OxJiuvz
wKg+++4OeEJsrta5q6GwDtW0N/zTMvklOXDEo73ieuufP2+uo38yiVxoulxx
XfXL6ug/6koaEfaecFRcP6+SWqpTv0lu3zS0UlwnnnEN3Le7Z5Om2ZH6iuth
c+q6zH1uecRutcpGxXl/+e6vozP3F5C99S1L0xTm1zhh2fieUUXk+bGlcxTn
cdGzhRrUbxKdboGJrgrzJUXNDU0wKScj7meOUpwXXcnVI2BiJYk4r//BUwF/
x9tORks2VpPpBeZNFXH+NulbNPWfRPjDcPcBBf/pfrXhPuo3ScrXmL6K/jPw
7ZsT1G+S+i6PJyr6zwsO7VdQv0m6jLpYX9F/xuf2O0f9JjlzJGqGov+MNf9o
QP0muenbW+qi4D+jF25ZS/0midx8roWi/3wS1DWL+k/yak3TFWUK/nNG+bzO
1G9Knv0iM80U/OfHQ0Iq9Z/SypvVB10U/Oe0fgYHqN+UfLr2GqroP1PepY+k
flPaetGjOErRf64KrU39puTb7uypcgX/+b75zlumNvWkQydSxpkq+M/O/pO8
6Lokb1/GjlirEN9PtPPIpeuSRB4KPnNHIb5PXHtwLF2XZHTA/RctFOL75eIq
P7ouye3Kjn86KMT3qxcv+9B1SXzPD8scqRDfr7k4edB1SYZN/KtTtkJ8f7dt
Uxe6LqVqlcC52xTi+/v0lFN0XUr2rxZN3KcQ399b9WlG/Y7U49K2YleF+J58
ZPduui4lvXWn9/VQiO8ppRka1I9ImXakp5pCfE8db7Warkspssvbly8U4nv+
q+hyui6lE6qFS08pxPdFauU96LqUVr3VNlysEN9NEc9XgCdheJ5EPCXAkzA8
JyGewwFPwvC8gnjeADwJwzMQ8dwFeBKG53XE0xrwJMp4lgOehOGZhHjaAZ6E
4ZmEeHYDPAnDMwXx1AY8iTKe6YAn4f4Z8bwHeBKGZwHieQTwJAxPT8RzGeBJ
GJ55v9o7x9MD7T0Z7J3jGfSrvXM8L6G9m4K9czxfoL2fBnvneMb9au8cz2do
7xFg7xzPaLT3BLB3jqcr2vsisHeJ4ZmG9r4C7F1ieLqgvXuDvUsMzw9o71vA
3iWGpzPa+x6wd4nhmYT2fhDsXWJ4TsB4FALxiOMZgPHIGuIRx1MX49E+iEcc
zxEYjyIgHnE8rTEeDYB4xPH8iPEoBOIRx9Mb41ETiEcSw3M3xqNJEI8khmcy
xiNfiEccTzOMR7EQjzieqzEe1YN4xPF8hvHIFuIRx7MFxqMHEI84nvMwHrlA
POJ4TkH+6QX8k+M5FXnmIOCZHE8b5JOngE9yPKcib/QF3sjxDEV++AL4IcfT
BnlgQ+CBHM/nyPcuAt/jeJojrxsJvI7juQT5WzbwN45nGPK0HcDTOJ4qyMe6
AB/jeNog74oB3sXx3IH8qg/wK45nPPKozcCjOJ4nMD+KgPyI45mF+dE1yI84
noMwPxIhP+J46mJ+dBbyI46nB+ZHmuKP/Ijj+SfmR2GQH3E8+2F+tADyI27v
RpgfGUN+xO19PeZH8yA/4niWxkJ+NATyI47nXMyPWkN+xPFMxvyoHPIjjuc4
zI8SID/ieEZgfnQZ8iOOZ0PM3z9B/s7xbIP5ewfI3zme9pi/X4H8neMZj/n7
UMjfOZ5emL/nQ/7O8WyB+fsAyN85ntMwf98K+TvH8wbm79mQv3M81TF/94X8
ncejKZi/94X8ncejC5i/p0D+zuNRjTnk739D/s7j0XnM37tA/s7j0TjM319A
/s7j0XLUZxLQZ3Ldvi7qMzVAn8l1+9NRn9kO9Jlctx+M+szHoM/kun0t1Ge6
gz6T6/YdUZ+pB/pMrtu/ivrM66DP5Lr9dajPtAN9JtftJ6Bedwvodfn476Be
tx/odfn441Gvuwz0uryPwwb1umNAr8v7OEJRr9se9Lq8j8MM9boqoNflfRyn
UK/7FvS6vI+jMep1r4Fel/dxnEP99lXQb/Px90H9dhnot3lfjyvqtw+CfpuP
/xLqt/uAfpuPvwj1229Av83HPwD128tBv83HvxH1201Av83HH4P6bUfQb/Px
38S+j9bQ98H1vY7Y95EAfR8/9b3Y92ENfR9c3+uEfR+toe+D63udse+jHPo+
uL7XBfs+EqDvg+t7p2PfxxXo++D63mvY97EF+j64vncM9gHdhT4gPv6R2AcU
DX1AfPwmv/YBcb33KewDKoY+IK73NsI+oGroA+J67+PYB6QOfUBc790a+4C0
oQ+I672PYh9QQ+gD4npvC+wLK4a+MD7+OOwLC4G+MK7/7419YUXQF8bH/zf2
hXWDvjA+/pfYF+YOfWF8/CbYF3YB+sL4+JdgX9gX6Avj44/AvjB96Avj4x+O
/bZXcX8JR+wz9a9lGS7rOSZsbBn33bJUYN9Z8h7Zmcq6jZITpQdi55UL7HuK
0bB+z2R9xj/hz52PHa4U2HeTr9gX/Bb3o8jA/tbf3Z9qMqPi8jVVMcgs6c0V
eq35UhBibFv22/vxK1VOfAhRF7cWjdifSq8NTXLtbH0LfnvfJs5/qMFdTXFG
aOiEhvQ6NiL+W2Lw19/eDzWxzB1yX0u09O7YYCi9qqz2dR7u+/63911bd207
fnahEHCv7byR7poi0wM3xf0xmuP+GAznS8/nXG57kPrl9AOfZZ040wm74Heu
MPjOJS5B/IvWn+qb/7BU+FS3/rRnN7RFph++gN+5HOA7l8jmpX+vpEiptFzY
YL7hnawrZ7riAvzOtQa+c3FdzcYMw/G721cJBp1Wd2pfoycyvbGAfe4PcZ8H
Nn5R9UYj+TvcSd/7HWUdEFsnVk7a2+XvbX/Nfv/42bxywsZz0tGilvxdzW5g
yRz/w5WE/a7jwQqfCbMLiZZ6AyNZT83085Nx34ZS3LfBnuG2p6jnHweLic3+
EX6yzprhdhb1SN1Bj8S/D1Zszf0q663Xtf9bQ9ZfM719CeqRFoIeiX8fHL4h
w/9+aTmRbknLZV02w80G9UivQY/Evw/+s/rjON/2VeR7wOridjV6EsPt/6t/
dgLiWRfwFBmeJxC3oYCbeBJx+4b4bAB8RIbPQMThPuDA18+2X99X3I3vy/Tw
s0APL7D1/z0c9PCDQA/P+yAG4rp6ivsnsHWlgjr5lqCTF9g6F3C9nYb1xv1S
LdTPl4J+nvdNiLgOvWEdcn/FdPUvQFfP+ylO4Pp0hPXJ/dhotOtzYNd8fe5D
+7UF++Xr8B3a6VewU77e2qI9bgV75OtqFtqdIdgdXz+R2FcyDvpKeH9BE+wr
KYO+Et5fwPYLisH9Exiec7Hf5Cj0m/C+Az/084vBzxPmZ+5iH8oQ6EPh/QgZ
6P+bnfzh/7ld18H+lGzoT+F9Cq0wLtyHuMDt3Ri/V77v/uN7JddHeeH38Rbw
fRz1V/pireHwfXkUfF/merZM/I6sAt+RuW6tBHUaF0GnwfWid1GPMQ/0GEI2
6jHW4nkfWXDeBz/HzRv1D5agfxB3ov5hC+oc3oPOQWyCOodK1H1NBd0XYe+V
hTpDJ9AZ8u/+OqjTswWdHv9uXg/1eJNBj8e/j+ejDrYb6GC5/qQQda0i6Fq5
zuQl6kVF0Ity/UYo6kLXgC6U6zS+p33/VBhVLNjvb7/Ss+5HweKH3kBbvHtU
NdrMNF/QTyrdYU6voA+vJ5727HtvSf1K4Xhsopb+3HTh7jK1C+4OWmKhv+mm
qtt1xVpeXbMbG5cIGa3yF/vSa+O4oFFDb6qJ/nv8eg+j161/52mGuBcLQ2fa
Ft+ZqiOe3lv3xpcJZUKVQ7ZBiHuesM1kTNGKUA1xmZ1q8Up6FTe9HhPi/k0Y
ZXg9KFxFTxwa+GlVyPoKoYNF7KwQ989C3IW/F2sFlgh+ZfFGOdPriaa53w4n
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
xy6AH+PxQh35swHwZz7OtxhfwiC+cL/3PwugJQI=
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[2], EdgeForm[
       None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJxFnHkYF+PXxuc7+0QJhZLIVvalpEIhWSskWyplzVqEFCKFSCGihFJpka2y
pCKlJLIVkrVECNlVkt770z2/6/1jrjlz5plntmc55z73eeqd173dlWEQBI9m
QRBpf1geBKfFQbBG8lGVIDhQ2zmS50ifahul45tU9vk0CA6Sfr50VbWNk763
9FOlP0D6BdJtpW289I/pBntp3176K4sgeF1ljuKe0jeQ/jTJY3XPn5MgqK/j
j3TdLtpelHyRHmqR5EtV9kPtd9b2gvRLtK+r7XnJb2hfTdsTki9WPZ+onn9U
Zz0dV9d2hORndc/LMz/zDdpP0/GBktvpeT7XtX1U/xfa76lttq55WucvUbn9
VeYZyZdlLv+U5Eszv+P5utdS3Wud5Laq51Nde73q+UH7C1SmgfTfSz5Pcn3J
30nuInlPyaNUbm/d53TJE1XP76pnH55f7/uOyl2m8/N1vFLnq/PdpJ+n468l
76byd6nMKToeJnm1rq0jea2ebYXqf0hl3pb+VpU5TvrLdP7Y1O81hJ+sc1tr
t4/K/qPnruj4EpVppTKv8D21rQpc5nGVT3R+F8m9Ij/HN5Ifku5HXbOTyo6Q
/JPknSXfL/kHyTtKfkryn5L3k/yk5D8k7yv5Gcl/ST5AcjfV966e83K973va
76DtWekf1rPN1fMcqXuNkDxHcgvuK/k1yc2RdU1tlT1W8oOSa0luJXmI6v9G
9W/P95F+B+2Pkf4g7XfR1lryKXrvz3Sv3jrfV+WXq/wWOverdFfpHo1V5hfJ
PSQfIvlolb9Dx9ur/Mvar5P+QZU/Uvrbdbyd9Kv1XO9J30flp2j/no7bSv5E
9WeST1b5P7W/VdfcLf10Xfe3yg3j+aQbyPurnj9UZpn0g1Tmd8mfSL5Lcit9
qz4qU0VlXtL+L+kf0LU3SH5VcgvJr+heG/Quh0m+Wfp50h8j+XXp/0tcZrrk
vyUfKvlU3kHbpap/rsp+oft1or9L/lxyR8lX69k+kHyK5Cd07yYqf57k8ZKb
Sj5f8i2613xd00rHs1X/v6r/cMlzJG+UfITkfirzhsocK3mCrm2m/QW69k7p
F2X+Pher7DG61yzJf2n/p64frDI/SX5fZW6Q/IN01Xg2lblC1z6VuS1dzXjA
/5Lck3GC/yi5pb7b9TrOdc912i+Rvh/9UfVUVT3nqMxV0k+TvpHk3yRfLflQ
lVkv+UPJt0p+UmUv1LfYTfJU6d7nn0p+TvK7kttIXqvyi3V8i+SvVX8u/Zmq
82ftP5D+Run/lX47xhTpK6rvC+nvk/4/6bdnnKI96Jl7q66CwZkxSmXulXih
dI8xhvDtJD8ieQ/+geSRkneXvEZ13KRrbqINS+4rua/kH1X/Vvxf3lH7j1V+
oPS/Sl4q+U7Jm1TPZ5Lv4V76Fy11bqbKf6fnmKH959Kvog9I/kzy5NTzxe6S
J/FPdO2ukj9SmeEqM0vyx5JH0DYl/6VnyXWPo1X3Uukflv7VwN/yqsLf853U
//QkyTNV9z+J28rP9DXt6yZuj/wv2iT97LnYfe1blflW+kJlfpH8O2O45MaM
PSr3EO8uXUXbBNqeymwj+WXJX+p5Jun8Islb6hm3ln665CrMZZJfpF/r/Ght
8yR/ofITJb8t+STVf4jqn6DjoyQ3Sj1X/qHrQm0TVeZP5lhtk5hnVeYglRmp
Mo9ru1fbC9IfIf3B0j+i48Wp2/Op0m+hZ6gu+SXJS1K37XaSb1O5QPJk5uvM
7Yw2Rvt5MnQfPEHyVMmtJf+Quq9dojInSj9N+jaMAZn7GP0r1bc8NPccsEJy
Ubbh9yVHkk+UfHRWtjOVOV71TFE9J0n/vPZnaN9D+pZZ2f4C98FJocelGapn
feKxY37q9txSZfrreKOOR0i+VfK/kodLXqN/9KvK7Kdrfir8znUkD9B+k8o8
yZgg/S063kH68ar/t8Tz6+rCddXS8bzU/eXowDYI/QU7hHnmisJzzWzJ90t/
OP2l8DPVLu/1n849LP1i1R+nft8WOtdQ8qOS9+aekgdjN+n7PaDr35F8vd79
D3fjYJGOf9d+e20H6j7/ShmrvgXSfy/dNtrGqXwe2054QnIR237orvrbSa4p
eT9du4/u8YPkZpntNmy2YSp/isroMYID+GbS/8y9Es83zDUPqkz7eHOzCYZL
jmI/Tw+VOZOxSXId7CsVeEPyTthdkhdIPoOxPPUcvaP0O0k/n2tVzxzpnsPG
0DvtIv2b9Ef98+nSfSq5i65trmtf0vHf2n+d+f/uq/0GXRPq3mMit7960j8f
exxnDL9H5+up3ELp74/83jHXYjeprntU5lCd/0/lMp1oIrmprl2tMv/ofKZy
IxnPJX+T+T/eV3GbGS/5XT3nndgm9P0q+kaq5wLmc+nvkv5Z6dfpeGXm9rk1
9g79RecaSN5L8t2SM133nco8pjK55O8lj+LfS/5B8mj+i55vop6tp8rvqWsb
6NpBkt/RvQZie6rMV5KfRCd5f123r8r/KLk986rKP61zV0puq7pqSP+Avklr
yVIFTVW+mcr/JLkdtgDjqcqfwjgqeXLZlmnTjEV76boR2Kk6rqcyu+ncHWX/
o+8wTtIv6QuMY8cltu+x7d+s+BtvyzisekKVO0G6D3mW1GPOs6HHjJ4qs6O+
bTc9X3edryO5u+TevAM2VOY5gno/1zVv0R+kr5l5Htle5TtJPkPld5Lck3mW
fiJ5geRFkveWvJwxV89YV/I1zN3S7yH5ZcZ5+pLkjxgrJTeQ/Knktcxhkl9i
jJVcW/KFki+TvIPkiyRfIflwyQOZiyXvK3m15G0ZHyLPkcyPR0h/F3O6yjSX
PE7yE5JrSe4s+WzJu+m9ds881wxS26iFXcu/UJkv6Zi0a9X5tep8X4f7SL9K
+i0ZY6Rfgb0s/V26dgfpZ0veVWVGSx6j+neWfJ3kAdjukgdIHix5msr31vZu
bNujhuqarbrO1jd/UfurVU8HyS+F/l/HZraBsH9aZbafsJ1eYC7W1lTPM0X7
a7XNV53Pan9U5DF+quTrtL0h+ZnC8/sUyc9pf3Tkuf1pyd0Lj9lnMQfqvlcx
f+lef+teN9Pe8FMk95dcExs8s83QIHI/oY/sJXm55Hcl19P73o4Nw3eWPEby
OMkH6j4HadtJZU9mrFBdQ5gHJW+UfDtzGWOR5AGSu2GzhLblLsFOCf3ul1b8
zfgmJzCGq/xtfH/td8tsD+C7fqMyy+jveoZ/sEv1rfaX/LPk7RkzmNuxrXkX
7N/C/7q+5DaF/++T2g8obBs+VXieekRya+1naXsgtf+EH8WYUDuzDzlH116g
/Usqc19qnxI94wDfj3N8w9ekj3PPX7O1D3PbHnuozImFv+15etb78Yd1zZ7Y
ZYW/czXpB0l/uvQLQu/vK+f6T1LP97SFj1Pb+/zzpZInSt5K194t+QzpFur4
TO3v17VHljLj6o6Z32uu9K/mDKi2l95SmbOkfwCbp5RvxA6jHUseFrhPXBi5
X7yIb6XtmMRYApgCYyDnp0s/VM+xp+RPQ3+3+pI/C33fepIXS54auK0fmNpm
3UX6D6SfIn1n6XfNPF4NLMdxxv99VWZl6P+7n/77jypTE3tBcj09x7nUJ/lf
fA3sPsnbSt8a21Dy1pJPTDwvMT8xj9SNPCcxHzEvITOnbFAdWea5Y6P2eea5
bLfIdjb/+pTQbX8c/660/XpJ3oS9nLnO3fl3ob/bHpKXhR6XGPO3VZkZtHPp
l0g/LbAP/KHkmaWNEWe2x+7Qd60i+bnAYxvfnHpoj7S9Nom/Pf+greSX8Ym1
nSV5B8ZDbX+q3i+xocFKmBMr1u0jeTud377wuYXaX6973KZ+MV/ylZKvk9xI
++o6/kVlGkreSvIayUML9zH6162hz6/nmfUsqyV/Jblf6LJrsTcK90/65uPS
hZGxmnn0R+mv0b36S/+rtg0q86H0w6Ufia1Gv0k9ZiyRfhi2R+wxp4GOt1Vd
NXT+4tRjzNvS3ahzd6jMW5L7SL49th8YqexZqv8Q6bYufL+P9L1Owk+W/mPJ
bST/HdjX5TnPlDymvBbsZaD2P+p4ufQzQ98ff3CRrj0utZ36juQTJP8l+VPd
5xnahp7hSLXJ/yQ3wUaQfndt/6iO73R8Wmr8ZU3FusN07c+S1+PnS35a++Mr
Htt76bqvVP5cyT8yNmEDSL5e+uU67iL5mdB2BPPR6zr/pfSdeTY9x6bEuFY9
ld+18D1+0vE68Ajaic6fqvJVpNuArUNd0j8cWgYrG6br3sTfVLna2u+o7S++
S8X7fbEb8Ud4bskjtd8UGu/6t2L5ROl3xtYtfO/vdd/TU2NSI0JfCw6GL3J2
an/kV2zs1HjowXqvarr2Z5X7GJs9tS/GHLSn9FtHnl/q46NK3j33uMyYfJuO
vwezlHyadKnKPCo50n47xn+dS7ANJL8uOaa/MJaGtj/Xl77M7jreUvprsXvB
N1LP//cVHusZ5/Edq0a25fD/upY+4JTyWvyg6/HlQuMGvSW/ERqvwO7dq/D8
gME+OjWuOEO6wdrO1veoov0+/A/arPY1GStC+wETU/sCM6W/V1tXle9TcX3M
NVtIt1/hOaRqOb8zD2DTgp2Bm4EZLJLuKd5R5w8oPIdMxpcsbMvja+Bv42vP
CP29wZf2KN/9Oun3DD1uMma+HPr/gB3tWz7DjuW35ptfIf1D2P/aLlO9R5d6
5qa6+Jup3+Nk2qP0Y6VvG7qOMYH/H/8RjGj/8pkpd2Spv7+c+7Yv58G5pQx2
dDv+EWNnaTvtoWurl/53FtkHnyy5iIzLgWnmki8OjD+i7xZ4fuB9aZPY9eeW
tj2++zmp/XewyFhlzlb5saUM3rtdea+LAuMQ1A8WAXYNTgpGCka9gvYUGOPp
lBrn2UL781PbpOAYy1LXsdlmTT2OfJYa8+yAjRraN8Ev66F9v4pxrRW6tmFs
n2Wy6q+R+Fu1Cu3X4Hvybafkth/oR5MlXye5veRp2J88Q2g/EVx9ueo8OLZP
9JTq2y7xP8W2nKryN+FngaVoe1D6r1W+UWw/60mV3SbxvzsidJ+hv2S6bm5u
XKlF6HZB217DN4vtX+PLLazY9/+F+Tq330rbey63vXQ3fYY2G7jtPZO7L36u
eg6MbZNM0v2raxsqeSJ9L7EN3Dx0WfrsFyp/UGx7Y4LO54kx2PHap4mx6zG5
2yHtsXHo7843X8b/j/1t+Q5PqFx3/H/p94/9j7owD1Q85rfDXlCZa/Hf8T8q
xiGPC+2fPlzaNjNz44kfMffG/m6rJTeL7Rs+Tcyh9PFfBH9L3N+bhPazGQdO
VT2TVM81Om4aeg/GfoPq+FLlCx0fFHquxrYfI92G2H7HWMkbY/sFY3P3Nfrf
x8yrsb/bgaHncHyEPtJ9wbejrUYec3mXJ6SrJPY1TtLzfMVcL3lc7vGBcWKc
zm+K7VPgW+Nj4+MfobJT1O4bcq3OD43sdx+OnSX9waUNc21k/By7ZTv87cR+
YnXJJyf2td/KjXXiT72dG2vAryR+Nbm0E66LHA+6Wfvu2MGSH8HWxufgW2ED
a78T7y75fcl1AvvJ1yTW15VuK237Bba7auJLJ/Z5t5Z8amI7mfgb/gu4KzFF
4om/MD7FxqCuCq0DU+oZGiPA3ga/3Ur1tEqMkc7TNpZ5Vtc2j41ZvYI9k9hG
fQ1bJbGdj39N/Aef6Hfacmx/HMxhYW5s9zfpW8SlT6f3viXz978wtO1LnQdg
k+OvSK6GbcB78990n0sT2/9XMTdUHIMDO3tV22Lpa+k+9XPjyTdFxtFe07m+
ka+ZK/m42HE75s0TaGuRcULwvrcqxusa4XuFjmGdFRvXA9O7MbY9hC0EbgLG
R/lDdH4o87f0x0p/hfRM0cQKL09sHzKWLCvHEzCLXoll8P7rEmP+PWLHCHeR
/BJ4kb5PI8mJrvuk4jJXlbge83hj5i7mVJ07hz6h4x2wr/D5UuOl4O2vaxsj
Oda2tOKYy9UqPzZyfIFvvKTi7/wCvlNiDPyC0Bgnfgp4O3EyYmSMMxvAf6Wf
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
            "]], 
           Polygon3DBox[CompressedData["
1:eJwtnHngFtMbxWfmnfVNm1SINmmRQkoqWm3JLmtop5DsW3aSrJWokAjFz1JC
ZImyZC9kT4VUVIqSNX7n03n/mO97z9w7832XmXuf55zzTKMBw485JwqCoE0S
BLFegzwIDi6C4EvtvDcMggbCi7WdL/yOurfXoPUae79wb+HbNPZFbRtKQbBA
+MYsCBqVg2Clxmyv419Og2CR+n8SnqRj6utcn2g7T+23Nb6uzvez+iYLHytc
S31tdHx7Hfeojr9B52so/IPG1BW+SXg/4VXCOwi/pHELdf4fhSfqHHOFPxZe
K3yv8HvCXwhvEp4qXFPn30vH76P903V8b/3/d9R3hfp06qARX4L6nhQ+T81l
Gj9Xx7+rMVdq30i1H9c2U/hB9R+u9hHaLlXfQg7V+Hna+go/K7xCJ32M71T4
HuHNwi8IHy/8uHB1tRdoGyz8kvAM/e/Xdb7z9T4aCzfWa6h9T6n/fOEn1J6n
/nO1v6HwrWrP0bZe3/9bwr/p/M/rfMdp/P+En9L4+eo/T+MbCf+h/jnqP0H9
Twj/KDxD+HDhB4Srqf2WtkHCLwrvpON+12d9RHiA8GqNf0r9hwlP4XpQe6G2
YcKvCx+t/3WMtsuFPxJ+Rf//I+E1Osc92rdKxz+p8b3Uvl/9Y9T3krZf9f7f
F75J7dn8nsIvCL+v478U/k3HP6RjmurYb7SNUPtj9e+s9/eH+qYJDxSuqr43
tQ0UniP8lY7/Rsf/qzGPa9+Rah+l7TK1F6n/XfV/LryR31P7vhReIrxF+H/C
DXWuT7VdoPa7Gv+m+j9T/zr136d9nwh/LbxZ+GHhb4Xf03v6T/gJ4W/0eR/U
8V3UHqvjV6n9qsZ/ov6R2ve5PucQHbNdyf1f6PVM4dp6HSc8SuO7a3xP4cN0
vU7jVf2/6NjmfF/qP0D9h2r/4eqfrtcj1P+r+luov4X+/5/qP0j71mjfy+o/
We1Qr8er/zlehf9R38HCe2n8Fo0/RPvWat+NOn9XsMb10vmX6fUc9e1Y8vW/
VK9nC+9Q8vVzkI7fRvfXIO2rrn3vahugdhW9Xhj4ft1b59tXeF/hsr6HHbXv
Df2v24Xf0f5+wmW9XiC8Uq/nCzfQ60zhtZxHeBe9zhVep9eLhZvo9VXhjXq9
VLi5Xj/g/+n1ROFAr8fp5XW9niac6nWw8Ca9Xi7cQq8fCs/X6ynCiV4HCWd6
ryu11dO+N/Uen9T+o9TerHZ77i/hY4R/j/x5Ltbnb6DP/70+V3V9XxcI7yz8
rfA2oa/nTjpfVx13qMZfqP766v9O/VVDz1cd1d9F/T3VP5PvRvhCXVNthIdo
fD2N/0rj/+P3U//76h+t/m7Cbwh/KvyA8NHCgzV+R43/UuP/ET5NeAfhj4U3
CD/N59L4izV+b+Hh6t9J/V+rPws9n+6j/k56P53U/7Hwsxr7nLZ+wv00fn9d
I19rbFPhAcKdhZcIN+P+E26u89XUcWdU1oO2Ol8Hna8Dv7fwvsL7l3z9DVf7
SW3Xpd7H/NFOuKPaHdX/rF57a9/f+r4PEn5b7fbq369k/Kn+XzP9vxra3zf0
/d1B/Z3Vf4j6Q9YN5liubeH/9Dm2Z45kbhfeIlyXOVb4Bvp13GThkXr9hnVS
n+0+na8/86JwFf2/X4XbpF4zU+FfhHcXXiy8jfBG4b2FvxLeXcffI3y4jl+j
41sJ3yt8tPA64WZ6fy2YMzV2Kvev8G6sacIPCe8q3Jw1NfL911K4pfAnwg8L
t9X57tf5hup8fwvvLTxZeLDwn8Id9dqKa4S5gPVafc9pG6N9/fQZy3q/BxVu
c78VwgcK9xWeUfm8xAf9hZ8WXpJ7vh/Gb6Xv+6vc6+FZwi8Jf517vj1b+GXh
Tvr/rZlD9f9fYX3T+U7TZ+isfSu07weNO1ft+pX/x/d3iI4fIDyL+V24p/BA
4WeE6wn/wfWjY77X8TsK/871IPyd8AH6f13U/kHtrzT+d72fZeovtO857Vut
16XCmV6fEV6u8TnXuNrnanwDvbdduMeEJwtvK9xQ+B3hO4VrCDcQfjvyfP2i
2m10vvYlzw+52qu07aT9b2nMSp2/qtovRJ4P6+j4xqwZwncJ/63+OsKvCV8v
vJ36Gwm/KzxeeLbaH+h8t2hcd9ZjvVbTvjnqv4jrVZ/vW/Vvq32vaF+X2LHO
N8RC6j9QuKvwSuGvK9/nJo1vyzqmff/qfd+r9g16XcL/V/9m9bdjXVR/19ix
2dLI6/U+wrsKfyj8FPFH7Hv9ZeGriSd17HfaamnfXO1bG/vefEntS9TdTrgJ
n4m5Vfgn4erCLwpfzP3Od6PjR2n/Xqw3ej8tyr5nh+l6Gss8qr5VnuKDq9Tf
S9/BD6Hny+uEjxReJdxW+Brhw4VXhp7vzuR6F/5eeA/hocIHCH8n3Fr4LK4/
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
nghHCjfKmoYeWRSObVhDyK23Kcx/kmOTe1cpzL+Sg5Obfppa/yNHRV9Es0Gr
YU2PcvPHcO/kHHCHcWG+Hw4RriEtrD/BOaA918nMb8Jz7imcZ+ar4a33EM4y
8+fw6OipcP5w/eQs5OJVC/O55OTklklhvYEc86nM+fkO8EehtWz4YuIh4qKW
apcLc/tobMyHDYT/iJzDNC58P6GF/Mlvpnajwu11oX9LNDi0N37TU5if1P8X
9w8xC3Nhbu4QzapJ4fsVbYcx7fV+di7ch671l/oO1vlqlMxZNys85zLXbqt9
/5AvZm7D2TYvPKczl9fiei48JzMX1xTeqfD9C/eIhtaw8P2OFsRn5Fo9NPOx
XLPk76fmfu9oUH31nqLK/YJGeGlmvq46vDLxaWY9iziX+HZYZv2MuJh4+IrM
fHJN4VrCJ+lcv7CmR9ZEL8/M79WAvwqdb/fJ/d12rLz/t7UtTTwHDdTxVVJ/
13zn/dUuVe53NM8+av+psdMja4qn8p0SU0TWIM8Q3i71/YYGPFTt2hX+Hw14
sNrbVPQCfoNZcBPE/+iQxNBc35m/WzSAeoXnO7jF34S76fc8VPuGqv/O1FzY
toX1YzixmoU1I7SiDZHn/naZ26wBNQprSGhH6yPr4Wg2aDWsUbUKrz/NA58T
bgG9iHycvPxp9bWGb4LPjJy/cH8/EFgz7qTxuxW+1tGVWxW+v6eqv17J+evu
hdtH6Pi9Ct9fDwf+DvYoPD+gjfE/umv8joU/OzlhbbV/ys19oonvUHg9g4vd
FNkP0Fyf56fIGtV36muTmTuAQ2AuQxMn1mVOw9+Apo6WjuZFPLV94XOR4+EH
acaaHFkD20efb7vC/xtdvpfaTTPnv2eW/Nvsmjn/5TfqqvPV4Z6InLPVJTbK
zb2yb4XabTP/FnDc1QtrkmiRP7Pmqr135jac+N76/7tk1r/QwQbk5uPv0/W9
C/Eq12fstQXOa2hu/XWa9u0W2u/zIjlAZP7putz+BuI44jf8AWnZcTjxN36F
rOw4lPgTf0JedlxOPI7fZ07JsTcxeEPht7ivhHuEvi/RCn4NfX9yH84U/iX0
/Yg2EJYdFxMP14nNlUNe8Xngr58R/j20/wi+elbJsTkxOvPEDOENoecLtI7/
CsepxKdw7ejbxPnE9w3UflPj66ndPbTfBK60VmQ+FC8P/DG8CnzKpko+cWJg
TvDXSv6A14I5htiEGOXh2Pw6sQ0xztTYfPre8O06/7GRc6D6wm+QI3FvCe8Y
W3upKtwmtPYTl53nkN/g13mt5N+GGBstKCk7biZevky4VHaeQ35zqXBUdp5D
fsO69IqO3yby+lQvtpZVjWsptE+G/OiEwBwocfPz6v8vdPwMjzJb+N/QfApc
NvzveyVz2uh/5BDkDujzcLVVy84zyS/hOaZr6xSZ72gL16S+3pFzRLjyQuPf
L5kzR5+dkTiXJKdEPyQnIRdhDUJvJQcn92YNQv9/RFu7yHzvxtjcdSvh04V/
ia0l7B45X4DLL+v/fVAyp48f6221GxF/hdZfyfnJ9VkTl8TmCOAGyJfQ6/GK
MXfBsbVR/3Idf0zknBh993Ft3SPrB+jPcARwAyeE9qMtKBnDGSyNzTnANZCf
nQk/VXYeSP6HnvyEth6R9QD8BE8nnnvhBNGv4Yq7RdYv8N88mphbgGPAT/CM
tqMjc474D2YlXmvgPHcmH9PWMzLnWE/tJ7UdEplTRBvdI3ZeTz6PPg4X3jUy
/wiX3yI2DwH/8FslvzspsOawuZIf9g8cQ8PDrmZdjczHwnOtEu4Xme9Cf14h
fFJkjgc9+fuSuUuuh7n6f9XK5jnhNzvE9pYNUPvO0Lzlz6w9kflLvG/Vy+Z9
4XvfF65RNg8N/8zaSk4xPPYai5/ip5K5YzhkvHzoVfDY8Nf4Hdawzqs9MfTa
Q051Vuw16APhmmXz4vDh5BrkHJfF1qv3j+3tG66+qaF9iMfF1pLI4cgVyRnh
0eHP0efx0pGb4p8ktyPHg7eHryc3JUeF14XPJTclR4W3h6/HL/BLyVw9nH3n
2N7OcyPzbZ/l9mvA6zOG3JQc9fjY+ijxAznksNh6JLkqOetJsfVIfG/wa3UD
56TorvA72wfOWd9LrJdpSt6aU5ErkzOjM6AvbKnwO2hZ+PPQQS+N7T0iByxr
Pv0+tldyduRYmRz0utgxM7EuOeoNsWPeFRX+pkfgHPbHCp9ycOAcj1yRnPGO
2Po5Ou3lsb1N5IjkjuSQt8XWx4llyWGviR3TrqnwNT0DazZ/J+arBgeOAT+t
5DBzYvtpyeXI6Z6P7YfFZwhfhfZLzr22wi/hHUPT+qnCLx0SWNPC1/JtbO8q
/pZ/KnwQ2uFjkX0Yf8TWtsgp49T8JF4UYlZyT3LQ92P7PZPUfCbeEnLONDXf
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
iPqmIer/XOf/P0+alv8=
            "]], Polygon3DBox[CompressedData["
1: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
OfHNLnY6RmPn/4q+/wO2Pq5B
            "]]},
          Annotation[#, "Charting`Private`Tag$876529#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {{}, {}, {}, 
      {GrayLevel[0.2], 
       Line3DBox[{911, 1096, 1025, 2554, 912, 1097, 1030, 930, 1137, 2498, 
        1035, 937, 1158, 2506, 1040, 944, 1179, 2516, 1045, 951, 1200, 1050, 
        958, 2481, 1221, 1055, 965, 1242, 1060, 2569, 972, 1263, 1065, 979, 
        1284, 2532, 1070, 986, 1305, 2538, 1075, 993, 1326, 2543, 1080, 1000, 
        1347, 1085, 1007, 2489, 1368, 1090, 1014}], 
       Line3DBox[{913, 1098, 1026, 2555, 914, 1099, 1031, 2558, 931, 1138, 
        2499, 1036, 938, 1159, 2507, 1041, 945, 2476, 1180, 1046, 952, 2478, 
        1201, 1051, 959, 2482, 1222, 1056, 966, 1243, 1061, 2570, 973, 1264, 
        1066, 2573, 980, 1285, 1071, 987, 1306, 2539, 1076, 994, 1327, 1081, 
        1001, 2486, 1348, 1086, 1008, 2490, 1369, 1091, 1015}], 
       Line3DBox[{915, 233, 2091, 456, 234, 2105, 471, 260, 2122, 485, 2123, 
        276, 499, 2147, 292, 513, 2161, 308, 527, 2175, 324, 541, 340, 2189, 
        555, 356, 2203, 569, 372, 2217, 583, 388, 597, 2231, 404, 611, 2245, 
        420, 625, 2259, 436, 1016}], 
       Line3DBox[{916, 1100, 1101, 2458, 1390, 1102, 1103, 2463, 1397, 1139, 
        2500, 1140, 1404, 1160, 2508, 1161, 1411, 2559, 1181, 1182, 1418, 
        2561, 1202, 1203, 1425, 2564, 1223, 1224, 1432, 1244, 1245, 2467, 
        1439, 1265, 1266, 2472, 1446, 1286, 1287, 1453, 1307, 2540, 1308, 
        1460, 1328, 1329, 1467, 2575, 1349, 1350, 1474, 2578, 1370, 1371, 
        1017}], Line3DBox[{917, 1104, 1105, 2459, 1391, 1106, 1107, 1398, 
        1141, 2501, 1142, 1405, 1162, 2509, 1163, 1412, 1183, 2517, 1184, 
        1419, 1204, 1205, 1426, 2565, 1225, 1226, 1433, 1246, 1247, 2468, 
        1440, 1267, 1268, 1447, 1288, 2533, 1289, 1454, 1309, 2541, 1310, 
        1461, 1330, 2544, 1331, 1468, 1351, 1352, 1475, 2579, 1372, 1373, 
        1018}], Line3DBox[{918, 1108, 1481, 2583, 1110, 1392, 1111, 1490, 
        2585, 1113, 1399, 1143, 1499, 2588, 1145, 1406, 1164, 2510, 1508, 
        1166, 1413, 1185, 2518, 1517, 1187, 1420, 1206, 2523, 1526, 1208, 
        1427, 1227, 1535, 1229, 1434, 1248, 1544, 1250, 1441, 1269, 1553, 
        2600, 1271, 1448, 1290, 1562, 2603, 1292, 1455, 1311, 1571, 1313, 
        1462, 1332, 2545, 1580, 1334, 1469, 1353, 2550, 1589, 1355, 1476, 
        1374, 1598, 1376, 1019}], 
       Line3DBox[{921, 1114, 1483, 1028, 2556, 922, 1115, 1492, 2496, 1033, 
        933, 1146, 1501, 2503, 1038, 940, 1167, 2593, 1510, 1043, 947, 1188, 
        2595, 1519, 1048, 954, 1209, 2597, 1528, 1053, 961, 2483, 1230, 1537, 
        1058, 968, 1251, 1546, 1063, 2571, 975, 1272, 1555, 2530, 1068, 982, 
        1293, 1564, 2535, 1073, 989, 1314, 1573, 1078, 996, 1335, 2608, 1582, 
        1083, 1003, 1356, 2610, 1591, 1088, 1010, 2491, 1377, 1600, 1093, 
        1021}], Line3DBox[{925, 1120, 1486, 1121, 2460, 1393, 1122, 1495, 
        1123, 2464, 1400, 1149, 1504, 1150, 2466, 1407, 1170, 2511, 1513, 
        1171, 1414, 2560, 1191, 1522, 1192, 1421, 2562, 1212, 1531, 1213, 
        1428, 2566, 1233, 1540, 1234, 1435, 1254, 1549, 1255, 2469, 1442, 
        1275, 1558, 1276, 2473, 1449, 1296, 1567, 1297, 2475, 1456, 1317, 
        1576, 1318, 1463, 2574, 1338, 1585, 1339, 1470, 2576, 1359, 1594, 
        1360, 1477, 2580, 1380, 1603, 1381, 1685}], 
       Line3DBox[{926, 1124, 1487, 1125, 2461, 1394, 1126, 1496, 1127, 2465, 
        1401, 1151, 1505, 2589, 1152, 1408, 1172, 2512, 1514, 1173, 1415, 
        1193, 2519, 1523, 1194, 1422, 2563, 1214, 1532, 1215, 1429, 2567, 
        1235, 1541, 1236, 1436, 1256, 1550, 1257, 2470, 1443, 1277, 1559, 
        1278, 2474, 1450, 1298, 1568, 2604, 1299, 1457, 1319, 1577, 1320, 
        1464, 1340, 2546, 1586, 1341, 1471, 2577, 1361, 1595, 1362, 1478, 
        2581, 1382, 1604, 1383, 1686}], 
       Line3DBox[{927, 1128, 1488, 1129, 2462, 1395, 1130, 1497, 2586, 1131, 
        1402, 1153, 1506, 2590, 1154, 1409, 1174, 2513, 1515, 1175, 1416, 
        1195, 2520, 1524, 1196, 1423, 1216, 2524, 1533, 1217, 1430, 2568, 
        1237, 1542, 1238, 1437, 1258, 1551, 1259, 2471, 1444, 1279, 1560, 
        2601, 1280, 1451, 1300, 1569, 2605, 1301, 1458, 1321, 1578, 1322, 
        1465, 1342, 2547, 1587, 1343, 1472, 1363, 2551, 1596, 1364, 1479, 
        2582, 1384, 1605, 1385, 1687}], 
       Line3DBox[{928, 1132, 1489, 2584, 1133, 1396, 1134, 1498, 2587, 1135, 
        1403, 1155, 1507, 2591, 1156, 1410, 1176, 2514, 1516, 1177, 1417, 
        1197, 2521, 1525, 1198, 1424, 1218, 2525, 1534, 1219, 1431, 1239, 
        2526, 1543, 1240, 1438, 1260, 1552, 2599, 1261, 1445, 1281, 1561, 
        2602, 1282, 1452, 1302, 1570, 2606, 1303, 1459, 1323, 1579, 1324, 
        1466, 1344, 2548, 1588, 1345, 1473, 1365, 2552, 1597, 1366, 1480, 
        1386, 2553, 1606, 1387, 1388}], 
       Line3DBox[{1013, 1089, 1367, 1006, 1084, 2549, 1346, 999, 1079, 2542, 
        1325, 992, 1074, 2537, 1304, 985, 1069, 2531, 1283, 978, 1064, 2528, 
        1262, 971, 1059, 1241, 964, 1054, 1220, 957, 1049, 2522, 1199, 950, 
        1044, 2515, 1178, 943, 1039, 2505, 1157, 936, 1034, 2497, 1136, 929, 
        1029, 2493, 1095, 910, 1024, 1094, 1389}], 
       Line3DBox[{1020, 1092, 1599, 2611, 1375, 1009, 1087, 1590, 2609, 1354, 
        1002, 1082, 1581, 2607, 1333, 995, 1077, 1572, 1312, 988, 1072, 2534, 
        1563, 1291, 981, 1067, 2529, 1554, 1270, 974, 1062, 2527, 1545, 1249, 
        967, 1057, 1536, 2598, 1228, 960, 1052, 1527, 2596, 1207, 953, 1047, 
        1518, 2594, 1186, 946, 1042, 1509, 2592, 1165, 939, 1037, 2502, 1500, 
        1144, 932, 1032, 2495, 1491, 1112, 920, 1027, 2494, 1482, 1109, 919}],
        Line3DBox[CompressedData["
1:eJwVzT0oBHAYx/HHa3nJZDVIWU3qlLxMFDqhKCc6iiKnKOqSJEkSssiVjU0W
pdhMlGKR7SZiMCiTgXxu+Pb7Pf/v0/OvT2cG5osiIo2/kohcecQxOpEuizgs
9MqIb25FX0YCfdxVRcSB/sktyUU0ocN+gt/T37gFmUEjGrzvyrz3OTmLD3fq
ZA23I1+4GdnizrSsxU9pxLZ84qq9T+mTqMIrtyXvuQk5jmI8et+U7fZvuZQ+
Wrjln2vuwr8b5htuRA7ji2uzf8qvmy+5ITmId66V2+fWzOdcv0zizq08n+VW
zWdcr2y23yOfuTEuq+e4X/vdehceuBR3oh/hH2RTNXs=
        "]], 
       Line3DBox[CompressedData["
1:eJwV0D8ohHEcx/GvDkXKZFVKWQ3yN4uNcuXqFOXkRFFOFEWXJEmSkEWRjYkM
rpTbbEqxyGYii0GZLLye4dP793tedc/dNeXnM4WKiMjbXyritDrixPpssiqi
XBNx5PzDVnXFuizNbtmh8xdb1iVrTZyV2L7zB1vUBWuxZranb54XtKc2Yk4b
rZ7t6iub1W42ow32Wxmxo89sWjvZlNbZO9vWB5bXCUvZk+c3vseW8z3L6Vjy
Wd5zx67ZpnuZjeqIfbNzdsk23EtsWLP2yXq994Cvu1+xjHZ4NpT8Jl5ka84X
LK3tbFBf2DgrJv8vG9A21q+PLMfOnI/tH7YTNes=
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1697, 1877, 2088, 1024, 1696, 1879, 2089, 2554, 1835, 1698, 
        1881, 2090, 2555, 1836, 1699, 1883, 2091, 1837, 1700, 2404, 2458, 
        2092, 1838, 1701, 2406, 2459, 2093, 1839, 2270, 2583, 1885, 2094, 
        2387, 2494, 2271, 1887, 2095, 2556, 1840, 2272, 1889, 2096, 2452, 
        2557, 1841, 2273, 1891, 2097, 2612, 2318, 1842, 2274, 2407, 2460, 
        2098, 2319, 1843, 2275, 2409, 2461, 2099, 2320, 1844, 2276, 2411, 
        2462, 2100, 2321, 1845, 2277, 2584, 1894, 2101, 1846, 1895}], 
       Line3DBox[{1703, 1878, 2102, 2388, 2493, 1702, 1880, 2103, 1030, 1704, 
        1882, 2104, 2558, 1847, 1705, 1884, 2105, 1848, 1706, 2405, 2463, 
        2106, 1849, 1707, 1107, 2107, 1850, 2278, 2585, 1886, 2108, 2389, 
        2495, 2279, 1888, 2109, 2390, 2496, 2280, 1890, 2110, 2613, 2322, 
        2323, 2281, 1892, 2111, 2614, 2324, 2325, 2282, 2408, 2464, 2112, 
        2326, 2327, 2283, 2410, 2465, 2113, 2328, 2329, 2284, 2586, 1893, 
        2114, 2330, 2331, 2285, 2587, 1896, 2115, 1851, 1909}], 
       Line3DBox[CompressedData["
1:eJwVzDlOAmAUReFn47QGQED3QKPSGGMIIYYYGWNBpzI4EPdh4QasQXQJioqr
YXDo+SxO7r3nHzKtXrm7EhFFDFcjztciDtYjKhsRrxhwF9whV7Xf8MRdckdc
zR5jxLW5Arcrn+13vqMXuT35wn1wXb3E7cupTGxG9PRjve78EzP9iivLhj3B
XL/mTuSD/YUEFvYNfypz/kpyKXzbbfmIqr4l0/jRk+7delPXM1wWv3qK7/NN
fZvbwd//W/6OP9Pz8h5LwHsm8g==
        "]], Line3DBox[CompressedData["
1:eJwNy0sug2EYhuHXRLEK3QLVEUORBpESERFpYgHtsFVnrVPrlEq6ENShqHEp
yopcgy/3+1x//uRGYTE/EBFz3vtgxE0iIjcU0dC/4YgOS+u1vc6v9Nd+4xN6
aa/xC+3brzyl5/Yqr+uP/cLHdWokosZWfDvTNh/jk/zUXuYn+syT7Ni9xI70
iY2yqjvLKvrt30d+6F5gB/rFHti+e57taY+12K57lu3ovf3Jt90ZtqV37IOV
3TNsU29Zl5Xc06yoTe8fhsgrrA==
        "]], Line3DBox[CompressedData["
1:eJwNy1s2gmEYBeDXTdQsZBBOaxlBV0ZQkYQOg2GhcowitUzBMVKuyGE0PBd7
7Xc///fP5qurlamIyMh7IqI3HVGeibjRv8mIMVvWXXuHX+sfe8SX9JW9zTv6
237ji7ptb/FIRdTsIV/QVelLybdLb175vL3i3YW9yVv6hc+xc3eRnekBS7NT
9wY70V/+febH7gI70hP2xJrudfZnV+SRNdgaq+sHu8x7kmeH7J592gfuHNvX
d+yD7bmzbFffyj/EkjAB
        "]], 
       Line3DBox[{1755, 1982, 2171, 1981, 2525, 1754, 837, 2170, 1980, 2524, 
        1753, 836, 2169, 2563, 2420, 1752, 835, 2168, 2562, 2419, 1751, 834, 
        2480, 2167, 1979, 1750, 833, 2479, 2166, 1978, 1749, 2597, 1977, 2165,
         1976, 1748, 2596, 1975, 2164, 1974, 2523, 1747, 1973, 2163, 1204, 
        1746, 1972, 2162, 2561, 2418, 1745, 1971, 2161, 1970, 1744, 2417, 
        2478, 2160, 1969, 1743, 1200, 2159, 1968, 1742, 2522, 1966, 2158, 
        1965, 1984}], 
       Line3DBox[{106, 538, 964, 107, 539, 965, 108, 540, 966, 109, 541, 110, 
        1432, 542, 111, 1433, 543, 112, 1434, 544, 967, 113, 545, 968, 114, 
        546, 969, 115, 547, 970, 116, 1435, 548, 117, 1436, 549, 118, 1437, 
        550, 119, 1438, 551, 120}], 
       Line3DBox[{1769, 1996, 2185, 1995, 2526, 1768, 2371, 2372, 2184, 2568, 
        2428, 1767, 2369, 2370, 2183, 2567, 2427, 1766, 2367, 2368, 2182, 
        2566, 2426, 1765, 2365, 2366, 2484, 2181, 1994, 1764, 2364, 2623, 
        2456, 2180, 1993, 1763, 2425, 2483, 2179, 1992, 1762, 2598, 1991, 
        2178, 1227, 1761, 1990, 2177, 2565, 2424, 1760, 1989, 2176, 2564, 
        2423, 1759, 1988, 2175, 1987, 1758, 2422, 2482, 2174, 1986, 1757, 
        2421, 2481, 2173, 1985, 1756, 1220, 2172, 1983, 1998}], 
       Line3DBox[{1771, 1997, 2186, 1059, 1770, 1999, 2187, 2569, 1856, 1772, 
        2000, 2188, 2570, 1857, 1773, 2001, 2189, 1858, 1774, 2429, 2467, 
        2190, 1859, 1775, 2430, 2468, 2191, 1860, 2294, 1250, 2192, 2396, 
        2527, 2295, 2002, 2193, 2571, 1861, 2296, 2003, 2194, 2454, 2572, 
        1862, 2297, 2004, 2195, 2616, 2341, 1863, 2298, 2431, 2469, 2196, 
        2342, 1864, 2299, 2432, 2470, 2197, 2343, 1865, 2300, 2433, 2471, 
        2198, 2344, 1866, 2301, 2599, 2005, 2199, 1867, 2015}], 
       Line3DBox[{1777, 2006, 2200, 2397, 2528, 1776, 2007, 2201, 1065, 1778, 
        2008, 2202, 2573, 1868, 1779, 2009, 2203, 1869, 1780, 2434, 2472, 
        2204, 1870, 1781, 1268, 2205, 1871, 2302, 2600, 2010, 2206, 2398, 
        2529, 2303, 2011, 2207, 2399, 2530, 2304, 2012, 2208, 2617, 788, 2305,
         2013, 2209, 2618, 789, 2306, 2435, 2473, 2210, 790, 2307, 2436, 2474,
         2211, 791, 2308, 2601, 2014, 2212, 792, 2309, 2602, 2016, 2213, 1872,
         2028}], 
       Line3DBox[{1783, 2017, 2214, 2400, 2531, 1782, 2018, 2215, 2401, 2532, 
        1784, 2019, 2216, 1071, 1785, 2020, 2217, 1873, 1786, 1287, 2218, 
        1874, 1787, 2533, 2021, 2219, 1875, 2310, 2603, 2022, 2220, 2402, 
        2534, 2311, 2023, 2221, 2403, 2535, 2312, 2024, 2222, 2455, 2536, 
        2345, 2313, 2025, 2223, 2619, 2346, 2347, 2314, 2437, 2475, 2224, 
        2348, 2349, 2315, 2604, 2026, 2225, 2350, 2351, 2316, 2605, 2027, 
        2226, 2352, 2353, 2317, 2606, 2029, 2227, 1876, 2030}], 
       Line3DBox[{401, 384, 2537, 1788, 386, 2538, 1789, 387, 2539, 1790, 388,
         1791, 2540, 389, 1792, 2541, 390, 716, 1571, 391, 1572, 717, 392, 
        1573, 718, 393, 1574, 719, 394, 1575, 720, 1576, 395, 721, 1577, 396, 
        722, 1578, 397, 723, 1579, 399, 414}], 
       Line3DBox[{1806, 2054, 2241, 2053, 2548, 1805, 2377, 2052, 2240, 2051, 
        2547, 1804, 2376, 2050, 2239, 2049, 2546, 1803, 2375, 2048, 2238, 
        2574, 2439, 1802, 2374, 2438, 2485, 2237, 2047, 1801, 2373, 2624, 
        2046, 2236, 2045, 1800, 2608, 2044, 2235, 2043, 1799, 2607, 2042, 
        2234, 2041, 2545, 1798, 2040, 2233, 2039, 2544, 1797, 2038, 2232, 
        1328, 1796, 2037, 2231, 2036, 1795, 1327, 2230, 2035, 1794, 2543, 
        2034, 2229, 2033, 1793, 2542, 2032, 2228, 2031, 2057}], 
       Line3DBox[{1820, 2072, 2255, 2071, 2552, 1819, 872, 2254, 2070, 2551, 
        1818, 871, 2253, 2577, 2443, 1817, 870, 2252, 2576, 2442, 1816, 869, 
        2488, 2251, 2069, 1815, 868, 2487, 2250, 2068, 1814, 2610, 2067, 2249,
         2066, 1813, 2609, 2065, 2248, 2064, 2550, 1812, 2063, 2247, 1351, 
        1811, 2062, 2246, 2575, 2441, 1810, 2061, 2245, 2060, 1809, 2440, 
        2486, 2244, 2059, 1808, 1347, 2243, 2058, 1807, 2549, 2056, 2242, 
        2055, 2074}], 
       Line3DBox[{1834, 2086, 2269, 2085, 2553, 1833, 2385, 2386, 2268, 2582, 
        2451, 1832, 2383, 2384, 2267, 2581, 2450, 1831, 2381, 2382, 2266, 
        2580, 2449, 1830, 2379, 2380, 2492, 2265, 2084, 1829, 2378, 2625, 
        2457, 2264, 2083, 1828, 2448, 2491, 2263, 2082, 1827, 2611, 2081, 
        2262, 1374, 1826, 2080, 2261, 2579, 2447, 1825, 2079, 2260, 2578, 
        2446, 1824, 2078, 2259, 2077, 1823, 2445, 2490, 2258, 2076, 1822, 
        2444, 2489, 2257, 2075, 1821, 1367, 2256, 2073, 2087}]}}},
    VertexNormals->CompressedData["
1:eJzVfXd4VcX2dhCpKiBwr2KhBwgiKAkJCHpEWuggAgmEFjoioEER4SrFSJN2
BRRULlxCU0GQmgSy6UXOCYYiEZRwKaEIgiJcAb389nGvNcl+ZT2z98nhe57P
f3h8WbyzZs3sKWvemVMhfuiLfe8JCQlpWDQkJL/5Z6t67/SbvyDbs+K9Vmvu
aTX7ufT61v+3BNwH+BeEewlnnpUO7ZFfwpFHspf80fEEyo+4jr9z7cHH/ht/
2jPw2TavLfn3QY8OjyF8kGA/gHCvgCMP2sc49Efi1/HcbX6pvvXeXtOsadT3
nn4tmnQ8uuo/Cq9LeH8BZ3uvwOPV2COu43eLRwXIj/VFHqyvLj6Mt02u8cu5
Sjs852c2PBhfPFvhbQg/R7hXsPeCPeLtCL8A/BJPO5f8Ek+w66Wz18Xz0xNz
Jv9YaYfRpXTMitz4Jw5xr0ser0M8VuCJdciD/uTVTyzXbdwWd3nsxWZR3xu1
Hrvvx+9y9XPGn9LgXpf2OjxJ4E9y6CfaS+XWCrL/Op4XxseE/hZ/2ii1u5Vn
ca5xu6EGL0m4V7CXcInfqT2Wi/67LTev9S0J9lI86U/jyLT8aQuufdQA8W8B
9wLu1fCw/WGw1/EcdliuW3/c1itQ/7HcRhT/B634G+nQLiU0OPYrxJFfZ484
9isdP/Yrid+tvVu8OPAvtY9Xyh5xtl+isa8JuGS/RLBfJtgvd+inDl8mlLvU
Pq7+pb6SvdNyV9rnU8W/AvB0wZ55viA8Bni+EOyRH3kkf2I0PFK5iLvlCdSe
8XD7+lbEvYD/6NC+tkMep/jFAPl19ZV4JDxCw494GO1fXrH2L1q8GuBeh/aD
NTySvVN+yX+pXOSX/MRyndoj/iLtx8dY+/G/4O9ocK9DHh3ulAfLbS/wIO4D
XOe/DtfxYNw4rxWxbJ8/v5SG+bpwwjEfxTjmx5za6/CIPPJgvSQep/y1NbiO
f1OH3vP8+8O5v+z79qI5rqj9Zv6f1vn3M+/uanfEnD8VvpnsPyZ75kkTcOTx
aXic2gfqJ9uP19hL/E79SQR7p/FBf+YB/8cB1lfyH/kle53/WN9A2wv92QS4
VC7bNynqXZxk7g8LfNamhbm+1rZLU7CXcK9LXMffjPCCDu2lcqX66vzUlatr
L8l+aJMq5viSmFaD/l8XH7Z/EuyHCDySPeI6frc8kj86P/OKYz/R+b93nC/T
v5+M6xofktse/eR6fQ32jO8jvBvh6YK9F/BuwCPhXgHHcn2aekn2bv1BXBdn
yX5XeLXy/vVi3UtnvU1zfS+Sn7vJvj7Zu8W9gNcTcOTZE+Ry3fI8o+HBOGO7
SzybD7ba4t8XjfH1eu5CrnlE8keyTyN8HOHpYD+WcB/YI24AD9qPg3IlfsT3
CTw6f3Q4+iPFWYoP46Mt3JDsMT5sj/7ocOQfBTjz/0Owl3gQRx6n/qD/TuuL
PGOF/on23F6RVntp67XHPl4ZOD5IeBTwI47fe6SGX/Jf4nHqv1s/EZfaC8vl
/s/zWldrvNKW67OPb65x713mcYvntVxd3HT+dF80d22udY7C0+3zr2qvnmT/
JNj3EHh6aOwZ92nsdeUij1QvyU+39hKeLrSjVK86tF4tbK1XRX7miST7ImTv
Ax7EIwV+LFfi92p4JH90PIyna+yxXshTFHCpn0jlzqL92mxrv6bso4R6zSb7
D8neLe4VynXK85GAzwF+p7hPEwedP8gvtaNkn0L5ik1WvkJbbirYY15Oh3s1
PG752X6zhifQcp3yYL/COLN9KthjnjZQPyUeST/ZifLY/V3qBlHXp9MHurVH
/aFTf3T2Op2nUz+leEr2kXQu09ehrk+nk9TpISWeYJcr6Q91/HnVebbNo34v
XcCRB/WNqGNkvL1LPaRT3aPE4xbXxe1jjT4Q9YSSfk/SDep0iXdLD+lWxxis
chcFWb+HesIlLu2d6gB1/mO56UK5busr2TP/8w71fj4BZx6nekWfBmf+0g71
fpK+UWfvVFcp6R4lfvp7UUeHOj0Jd8sj2QfKg/pAtneqP5Ts3frpVu/XSMDd
8jjVJbrlRx6dTjJY9WLcrZ5Q0g1KOOoDfQKuK1enA3RarlN9INo79VPSxUn6
N0kvp9MT6nSJ6I9ON6jzX9I9OrXX+b9S4HGqf2Nc0r85tdfxuNUNBqoPDDbO
5bKe7eUAdXHpYB+oXk6y92rsJZ2ezk+3/LpymT/Y+r1AedB+rEt+SZcYqN7P
qZ9oL+mUJL2QU3vEUUeEuNty1T5F0BFJuixJPyPplyT9ldtyGUedm1M9Eto7
1Qvdbf2SpJMZlkcdkU/DL9ljuToeSW+j06W41b241ec4tUc9AOO7NLqOQHGJ
X/IHeVDvIekfUF/h1dgHW3ch+TNGsA9UF4H2edVFSLoLnT7B6bm80/P9YOE6
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
5Solrq+pcFy1+zbS1TeBexn7CK8FeDjFJxni04XicwTiU5bi44H4zKT4HIT4
rKF6/QD1iqQ4tIQ48L64r7VvVfgi2hdXs/bFapx5nPbFW619sfreywKuxnnY
vyN/GPGz/8MoD7CJ8gCMv0p+DgQ/eT/+AOQfOA9QE/IAvE+PA54fSHd0ZYBd
15R1sHz5zOQzxuAPfljQtcheNc5vovsgnwjvf/YF/BGKz2WIT32KTwGIz3yK
TzzEJ4Hi0wjiM5jqNR7qtZfi0LKvFQfuDxyfcCs+an/H8f/S4lf7R87DxFp+
KnvGuwDO/WEz5E84z7Ma+DkPUxnyMOzn38FPe/5n/SaOM/fnfpCHYZ6JwMO6
r16g+2r285EHm7XINsaNLzIlulWaofYj1L494f4R94cPAW9A8bn5sD0+j1J8
zkN8uH2jID7cH7pDfLh9w632VfmTIRSHsRQHxnk87GuNAyovNInGkwvWeKL4
edw+a41LBo7niEv5K+Y/T/w8nnAerArlwRh/ivyMJz8x3/gQ5N/20bh3kPJg
XF/OQw4BnmGku3sBdH0D957sNH7YSePR6Idnb69+1ODv3UfjeQ24P7WD8BcA
5/H8IMSHx//1EB8ezzMg/uUpPs9CnrAu1asF1Yvru94+/iv8eZr3Q615X5Vb
2Z5nVvzf0DqkvbUOUfb7BVzKH0r8R4U8ZGPyszL5qfYp9vx2jk4S8pxcbl3i
CYP6NibdY1fQVS4+vKXinKzDxss9H11zZO8p9b1/R+u3GLh3toXw7oCfsa/f
cvK99vWewj0Uny0Qn0UUn34UH/4u4qhej0N8HqU49IQ4pNj3O+p7f5P2C5Os
/YLB+6mZ9n1ZTv8U8ORztv2dwpFf7U+FPPAe8JN5Fgjnxd0gz6zWb8STBjyt
BV1r1M3IBUnRSUbbYYXGmvs4I9c+bv2d3nc193Ff3QnvcMq2X1PlvmXf3yn8
Z/t+TbVvTfv+LudcgPZrqVCvdIrDSIjDdtrXr7T29TnfL+UHNlj5AcU/jvIM
haw8g7JnvCDgnD//DfLnyM/9ivPwDSkPz/gm8FONV8J7ICUojzEW8vCZ9nyO
wuE+V047Lit19lbrDM+G5Fe85j5OtXsY5Wfuh3uOjezvBij8ZYrP/RCfdIrP
rxCfDyk+myH+fSg+9SA+E6heX0G9qlIcRkIcdlIeL83K4+Wcg1D+cIqVP1Tl
vkp5yxgrb5kzPxLeGXA+v6gD5xcSP5+DlINzkO3kpwF+1qR83SA4f+lMecsH
4RxkH/GkAE9R0mP/ccGu0/5972P9zX2c50T2latrKxxX4/wMyg8vhPuhcwmf
AvhAis8giA+cLyg8iuKzEOJzi+JTEOKzguq1B+rVneJwc5s9DpzvbWLle3PG
Gcozn7XyzIq/L+W3Z1j5bWXP+EzA+fyoN5wfSfx8DlUOzqHYz+bg50t0TjES
zr/4fGQwnEMdJp5ngYfvq8aArr7gd7evHEk+40mPiarVvche1e7JdI5wRHhP
eAHgvSg+aRCfQhSfghQfnmcvUXwqPgjxp/gs6WGPTzrVqw/Ui/P8E+PscdD9
PppTfbLuHd28vpfrll/S6z4TJL2uTsfr1F56rzWv78EGG9fpeFFnG2zdr1M8
0PdLUfei43GKS3rgYP1uuE7f6/YdUdQPc57ErV4Xf+87UB6n9jodr06v65TH
Kb+E63S2qMtdLuBudcI6/TDyB/vdRUn32yWPut8Ilzpet/ZucUlvLOl4q7v8
nWIJd8rj1fij0+tKutxAf7c3UH7d765+4vB9POl3PN3a63D0R8Kld+0k/FOX
9rr39Jy+s+cWD9Y7e7rfCc2rvVse6b076f09p7/LqcOdlhso7vZdPun9Pbe4
29+pdMsjvafn9nchGW8Q4O9FOuV3yhPsd/l0v8/olOduve+n+/1BfN9Psnf6
O4Zo7xZH/mC/4+f09wr3uizXrb30zp70u2k6HN8DdPv7ehKPVK7kP74HKOGB
vu8n8d9te+ldPv59tKJ5xKXfZdPZB8rPuNP3/RifI9hLuNP3CXX+SPxu3xvU
/a4Z2uf1vcG88iPehPKudeGdQH6HZAjghSkf+6WVj1V6qhXr1g7y6+qmjLyY
9kfrDIU/TPn8a/BO4L2E30b8ayvP/42V51c8zbeXG+HXb30+t8mDB8y/Z3wa
nRN1h/cD4T0ZhT9I50frrfMjxbN55arYLmZ9RrddHZVp1o/xJ4T3Az+BdwIZ
z75hO5dUuqOEPr2qt2yVZiw/PDt/sxbZir+R/Vxb6d+6Et4B3vdbROfdg63z
bsVz4tvL5XZUP2p0K7IwdPywk6rcoaSXaAzvAb5BeA3AWUdRztJRKP6KhaO/
//N8vfTWqbOzDiuc32UaAu/+sT7njx52vCnpc6ZZ+hzl57ZGvkT/Oe6eOa+0
+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
     "]], {}},
  Axes->True,
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImagePadding->Automatic,
  ImageSize->{349.151796859653, 254.94036158014862`},
  ImageSizeRaw->Automatic,
  Method->{
   "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}},
  PlotRange->{{-4.9999996428571425`, 4.999999642856639}, {-4.999999642857016, 
   4.999999642857016}, {0., 4.9999996428571425`}},
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{3.226766162436702, -0.8779761660276411, 0.5168539298882473},
  ViewVertical->{0.39744848770751967`, 0.05554844105329737, 
   0.9159416304085942}]], "Output",
 CellChangeTimes->{{3.860507629775887*^9, 3.8605076642554693`*^9}},
 CellLabel->
  "Out[250]=",ExpressionUUID->"f511df19-d54d-4bea-b832-9b0928f46c13"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], ")"}], 
    RowBox[{"1", "/", "4"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.86087271199852*^9, 3.8608727699715137`*^9}},
 CellLabel->
  "In[448]:=",ExpressionUUID->"11ddcf8a-e2df-4695-960b-5c520618f802"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJx1nXmczfX+x2fmmLKNbZAsUVS6WjDWGp1PWq4l2Sqle7spWmgSkZC12yBS
JlnKErlRqUZlqIZzZO+GsoWRbFEZyxjGNszPPef9fH9/3zenf87jPH3mc97f
1/fz/Xzfn/fn/f507ZO9O/VIiIuLW5EYFxe4+Nn4k3I/FRUlh/m8o+yElkfv
TXThVmVqZdQpr3xt391pE0cVc5PWX7W7VUZp5Us/3XTXtM0BN79U8vC0nCuU
j35ozM2fNgy47yP9xCs/kjjv2Jx5Ce6LSPuCEHzyky69wZ0J7usIP6A8a9IT
s+aejXdxkf82Z8NvLV03fcC+ePdBtH3Qtv9PtH/lk6T/JVF7nLVnXtR+5aPE
/ozo9SpfIte7NKqP8jWij3x3Vk++oyt68p3PalPbfnJiQUB1hj/8VvXXgr8n
qM7w4Xt++TK+boLqDK/V6vZVca/Fq87wlZ1/qpAbF686wwf1/6H1wflxqjP8
9mE/NFz+VpzqbNujs+0fna096GztR2f4Q3K96Gz1QWerp95v0Y/xSTs4evKd
T8YPOsMn//2m7rurxavO8DdrHN32fuc41Rne5PYXh3TuVhREZ3i/sVsLzo2+
EERn+P6vKqVmpV4IojP8JWmPzvr8Sf/obO1BZ70+sR+d7fWiMxz90dnqic7o
xPOOznDuL38PR0++83l19VJdllSMU53hv4s+6AzvPXfV1KwphaozPOPKub1T
+59TneGLH6u2YXipc6ozfIK0R2d4mvSPznDuFzrDq4j96KzjSK4Xna0+6Gz1
RGf0YL5CZzjPFzrDGQ/0C0dPvvOZVKbNiad3nFOd4Q0H3HvDfZ+dUZ3hlf+Y
Xbeg1GnVGb6nesa5w71Oqc7wStIeneENpH90hpcSe9AZjv7obK8Xna0+6Gz1
RGeum/cROsOZ39AZzvOOznDGJ78HR0++81lmzMFjx5cUqM7wpq93mZfe7ITq
rHzMjry5NfNVZ32vSnt0hpeW/tEZXl/sQWc44x+d4Y3ketEZvkL0QWerJzpz
fcw/6Azn/YLOcOZPdIbzvKMznPGJHXD05Duf1SPP7zHVGZ4dmTcOqc7wKtIe
neEp0j86w5PFHnSGvyX2ozO8r1wvOlt90Nnqic5cB/4SOsN5v6MznOcLneHM
n+gM53lHZzjjE/vg6Ml3Pj/oWPYfR+/tcSc6wzOlPTrDG0r/6Az/VexBZ/hC
sR+d4XvletEZ3lz0QWerJzpjrx3PcDue4S+Z8QyfYMYzvJIZz+r/mvEMr2LG
MzzTjGft34xneAMznuEVzHiG2/EM72PGM3ygGc9WT3RWP8jMz3A7P+s6wMzP
8DQzP8MbmPkZXtrMz/AUMz/DG5r5Wfs38zOfJc38DL/VzM/wXmZ+VnvM/Ay3
87PVU9c58vvW34BbfwNu/Q34fuNvwEsZfwNe3/gb8GTjb8B/Nf4GvILxN+C3
Gn+DzxLG34DvNf4GfJzxN+A1jb9h9URnfmeU8Z/h1n9Wv974z/Aqxn+G7zf+
MzzN+M/wt4z/DF9o/GfbHp3hvYz/DN9r/GdrPzrb60Vn+DDjP1s90Vnvm1kP
wh8y60G4XQ/q+smsB+F2PQhvZNaD8L5mPQjfa9aD8D5mPQhPMetB+DizHrT2
853PhWY9CH/QrAetnhoPkr9bY+IbcBvfgD9k4htwG9+A2/gGfIWJb8BtfAPe
3MQ34ANNfMP2j87wmia+AR9m4hvwB018g8+qJr5h9TTxOhcjXudixOtcjHid
ixGvczHidS5GvM7FiNe5GPE6FyNe52LE61yMeJ2LEa9zMeJ1Vk9n9Vwa6X9r
iM/KkffygeCk6PcgvLRwvvPvpU17PhOEDxpY9nSrjAphPvudHTxoyzDv/sLn
LLx7wOzfizn57mK0d7Y99qyIXHdeaE1k3OapHfBVwmmv66zIvJ2r7fh3+tHn
S7htz+/Qvz530r5FxC/ap7/Lv8P5e/jNwr+N9q9/t1z6h/N335vfhdOPxtmE
9xD7+U5/3xt94MtN//CmkfnkmL2/Lsb9dTHur7bnO/fZtNe4uu3Hcuzk/qSK
nXzn3+Fcj67jhKMP+qGbsUftNONT+cbI368K8XlD5L2/Ozgy+j0IryKc7/x7
FdOez5LCsZu/Wx/xW3K0Hf8+U/i28uW612mdHOZz9BtNm67bV8zJd2c5/f4Q
0WlPqEbEz/xD7aR/fjcr2k5/v7S0px08hj0uhj3K9f0l47SnGc88r72Fa1xa
/h3O39Mf/TCesCvv+a4jx1RKVB34u2BkXbNfrxN9rpbr5Tt/V8Nw/o729Et7
+ofTvplwdKZ9OemH64TXl/Zw+vmbcNrRH/3QDl7a3Hf6q290gNM/9w9d0RN9
eW7gfOfvYrQPx2ivHHvQD90Yh9yHA5H11EG9Tv59m3AzHqw9ztpPP/QfXfcd
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
qy88lNCm3HHVZ4X87oXa/0id28yLz3wlv/v7tb8N/m6sF5+ZKb972+gO1UsO
9+IzK2S/NaVuesaMWz19msjz0VH8DfSpL/bih6DPd7KfTD/o81b0d4P8Lvp8
JPvnB8RO9MmW/fMiuS704fOZcT8snbL+cNDvt+8Jvpr7zj+/mebp87b87nDR
GX1mye82lfuCPgvld6fJfUSf92Q/nfuOPrNkv5txgj6Ho+MqyLhCn4a892Qc
os/A6LgNMm7966O8IOMcfYpHn4sgz4V/HZobbCR1Aeo3ij3bFp9M+KBnvurG
J88pumFPH3mu/XGSvGBY5gF0Kyb2vCnzBrq9Lfa8IvMMul0j+QLMS+jWLTqP
OeYxdIteb1GQeQ/dsJd5Et2ifkhhkHkV3bZH52Gty0C3qD1ngszb+l6IzvNB
5nneCx9LPK2RifvJPOx4j6BvCbGf9w5281lP3lP+9XthcIy819D5F7F/nbwH
0bmG2J8j70107i72855F5/uj72XHexmdj0bf426xvMc1ThJ97zve++iMvfgJ
6BxdLwQcfgU6ix/i8EPQObp+iXf4LX6/Pd7tMu9f8Svc7eIXobP4IW6S+FEa
JxH78buwm0/8NHTeKvbj16HzQLEfPxCdxe9y+I3o3CTqZzr8THSOjsNS7lnx
S9FZ/HDNqzd+u9skfq/uk4q9jH90Fr/a9Ra/Gp3FD3f44cafdFnGnxQ/2eHn
o7P41Y51ATpjP+sI1VfsZ92BznyyTkFn7Gddg87YzzoInWXd5Fg3obOss7Qu
AJ1lXelYl5l1qGMdp/v+0XWfY92HztiLX4HOsq50m2RdadZHzq6PsL+ErFvR
GftZ56Iz9l+QdTE6Fxf7WUej76diP+tu7OaTdTo6Y/9yWdej85XReIX7+sEr
F8x53YtHka9XSeID6PxxNJ7gGks8wcRPHPEHdL4/Gq9wSRKvQOfo81XeEd9A
Z+zFPzHr/Uvifti/WuIt6Iz9xGfQGftrSjzHxE8c8R90lniLI16EvhKfcQ0k
vqTraPl8TvwZo3MYnblO4kVfGX5M/q6vxLXoF/92u7z34Q3EDy8ufji6fSr7
403Me+209LNT+qF9tuwLL5M6UPrX/WXZv/bnb+wJDRU/DX5U/Nuh4t9qXFf8
2O2/jf8i8bpD2n6m+GNDpD38c+MHahxY+glK3j73faOxB/649I+/TT/ke94q
/Wh+lPCfxE7/fsqB4ELRh/ZJ4v/EGf1niV/RQPRHhxrSnnUT/ID4dVvMfbF1
BIyrXBkvxD8ZP0dicBlvzo434qsm/03zJIlXY4+tF+B+sW/eTPbrac++8AJf
fXem1HfvzW64LKPv/+q7/TzzEp4u96Wu3C84ebZbJE/e38/m7H4rz7/wv364
X6xHQhG/9y9tT57tR9KP7i/IeIvm23j2ax2qeV40r1zGDxwdCmW/nn7mSz+L
TT+3l46uH/+IrKf+VM468XuxH/6erF8OmPbT5HqXmuudIvbMN/eFdVyK0Zk8
3oOSL40+f5ffqRPxu44onyrr06jfnqv21JZ/ryLt4RNkfUd7fpd1d1Njz3G5
73vMfV8v7e8x7Zmv9oj9/C7j5H7JP6E9+dTbzfVqnUokX+JP5dyva2W9D2dc
bTDtq8r9qmnacx9rGb5f7vtiyd+GMx4WCmfeu1Oey8oTpq7Lb3pS83F5vslr
1XOvhPO8k5cJJ9+VPEI4++B6fopw8hDI04KTt8DzAydvhPsBJw+H58e2Jx/C
9q/11cYe9put/eyPwtl3Zj9P92tEN/TEbyKvGD3h7OuhJ5z9a/SEa16r6Akn
P0Hz54STP4OecPK+0BNOvhN6wsnnQU/bP3pae9ATTv4DetrrRU/4Kr9uzuqm
5xqJH+rfd05Wzj6pnnfEvoPsj+t5R8LJE9bzjoSTD6PnHRHXkfwcPe9IOHmD
6AwnL07POxJOPpiedySc/B8978jYo+cdCSe/Qs87Mter5x1dXjdndfPXCwc0
D99fXxzQvH1/HXFA88D9dcQBzbv21xEHNM/WX0ccCJPX6q8jDoTJw0RnOHmG
/jriQJj8On8dcSBM/pi/jjgQJt/JX0d8cR0p9vvriANh8jH8dcSX6OasbujM
Oon6CHSGs2+OznDyVdAZTt44OsPJc9a8YeHkCaMznLxWdIaTt4nOmtcp7dEZ
Tv4bOsPJ10JnOPlO6GyvV/MqhA/x6+asbuiMf0rdCjrr+kPyFvScPuHUQaAz
nLoAdIaTx67nfwknLxqddZ0k+ZnoDMd/Rmc4+ZzoDCf/EJ3h5Mtp/pZw8sfQ
GU4+EjrDG/h1c1Y3dMafIm8HneHkjaAznLoVdIZTZ4HOmrcu+YGapy6cPHY9
z0s461Z0huPvoTMc/xyd4eSLorPWhYg9mrcnnPw6dIaTP4bOMXRzVjf/OV2Z
ek4XHH/Q6k97ez4V7e19oT1xYDjtR5j7RXvqX+C0r2zuI+2p44BrnYG5v7Sn
HgFO+yxz32m/5LLniWXqetB/nlhm9oLLnieWqeeJ6TlK8rsLzHigPXmtcK0H
MuOE9uRnwmlvxw/t7blDtB9mxhXtiZvB1X4z3mKME2fHCeONdYadV+EzzLwK
t/Mq/GUzr8J7mXkVbudV+BGZJ7m/cDt/wu38CbfzJ7yfmT/hdv6E2/nT6oOe
xCmtPwC3/gDc+gNw6w/ArT8A32/8Aa23MP6A2mn8ATj1BZqvL9z6A3DrD8Cb
GH8A3s34A3DrD1jd/OM24Kx/C7f+re7jGf9W88WMfwu3/i28vfFv4RuNfwtv
Y/xb+M/Gv4W3M/4tvMD4t3Dr38KtfwvfYPxbqxs6E0e36zV4jlmvwe16Df6M
Wa/Bp5r1GvwVs16DJ5r1Gny1Wa/pfrhZr8Hteg0+2azXrP3obK8XnbUezqzX
rG7+eSPJ2fgDfLiJP8Bt/AFu4w/whib+ALfxB7iNP8Bt/AFu4w+az2LiD3Ab
f7D2++eNJM2H988bSc7GH6xuJm7miJuZ+JjWKZj4mIsRH3Mx4mMuRnzMzb58
fMzFiI+5GPExFyM+pnUuJj6mdRkmPqZ1BCY+pnnvej6XcPYXyDMmnka+MXmx
cPaFyeOE/yj78uQdwsmLIE8OTl7KNsnHgpPnkyv7LnDyfMhfgZPHQr4FnLwL
8gPg5AmwH6z9yL42+5datyr7MuQBEwdj35y8VTh5C9dKniKcfMspkocHJz9w
qcSv4eRBkZcDJz+HPBI4+STkPcDJf2CfG85+ve7LCmd/mbxV4lHkaeyUPEs4
+aLkEcLJb9R9EeHk75EvAv9Q8l7Ib9BzGiRPg/14eH/JK2D/WOszZB+cvFXi
POSvkmcJJ9/yM9mfgJNPKN81XsT6i3wRjYNJ3gj5DXDyHAb7zvsKaF0A+Z3E
ScjznCT7NBrnkfw68lHg5KWQP6FxHsmjYL8fzr4/8ylxA/IryAOAkw/A88C6
g7xE8vt1H0byMchH130VyYchfxpOPhL5vnDywchnhbM/Sx6n7sPI/hp5eHDy
8cgbg5M/Rp6T7hdJvhN5OXDyc5g34OSTMG/AyX+gzkHz8UVn8vLh5OeTRw4n
j4u8Zzh5dJNkPoFzvjH5rHD22cmTg5MvR14XnDx58pDgYyUfifkETv4M8wmc
fA/mE80blbw18rbh5A0yn8DJw1wu8wmcvFzmEzh5aMwn8G8kb4r5BE79C/MJ
nLwU5hP8avIeyZOGk0eaKfMJnDxh5g04+VrMG3Dyi8iDgW+WfJhXZd7A/zwm
ea0zZN6Akw9MfhKcPCXyaeAPS17NctmXZZ4g35j5Qf09ybchn8a+N42/ofuY
9M88Q34IeSrKZdxOl/1ay7+Q/WA4eSnkBxCvI7+FvBw4+Tnk2RBvId/Gf+5l
ZnbwsudeZmaTr0LeiZ6jIP3jB8I5H+Bfcl32Od0k+sCH+vJtWIfmBzmHIdGv
v+aTkLcEJ3/J7C+rH5jo93+0H//5k5nZlz9/MvOS8ye5Xn/ezt5L8kk+Nzo3
Fz3Tjc7kmfjPh8zMJj+E/X7uL3ka+CF6no3kXfjPgczMJl/lI/O7Kea+a7xa
8k/0/ych18u5Iowf+C+iw1TJJ9A8I7GTvBDNzxI71xt9yKMg/4D+l0t78hjg
e6V/8mzg5Nv4zw/MzCa/grwQ7CE/hLwQOPkh5JdoXo9w/7l/mdkHzbl/tOe8
kSwzrhrLuFpq7Nwl/fjPzcvUc/PID/PHdQ8FR5r2O6T9BOHMJ3WlXuZmnjfh
FSR/Q/PARIeyF7a0Sd2VFySfDB6tpzsWPHVbNI8f/lpkns/T+lKtY5B5lXoP
OPMwdQ5w/ArqUfGHmc+pq4Qz/78p9xHO++IVqU+AUzcx0Hd+bCDM+4j6Ujjv
L+oh4bzv/iPPEZz3I/UYcN6n1BvAef9ST4t/S10wda1w8nipw4TjD1A3CMd/
WCLPC5x6GepD4Pgn1D/AqUcjXx+O/0PdL+MKf4n6VTj+FfWWcPLDqQ+E479R
jwf/Uvw96jHg+JPUD8DxP8kXh5P3znuH8UydNXW2+p4VP5m6UDh+NXWMmmcn
fjh1g/Dm4rdTdwFnvUCdA5z1BXntcNYj5GHDySfXOlbhHX314Jfu31H/DGcf
cKLZvyMvnfpSOHWm1EPCqYukHgZOXQz1G/758BT9K6fuYKLZt8Ie8rn1/Sv2
My/hb7AeDMm8pH6L+CfMP1pfKOtN5h/dd5D1KXVrcNa51Eep/y/rYurq8YdZ
R1MfDmfdTT0znHU69Wlw6tSov4KHJD5AvRCcuiHmH61Hl/gDdelw6iCoo9Zz
GSW+Qd0vnDog6lQ1Li3rfero4NTTUScGJw6zTeYlOPVNzEtw4jzMS/j5nEvA
vAQnjsS8BCfuxLwEp36ZOls4ca0Z4tfBiYNR5wan3o26LDhxNuYxOHE55jE4
cTzmK5574oESP1ReXeKHEm9UTryR+Ur7kfhknuT3w4lnzhE/DU78s6b4D1r/
JPFS5j048VXqo+DUSUn8Vvkaid9KvFc5dSjkr9tzPLBf11MSV6GegXmDugbq
GfDrqGsgn55+yKufZeY38vPnm3UZ+djkN9M/ec5TjL/3qbTHT+K6CnO7rqyV
4tXRwFukr3ll/zivXknzcu8O9dpa4OVLwZve40YfftnL74GX3lU4/p3kS+po
wttv//Xnsxu9OhqbT6v75cK7fjDi0OxK3r4s/JHxTyzYM9DbR4S/8ePWZY3P
evte8AY/31jugbe95wH+YONQ90eaXFKnoPcdfdCvZ+DN5PKfePl58NLbm/Zd
ddarm4Nf0SqtTdcnvXou+I4/t6x8fJNXzwXvVvzzA3NTivT+wUfL/hQ6wJPG
1pozoadXnwVvcn7Xo5MDng5aX/7p2hde+tKLf6qd79yZkd/bq8/SfF3RR89T
pe5qUu7Svqe988Hgh+566tANo7w6QfiIh2fsr/CYVycIf+Opv69//q1CvV6b
p6r1+ML/NfGD4f9O8ur74FnZez64aodX36fnycn1cl1wxoP/nKJAuEfdI21m
3+7Vk8JH95r+xCffevWk8Od3jbxvyvwz3jpNOPmf/vOFLj3vAs51+c8XCoSb
yn3018UEdJxjJ9eRm3rN7nrHvfpijZ8HFo14e6A3v9j8SeyxcXXs0fi5jDfd
VxPO8xgrru6v988P8VzHiqvreo91/fX3TTnY2KtnhycvjRtb7R1vXQTvMjJ5
W7evvHp/rWMYs7/Tp6O9PEX4wno/brvhgFefpeekCte6SOHoyf2F95LxgJ7w
MTLONZ4o/Al53tEHzjyJDjZ+jg7w1RuHvZmT5tX1w7vcOHRLzR1eXb+e5/Te
9uMN63nnUur5IqNm/pg62KvT1zwlGVf+uub84Ch5LtT/Ez5cnneuV+sgZd7j
euG8LzQfWn6/bWqn78q84NXXww9OW/Xo+GZn1X4418X4h0+V+874hw8z57XC
mQe4Ljjzm7++9XyQeZ7rgvN+9OsfcFyXX/+A435hv3IZz7r+EW7PlYUzP/v1
DzjeU379A473O/bQ3xoZV9ij9dTy3GEPfJU5zxbOe5PfhaeKv+G/X0mO591/
v7w8Db/OSQ5/xvgVzp6Xy/N0XtrzvOn54vK7un9j4kv0w/OHv6R/L5zr1fPA
OS9LdKN/OM+vv84xoH6X/1y+gPob/nP5Avpe9p+PFwgzfvzn413kMt785+Nd
fH/J+NT6Ihm/zWQ8Yw+c8Y89cJ4XraMQzvOl875wnlPshPNcYyeceYBxDLf2
M66ZZ9RPEr5d5iXs1/1fmcewH44/wO/BD8s8qfmCwrHff/5Vfgj9eR7gdjzo
usO8F+D4jdgPx79Sf0I4fovWOQgfIe817IBnmfcj/NCGd1cO/X/vR7j/Pnr1
4oxDrhfOc+E/T2lfiHkgVjwKfXjuL39OeGaMc8IzY5wTnhnjnPBMPSccHXTd
d9nzwDNjnAeeGeM88MwY54FnxjgPPPOS88Cxy/pX2IWfhj5w/DqeR30/+vwc
79ws/AH/7wYcfqnfb7k43sWP9fstAYffy+/C8aP85wgFXLo8d37/JOCYT7AH
XfHzsQfOOgh74KwjND9GOHYyHmw8Cvvh+HvYD/f7Rd450H/JPMn16HmZMp/7
72OSY93qv49JjnWc//yiJMc6yO9fJel98ftXSe7y4yHJ4a/6x0OSY/70nzt0
0R55L/j9qyT1Q/z+VZL6CSZe4ViHmniF3l8Tr9BxaOIVjvFv4hXuUXlezDmo
jvnWxCUc7xETl3D4eyYu4TrIe9zEJRz+g4lLqD/DfIe9zMPYabnOR8Kp2/I/
X/m63vH7mR73+5kX53vph3Fo99P95y1kZtvf5XdqSpyKdnoOpex78p2/q2nq
8fm7dqYunvZthPv/Pw7Mt955d9hbUfYx/w/xMhjX
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJw9mgf8T9X/x+/5nHuJjIyEKKuyk5kGhTISJWSVUBFaaKBlhJQGSrSHUgkR
UbLS3nvvvdP8tf/P1+91fv/Hw3We93zuvd97zz3n9V63/sjT+51WyrKsTcwy
/mVN+a8KbV06ry2y7AHal/Isuwq+FX4a/pJj1nLM2/Bi+tfT/zJ8BbwEfhJe
Am+AX4Gvge+DX4AXwHfBz8Lz4WXwM3A/eBP8OrwIXg2/CC+E74afgy+HF8NP
wBfDM+DN8KXwXHg7fAk8B94Gf8V9PsB9vgtfRv+l9D8Kz4JnwlvgefBl8GPw
HHg2vBWeCU+HN8FfcJ11XOcdeDr9F9G/EZ4LXwI/As+Ap8EPw9PgC+GH4Ovh
h+DX4Knwt/AO+EL4fHgDfAF8HrwengKfC6+Dz4enwg/A58BnwWvgyfA58Fr4
J53Pvd3APQb696G/An3XwQ/Cr8LnwmfD98Nnw5Pg1fBZ8JnwffAk+Ax4FTwB
HgevgM+Ex8L3wqfDY+B74M16Vv7u74Hz6D+F/eX0nwaPhu+GL4IvgB+EJ8Kn
wyvhDN4b3hkeD4+El8GnwqPgu+Bx8Aj4TvgVnu0WTlvD/j/sN6QtT/sh/Svo
fwO+ib7L4ae4n426R/hzeCzXOYH9Ozjmftpb6X+f/nnwFHh98HV1/ffgdfDt
8IfwvfD1uj68Ar4BfhNeCd8IvwWvhW+DP4Cv5G/dwv5TWgu059H/IP1XlfyO
NsI3wJfBT8DXwrPgR+Cr4RnwFvh6+FL4cV0TPh9+CL4Ongs/Bi+Ap8Gb4Mvh
qfAG+EZ4Hvwk/Dvtf9guYltI/3TazfQvhRfAL8C3w/Ph5+Hb4Kvg5+CTeIbv
4TNpH47+u/r7G+E5mdegnvUm6QDHP0T/JZnX/iPwlZm1onfh8Xoe/oj+lRpD
+GN4lcYQfin6OtKHVSW/06+4ZjfOvTmN5/boe9M9Pgsvge/R/GC7Gn4p+Ngr
9HfhO+CF8Ivwcvg6+PXgc3Tua3A7tgZsv7C/M9csB5elfYZtcWbN+QS+T+9I
9wFfm1m7ri58r3qup+lflFnHrqFvJryVa90aPeb70/8mfGdmnazAue04rgac
w03hynCEm8CV4Ipwe3g3uAQ3hivCleAOcE24BnwYvKf0jeufmFkratLfnf76
8G7w4XA9uDK8P1wLrg4fAu8B14J7wA3gneB94Wpwi6SxbeHmSQ/bwM2S1rWG
68B94b3gMnALuApcGz4SbgiXhVvCVaUh3Gf3zGu8PP370b8rXA5uBVeHT4YH
aa3C1eDOcF14F7gjXBuuAh8M7w4PhdvCi6STXL9vZr0aTH8zzQ94GHyAbJr0
kGOOyqxvk+AjM2vaSRxzjLQAPgHuqfUPj4B7af3DI+EjtP7hE+F+8M3w0fDD
8CD4qMIadCx8DLwdHgy3SzboYLhtslkHwVXhTnAduH1hbeoED4CfgYfCx8Kv
wMOk29xz78wa26Hw+u8Mt0x2rR3cH34UHiLN5/g+mfV5Mnw0PJ7fXoZvzmxn
W3H8rJLnautkQw+Al8EvwB/Bd8LPwx/K5nDuwMz2Yin9T9H/Pnw7/CT8Hnwb
/ETJ9vdW+PGSbegt8GMl+w83w9tK1oGb4K0l68Na+CP4e/gu+EX4Y/hGeEvJ
mj+bexie2Va+DS/L7G+8A9+V2fa9C9+d2f6+Bd+R2Z+ZBR+f2YZu5ZrV2P8V
nkk7NLN9fJj+H/hbP8IX039cZhs6Ax6W2RZfCB+b2YbezfEvcfwnst30D8hs
7+6h/zX6P5VWSEdkAjV36e9D24j++vCxcBN4D7g/vLdsHXw83AzeEx4A7wM3
hifA+8L7Jb+lI9w0+Sf7wU3giXAreB/4ZLglvDd8EtwC3gs+EW4ON4CPg5vK
VsIfwt/Ba+AP4G/h1fD78DfwffB78NfwSvgt+Et4Ofw6/Bl8L/wG/Dk8Gh4s
ewm3Sb7TgfAYeIjsLrwCfhP+Aj4FHgovhRfRXsy4bQteZ8vhL+BLpY+0E3L7
htLnl9n/GB4Bf0Mb+e1F+B/4BK1JeGr0/PoArlPyetC6WBisAdKoucFj0wO+
LHitHw5fAveGD4VnBGuVNOSK4OfTWrsSrstWhm0H+/Vo92T7MfNceJV2F2ki
fX/Cf2R+Jz1p5wWP6ztwTdqLuOdd6Tsv93t4j/7aJb+f9+Hdac/Ofe3RtNOl
+xx/Ae203H//ZM3hkn2Gh4PHWzp5VfAYSw/nw8PSOCyAu8Id4CmyxdIGjVvy
Dc6Ab4z29bQWbgzWy07yN4L9RK2Xm+Aa0Tb2F/rG5L6HU2R36K/O7xVof85t
v2TH5Etqbd7MbwdpLsMTgzW+MTwuWI87w9OC/USttWuDfUnp0uJgX1Jrc0nw
2joQvjA9o97dzGAtPwSeDg+Hu8Gz4QO1buAJwXP5NbhKyTZkX/lFweuyKzwr
eN10gS+Gd+cZatBWip77r9NfteT11wu+PDgmeFBjEuynb4B/Do63FGvsCI6N
5DN8lHw/+S2vBsdS8qO+DtbLzfCfwXGSdO+T4BhLevhxsF5u0hwLjqvkd32T
fCFp46fBcZt8nleSPyyf59tgnX4UzkrW9SfAWLLePwnnJev6Y3AoORZUzPVj
sPY/rlNL9tvkY78bHBeuh38K1v4t8F/BPtZW+O/gWFO26Z1g+/McXL5kO/C8
/LWStfYFuAJt+bTWfmC/rd5BWndT5NPAZ0k/eR/N4d1od5avl9ZjTc1Bts8z
t//Qfsb2tuwS7a4la9ubcPWS9e9duFbJcbLi5cM4bwo8UbYAXsjf60o7X+tO
vgs8lfZUjhnFMbcHa5M06gvpZsm6dI36ab9iGyktK1m7KkpD2frBV3PMp3Al
+AT4kujrSPOknW/A1aTXtN9lXqvHy65Ic2hD8G/qV2wnG3qL4g6uc3pmeye7
MRi+IdhnrAMPl1+NJj8n3cztfzWQbgX7Lw2lM2nN1odPDPYx94LHwIfCe2vt
w+Vlb+FfS/bvGkm7gvWqjp4pt+ZovY+Xj557bG+J9nmbwKcG+7nN4NODNVA+
/Dm5/cS69I8I9pd3h4+DbygcuyrPIL+4Kf2nJT2XzkwKtslt4LOD/eLmGqtg
P7ctfA58FNwOPjfYz20NnxX8vjSH/wn217bB/8LPwhvh/8DN0/iMgjdzP7vw
TBfKL2WrRN/k3H5rPc0B9ielOay5/EPu5+rAOe9wzNNwWWmt5hjcjP4z4Je0
NmlH5Z5Pk9M8bMF1Lss9t+WHlCk573Iv/GWwz7gG/kF2iePqsV82+S3Sq1+D
fdKH4N/gv+S7sL8T7d/yIeBytH9ovcFlaH/X3IOL3Pb6QM6bR9so+LlkGzYw
DvOlF7l1QPrzXbDvvBr+PjjuLwsfBa8rvB6G584llKN/IP0lnv9raSN958H9
4Stz5x5Ogu8Izm2cAN8aHK9UhXsG+wBaR7cFx0DV4SODcyenwvcG5zPOgdcG
52PGw8vTO5UOdA/OqYyGlwXnVE6G7wzOu4yD7wnOOSle3g4PlF2BLwj26QbB
1wfH+Ip5n4VrBc8N6dtYjanegXy33PcsDVDO6Vx4XXDeaBK8Ojj2qgYfEew/
doTPD/YxZdPPk/0qbPMW585FnUX/Gq39YBv9U+Z3yL/s8OB3q3xhj+A5wmlZ
r+C5wKWy3sGxbAV4WHAsWxseCjfSfIH7wesLa9+I3Lmr8vQPCo53d4aHBM+p
MnCf4Fi5ovQMrsj2pfSTrTX9u9H2D86NnQavgKtGa+D3WqPsN0u6rxybtG4l
PCd6PigvNzL3/NH9KDEqn2Qpx6ziPt9l/6vcebuz6b8/OI6vBQ8Ojl93hfsG
x7U14KPhr6PtnWKieoXfd2O4b+F800D4N7baHLelcM5G/ttFyR7JPoXM9q1W
mgPyJeVTfpz5eeolW/Zjyb/vET1fmqfjpYv1ZTcy+23SfsU7ZdOY6DrnK56h
ba/4gmM6auyj9XgPtk8y+5Gyq7KnnYLvQ+d2SNepzXZAsM7oN2mb7FhF2kuj
bd+C3Psj0zqtlJ7ro8x2UcfUjLbh8qF3pOdtkZ5xVu7fNxXWj0bp3hrS7pWe
Ub6mdEX5nIK+atIqaWKwzy1/u2Xil+EQPbc/kY1Kc+vfzHZYg//fZwj+rbJ0
XLET5zxSOIfUKOnYDPnq9G8rfHzTNEf1d/T35OvrXvZl+zu93ybBPof6G7N9
mI7fJ93b6OTbT02a2SA9r/x8cYfc16uWzo3Jjn9X8pypm8ZW7e6Ju0TbUOWg
OkXbaOVevo+2Kco5HBZt+5Qv6hZtZ5V36hptN5Wb+iXaP5Hd+zXa7ihHocGU
3/g37WfRdlA5kIOjbb3yS59G20rp/ecay8z5isejc6p94Meic7ZHKgaMznMq
7/REdJ62L/xTtA+puLtFtNbJ7jwJL5W90PhEr03Zqe+ibZ9sWudon0Q5qKpp
zlWhPSjan1HO6oBoey2Nfz/a9im30zZa05Rvfy3aTvVXjBZt65ULGl44jrpO
vp98l8w57Tfg+zOv/dejbe6A3Llq2axF0sxov0v5wAOjfS3l1l5NOUn56e2i
fRvlBltFa47s737Reqg8eWu4JrwXx78YbeuPob9ltI2TfX8hOqbul7sWJE1T
fv65lD9RrPB8dF796Nz+h/wQ5S3zaK3SvJef9jPHzlbegq0LvCS3HemYbMlk
+iZw/Cr1RfstytFdwXZIsG8g31B+ws+0e3PMwcHrrWOySTq/lFi26ebovsu1
RgrHcsr5S5M6JI06uuTxn8P+4Gh/T37fmOgYUHmG0dFxpXIRJ0XHs8pXnBId
Myp2HB4dFytPeDzcPnMOcFB0zKjc4LFwy8z5w4HRMaPyh3UL+443wSfruTLn
OXWfbZJ+1kv6rHl4Fb91CfZhpMmdpQuan7SHBo/RRH6LtDNzx/yyHXPSeV2T
niq+/kk+UeHYpFuwDut9dEtjqLE8JI2tYiXdj+yI3ov+lsb239z2W3NJ+Qjl
JWbTtk/jrPtvFWwb/mcX2ieem3ueSK/kx34mX6HwtTQ/B6TzOifbUSHlB/S8
8m8Vkyne2j/a19J6bMO2DzxW957m+aJ0P63S3x2X26Z2lU3Prf2n5tZX6Wye
7E+ZpI3yw6X3c6Pnnsa6UfTvlZM9+jfZA/ker3IPr2gt6L1y3JnSH9rxuesR
+rvKuUyT3ShZp6X9skdyoj7Q9Uoee70DzWvlqqSrleSncP72dM+/lTyGWnPy
l1VneSY4n6LrK8dzUJoXWkN/lGzTK0fbyirJTskX2CXZyqbJ3smudY+OO+QH
9ky6p3iuTrQfIf+ib/SYS9N2LRzXaY1rrWstTOZaOxf2ya6h/6joOE7xXA94
z8x5eOVJ9gv2e8qkcSuXxlnx/P/21RbRPk7Z9E5lM2U7+ff/cbvmx07Rx+j4
BdE1PuVCK6f3q2s1TrZSfsGQwnNI9ynfoVwaE/k7OyU7q/hL5+ndLo6u66kO
onyT8k5N6OsTHQ+qnlIt+UzVo+MvzSnF5sdF55dUKxlVWI+kAwM0xzLXX/pH
56lUuzkiOq5UjaN3dEyqGsGR0XGoaiLyV7/iOg8Uri3/N+anHRadm1JuWTls
1fJ26PfoOE6275vovJPy9srRyX+qTzs0Opel2s110fVH1YCGJA2UZir/oLmv
Nay6gXRauq8ciLREWqN3ofdYN3rd6v3IvxoRnVNVfvuY6NhH9al+0bGJ6lnj
o/MhynuPjc5JSntHRefQ5D9LGzX22wv7XQ2TBo6LzpMojy1bI3+0IX1/R+dz
FPseDrfIXEuSLzch2ZDTonO8qkcviY4j9J3AmdFxmfLkU6JjLsWLI6NztsrJ
90o2Revl6OjYSnP+RPiIzLn9CdF5FeXeJ8JDMufkGyTbpvvUWmudxk35avmg
inPl97ZKeiv/QH6C3v0/HPdM5jy8Yn/pivRD+ccaaR72KlzPln3vWbgmKjve
pXDN+AjNt8J1bvkGPQrXVuU7dS9cT5WvdVjhmrH8sa6F6+694cML15Xlsx1a
uM7dC+5cuM7dAz6gcC28C9yxcG37UNn8wjXvnprbhev08qP6FK6vyy86qHCN
/LDcNX7V+v9k/+DCNdfD5SMVrnN3k79RuAZ/iDQ4Oh7XdwjzovMA+taiU+G6
Qnf4/mj9VMwte/pp0lLF2r9lzktcG50H0Dcnl0fH9fp+Q/l52T3lcJR7koZI
z66Jzg/oGxJ9p6H1t29hDdc1/ypZF6QPik+V21KOS9+fKD+2S7I7t0XH8vqm
Rfeke1Pe7Er6x2T+zmQhPDbzdyl3Reco9K3LCnhy5u9bVBeXPVLuQPPjr2R3
FHvKRij+k63UuD5Y2FbKf99Y+Hn0XKqTz4/OY+hbl6XRuQJ9A3NndFys73AG
Fc5PKV5WzfBZaTntuujvDfSOlsOzM9dDBxbOkSmvuDr6GwbNjZA736s61KPR
OWTlkldGf5OgOuma6PmgefVbdNyhWtum6Jy5cuc/RH+votrl2ui8it71tuhv
OTSHt0Z/46G18Ht07lp1q1XR32OoxqpEh3LRqoXtiM6rqzaq3MDb8G4l50e1
HnfSOGoeZJ7/90V/+6E5+Z/onLlqZNPSe1Qtr3l0Pkq5sn+jx021tunwKZlr
ecuia2Gqnf0Ynf9XbfTn6HhKsdgf0bl61dE2RH8joXm+Pvq7CK2XO6K/VVCd
9+7ob1FUjy7lzqur9vpA9LciWnd/Ruf8VeP7KzqGkpZuif5ORuv99ujvWFSL
1DdJ+u5F9ejN0d9gaI3/H2TjowQ=
            "]], Polygon3DBox[CompressedData["
1:eJwtmgW4HEUaRaerK0hwd0lwd7cEEoJLcIfg7u6Lu3uA4BLcPTjsLg6L2+KL
u8uew+3vY3h9pnr65XVX/XXv/affsF2H7lJ6vd69/K/yc8e211uOn5vCM/Tp
9QbBU8OLwuPBz3PSCPitptc7B16O8angRRgfF94BXhbeBO4P38v528HXcv7h
8NqMzwmvwPgU8EfwrfBj8NrwYHgaeDF4fPhqPr88fDyf3wnenPFF4bUZnxbe
A14J3gaeBd4CXgxeB54OvonPrwufz+f3gg9mfCvYP/pR+EP4FvhReC34Rs5f
Bz6P8/eEBzI+BbwQ42PD1zG+Gnwa47vBBzG+Jbwz43fCLzB+Jfwe4+fCazE+
BzyE8cnhpeFJ4fngvvCy8JTwwvA48DV8fgh8Ap/fGb4UXgo+DN4GvgoeDB8H
7whfBi8NHw5vC4+EV4VPhXeFt+T6S8Drcf1+8DB4cXhdeHp4CXgieG54dPh6
Pr86fDqf3x1ekvGJ4XkYHwO+gfE14DMY3wNenPEJ4bkYHw2+gvEB8BGMbw8v
xfgk8LyMjwn/m/FT4acZPw2+HF4G/ge8Hbwm588GD+b8Sbv7Pyu8ILwR/B/O
vwb+kPMvgBdkfCx4VsYLvD7j98E/Mb4mvADjfeFZGG/gudrM8+nh33zWNfPv
K85fjfE5Gee/3nSM/8rYQsDY8Gxwy/go+ET4QnggPA88Gtwf/oPz54fHhGd2
UTE+d/v3j14/+HefLTwPvDi8MQPvwtfDD8BD4Xnh0eEZ4D85f3bYS03L/36B
n4TPgq+CV+D8Z+Hh8PXwSvBXbf7+p+F14WfgC+Dr4BXh5+AL4RvgleHH4NPh
y+HB8APwCfBweAC8Eb/z3/Bo8DrwBvDD8J9N1stJPm+OC68TON6Q1yOM/9Vk
PT/B9c6Er+TzQ+C74aPhc+Fl4MfhM+Ar4OVdr/BB8CnwovCiXO8f3h+uNy/8
FHwO/CJ8OjyD85nj6Xj153hhXuMwPrv1jPEZ4SUZ+5H3+nJ8LZ9fxevz3i6M
n+j64nh8XkfVXG8x5zbn7M81Hue9/Tm+k/dO4vwNGZ8fXpWxKb0/8ALwavBU
3l/Ovxh+k/PPhl+Cr4Y/gM+HN+b8BeHVOX9q+EXGr4LfZ/w8+BbGD7G+ML44
fDN8sOsZXsz1CR8AnwQvDD8EnwxfDC8HP831zoVf4npnwBPBM1ofm6zfZ+Dz
4P/AZ8LrwffCP8JrwP243kIc/8B7k3J8HOMLwt9YYzh+kPdO4vgift+ynD8B
7/WHt2qy/m9k/ED4ZMYXgafxfjE2ur+f4wG8ZmF8AcY3ZHxC7zm8dZP6M5Tx
2eHlGZ8M3g1ewevDM8F3cf7Wzn/OP8T5BG8DXw0fCr/M+ZfBt5es53Fr9q9N
mqzfuxg/Cj6H8aXhV+DL4Tvg1eERnL8wfADnbwWPV7MfbdZkPo1Ts99t1KTe
HM/nh8Hj83OU9Ymfl8K3cb1Vu3//evCWJfV81zb70bCS/ew8rje941xvE/hc
eDrHm9SH7drU4w1L6uNwxueGd2d8c/gieF54T3gYvC/nbwpvX7I/7QdvBu9Q
Us/7cv5k8JpN6ss+jG8Cb1eyX+wFbwxvW7I+LqypV3tw/hbwYYyvLzM+K3w4
vIG/H54NvhM+Ej4bXgreH94c3rFkv7gDPgI+C14Svr3N+j4TXgI+0vnA7/rQ
a3L8Je9/wXHj8+PcbdvsvxuU7HcX1MynHRnfDH6H8evg+0vq/4pt7s8SJfd3
YvUM537Ae+Ny/Ik1lePK+A1+Hr4b/oFzroB35py14c0Z3wF+k/E74G8ZvxR+
Db4R/hy+GH4bvgv+Hr4cfh2+Cf4CHgF/DD8Bt1zvevhV+Ab4M8Yvgt+C74S/
gy+Dt26zn69fsv//BL/k+oXvgz/i/MfhAl8H/wjv5v7GeQ/BY9Xol/Wa7Edv
8/5IDu8rWe/bt9nPNyrZr+eDx4BnhP/isx/yesz7D4+03sB7wrdwvWPh9+AH
4N/gq+Fd2uinLUr0yfuMj4J/Z/waeOwavbNBk/34v/D98K/wVfAH1hj4D/ha
eMwavbR6k/31QK6/Fvw/rn8X42PU6ItVm+yvt7XRF6czfjfjX7apb091+5f1
qC/nfs17U3P8CJ/Z2/XKe8cz/qhrwvrhfgYfC8/XzZdDOL65Zj1fwHt7M747
11jR+sX1Z3Z/bKN/Vi5Zj7dw/kbWS87fx/lesz4vgfeHZyq510PdT3ndWrP+
LuZ4X9dLzfq9FD7A9VWjX6+ED4ZXalN/l+IaE1gvGP8ePrpkv1yV8ZngAfDE
7u+M7wRfz+ePhO+Dd4BHwv+A74d3hK+Dj4AfhveCb4WPgx+Ed4FvhI+GR8E7
wze4f6on4H2tp/CJ8Cpt9p9l+P0TwX+pg3y+vd7fQusNzr+dw284/xLGV26z
HyzNeRPCt9XUpxGM72d9g8fi+Fve24fjf/I6juPHeO8Uxr+An4HH4vO3wqu3
qefLwpvC//MzLgX4Rni0Gv27YhO99yWvZ+GxGb+N8T41+nZIE/21BtdbBF6u
pN6cw3uTd+tLfbp7Ta1yDW7N8We8nuJ4TM6/mfHRa/T0yk305+e8nob7Mn4L
42fB48ODGd8AXreNvl+xpN6v30Yvr1RSjzdr44+GluxXH/DzI/hP16xeqc3+
MkfJ9Z7k+sfCj3L9k+FLav6eA+Gt4U8471PrmS+OD2B8PL0AvBfHL/O6luOP
eG+49R0el+P33MNq/Jn+Za2S6/2uboUP4/UTx19xznMcj8Px7Yxv2sbPrAlv
CX/Gz8/gSbjmOIzdw/nbwtfAhzH+Qxv9+RLnrQcf0kYP7Fri19au8XNfNtl/
1RRqC9eIXkePtXMTj6H3UrOoXfr14mXcE90brTlq8TlL9mbvoffSGmQtsuao
/fW8uzTRLHphPeJOTTyL3sVn7LN2juk99NC7NvGEems94HZN1qjeUI2mVnMN
6L30TNs2WUN6Keegc3GCXryBNc/a55zSaziHncvOWb3MBG3m4pe8JuR4i5r7
W9rUz81qnrfP/Y4+vb/N0Vv8eKebj6P7b/DfpyYsqVfrqO2b7A9flTz7qZpc
X42l1lIj6Z3cc1wbrhG9kTXf2u+epDdTQ6ml3BP0cmostZaaTS3fB96iiQb7
mt/3F++9yfHb3XqyPk/G+Hi8/2Cf7OnWamv2VBzf30bvnl9SHx5tk19cWuI/
722jl88rWQ+/w6/Br3f14Wd+/mSp4nr3q5msWfBbvH8T44+00fuXwKfCv8Gv
wq91euJ0/n3LqSV4HdQn+t16dWKJn9iqRt98AR8IH92mnu5TUu+OhXeF9yup
/5PBU3KtBfQ8bfyN3kUPM7Pzz3rB8bze47Z7Zk00lXr+W3iOJprc/W/aNnvh
nN31buLnXE08lf5nmpJaZE3apMYvOe55j/TJ5/23eE2vfXyNf9BHPNwnnkxv
toxrovMT6q+JOn3iffH+LNskk5mF9ydu4sE8X/az/k3+bce02X/2Ldk/G673
NvxuV+9b+F34va6+PNAn98H7cTRjf5bsQZ7juaO6e+rff3w3h5xLh1qvav4G
/xbv3xE1muuPEk2kFhuN11iuM/UfP98vWROut+PgaTj/GMYGef/a3E9rdOnW
74yMn91E0+wEXwn/0kQTfd1mjo1Rsoc49+aBv/F3uD70bl2NdY7uUKN5nLOH
9zotBD/VRBM5V8+C32gyZ1/wfsI3N9F0P9TMSb2uHtO5emgbf7VbSX52j3O8
xHPe2kYTH9ukhquVL4Q/baJp/9smE/u0REOblR3UPXM1zPc1NcfaswV8AONH
cfxjiV/fvqZGWat6TbRf4b13vHa3P4/Fa3vnvhqD8Ung/eCF4NWsH228p5ph
zI7dy9SA+tHxuE517+9FUz9Rcy9/7vTjTjX7l/fYe725dc96yevDkrli/fkZ
/hW+vMneZY01E7T+Whv10GryddWoPtsmftP6qtd2/jiPTujmv3PWueu9+LCX
Nd63q4cflfz+8Wv0hnPha967v3uWZjHfeT9LMqWfm2RCZk167nW6eqwXNyMa
vSTjMTtaH54Ufh3+o029V5eO2dXv2qYW/tTt5+7Z+zfRWO7lq6ixmmRaz7fZ
z4f18vx8jmqwHZp4NrWZmkWvrQZRywyCX4cvgh9uoyHUJma+aouj2ujXvUv0
8RFt9OpeJfpaf6pe2L1Enw8q+bzXV7uZeZ7URLObhZrJHtIkEzWrNXM8qPt9
ZpFmEAc3yZTNJsxQT26SOZutqqn3bZLpqLXVrHs3yYjUsmbQJzbJMMym1eh7
wfP1ot3NsM16h3R/nxp5nyaZktrZjPzQJhmu2bmZ0dFNMnqzpJ34+y5r4rH1
2npytZL3wHuhfhnS6QH1jRnf2/AlvWR/asLBnZ5Q36gxzRb0/GrPjbr9e4pO
z+jxzfLN9PX+S5ZkD3psvbY9g7Pgob30EszkL2ySEZjVm+HonfRQZiN6puFN
MgW9lD2DM+E1e+klbFySNetR9apq3j2636cWXqUkax7Qi/cygzuqSQ/CbG5O
+O4mmdQ58OxdfTPTO8u9C36oSWZxZZtM6PkmmaVZkRnlC00yV7PLC0qyMzWF
2mIOxu/q6uUZ8FzWyCYZ5nnw3GqMJhneBfD88INNMpDLu3p+X5PM77saz2bW
af3Wy80Hj2qSkVzaJnM8Eh7YSxZpRvsyfH4v2a2Z3KtNMmGzOjPEfzbJ7MwW
zeQed6/rJaszU3yySaZt1mimqJc6rqv/ZrBPNMmEzWbNGF9rkiGbPS4IP9wk
U7saPqMk2z+123/MyF9pkkGbnS+kZmqSAV/bJiN6rkkGbHZkBvQMfFov2ZAZ
0bNNMmqzIz31nt362aB7/nt168374XpXf8/Wrd/v2/iNF0ryhPfb5BEPleQ1
37Xxe8+X5BO/wq/Ar5bkM9+28ZPPleQbv8Avw6+U5C3vtck/HizJb9xT3ftu
KtlrX2yTD91cujy4TR50S0n/7Ok2/YxrS/LYf7XJg68uybefapMfX1OS57qn
qg1Gley1P8P/gV8uyWfUDGqFZ0q0xKlt/PghJf5pj5r9wX3Cvf+UNnnHwSX5
6Ult/P6BJfnCyW3ykYNK8tZv2vjVZ0vymtPg/eBDS/p7n7fJ0/5Zkn990CbP
ebgk//q0TV71REl+9kkbLfV4if//oo0//1dJ/vZZm7zsyZI8zPzqnl76lfrP
t9rkdfeU9IPebJO/3V2St5txmW37GT+rJ9Qb3txLVntrSTbnM/HZ2KN4t0mG
bO/CHst/m2TE9l7sUbzTJOO1d2HGbO9Iz2n2/AbXm6TEQ+glzAjMJmft9h/3
fPd+e05mz2a8Zr3T99Ibsp7qR/t3+4OZpf6zX1dfzTTtbZlpmXWOLOmFOYec
S/Z0PmmSgdrr+XdJ1uE99d7ak7E3o4e292qPdbcmPVl7r2+0yR/vKulHvNYm
77yzpJ/5SEk25zP12doDshf0UC+9VDM2e0X/6iV7syf1cZPM0V6VPSizAzME
e1OXlfSSR/TizV4syQZcs65dPf648PO9eH/rywNdPbQ+mDGZNTkHR8KH1vgj
Nb3a3h7vbG0ySXu/akq15fddfXUOmuX6Nzs3nYNmUf7Nzk09rl7XzNxsdPIa
767n1/vrDyZpk2/ofZav2TusadY2PY66T/2n9zmI18JN/o2H1Xiomdr4N73V
Hl1+t0STfppz3izYOe1acE2ZLTvnXWuukR+6+e3z9RnZe7aG+OwmramF1kSz
CdfEB918ca34jO09WWN89tbEz7v1YK10zX7RrReft8//y26++7yn1A/2Moec
S2ak+u/+PqOa+fdjN1+dD5PVZCVmMGYxU9TMPTMRsxFrilmwNdVaox+bso2f
1+sfWJP96UGP6vyYul39votZEa9+TTIL88Gda8Z+83foxWu0uppeba9mtq9g
ZqeW1t+o4z1nxxp/p2/QP5g9bsNr2iYe1n7YIjXPfrLu7927pldmZnZA589+
MXvofl/l1adJBrpbjd8xV1BT2+/Q46iVzWQ2r+mvOhcG8jqF45NrepMDOp6h
RuuoCdQGjnuuPc8RbTyl3nOzEq/petBn67dP49wzeA1q4jn0Hv49Pjs9vPNZ
T6w3NuPbz7lf41XVeGq9U2uutWUv/s7reaynP7OmJn/YrXdr9SQ1Xs3My+zL
PdPeh3uke6keUO34cYk3XKJGW6jR1GoL1GgrNZ3abvEa7aamUlvNU6NN1cBq
4cVqtJYaSi3lejO78B7+XJMhmc26p/3V1e/ROj+k/zHDqV39NNuZl89s34sG
VgvPV6P91JRqy/lrtKaaUG04sEZ7qbHUWkvBx/SigdRCS9ZoITWUWmqhGi2o
ZlQ7Ll2j1dRkarNBNVpIjaRWGlyjndRIaiU9udmFc9i5PKBG26nh1HJmWn26
+uz+tGCNNlWzql2XrfH2aka14zI12k/NqHZUE9m7co9XK6mZfu/2A7WUmshe
lHu2Wmnhzp9OyjkH12QiZiNmXmZf5iXmzObN5sfmBfpm/fOwLq+x/r/QrZc5
+PzHvWTc5lF6YL3w/3htWpMBWKvnL8kGpqrRhmpEvdfwbv8Z2ekBNeEf3f7l
fqPGs5elRlT7XdTm3+7fYJ5vpjROtx+ZH5lBjN3tV2YT09ZkD3pCvaH72Z/d
fuv+ZSbh/B9YklVMV+Mt9Zx6z+lrvKieU+/ZH16yFw+oF+xX4wX1rHrXaWq8
p55R7zh1jXfUg+pFzcTshahxzcrUiPby1GBqRzNeew9qXLNfMyyziDGa5P3m
l2YJg7r1bI/Y7xbZg7V3/G1NPmkNtZbaA7IXZEZ3fvf8nY96HL2Oa8q19WZJ
1mAPyV6S1xjeJpP9+7tBnR7w+U7bSwZs9vFNjdfV85qXqh9cC64J/ezGNXPF
OaN2GFLj3fR0ejszBWvxiJKswZ6433XSX9ort0evH9ev60/t0fvdM/25vXt7
2PpR/al+W/+tX7VmWbvsufvdMHv29uInrsn2zfDN8u2p+90Te7r22u0x2mtU
o1/Tpp/iWjAzsd7aQ/W7XvZ47K2uWTN3ncNqKTOiydvU3BM6Pagf1G+pr1ar
0bJqVrXr6jVaVo2r1l2pxivq0fRqeg6/W2MmrhfRc/hdEv2uXsQeqb1SPcNV
6rma3+Xv1IvqYfTH+lH1qJ7H78KM6MULrcH5V/SiqdXW9pDtJes5LmuTwdub
0n+azQ+t0bJqSLWk+79ZmHv8tt1+61x1T3ZvNuO3Vloz9ef6dWuXNUx/rOf5
vkRjqbXMqMyabizJrtaqya7U0GrplWu8rp5ab71qjfY3QzFLsSdqb1SPdEWb
TMrerT1Lsyo9lL3arXvxVnoov7tipqq3Mg/9rmSNudZmqtmvzXjMeuzR2qu1
J3Bumx6X3030OyT2vuwJ2Bt2TdgrsGdr79aM7Ow2PQR7p/ac7S2sUvP36uH1
8nPDG/aS0ZjVmKHZq7YHbbZ2TE12rmZVu5qpmd+Y15gvzV4z910DZjdm3Na/
NUqy7zlrzvUzZj9z1WRBZj5mP/ov76X3VD+mB/W7POZXetNZa7I2MzuzO7+j
YN4zsJc8aDbGV+4lkzOb8zshfhfSHqnfFfE7E3530h6q36VYgfPP7iXTMduZ
uWatu+bN4uyB2ws3Uzy9Tf6ktlJjmUfp2fUrl/TiF/XUag01h15bD6w2UCPo
jf3Ojt9tHNDLd3nsWdj7t6dvL+PvGtYk/3Y/NGP3u6rmY2bvs9RklWaIZokz
1mR/ZlxmXf8Hw91gBg==
            "]], Polygon3DBox[CompressedData["
1:eJwt13fAT/UaAPDXyxtR3YooRFJkE+rKzMqWvQkZEbLdsjeZZWdmZu+9N9lk
b4VQUvdGufd2P997fn88fJ/P85zfOuc83/Nmatahevv4uLi4XSJB/C1JXFx2
0DhRXNwz8rcTx8X9xK6ytOISi5N/yb8QW6z78RwOTmadybqSY5/Qlkf9W/Y1
u8hmhPdha1kPtoy1Z0PYOvYZW8k6sxFsPevJVrEubCT7SkwR29UGquX2vk9a
v2pdRV9SfXnVn2O5WHmWkhVmT7M3WH32FCvIJooJYqtaf7WcXu8J64zW5RL9
/6vG5VJPavEKq5Ao+p1ys/vsOksvrrB4eYLIIC+rT0tcTv/8zK6xdOIySyRP
LjLL39eXjOXTl4JlYbVZcpaffS1miR1qQ9TyefOU1nmsK+t7QV9R9RdYPlaN
pWHFWSqWl1VlqVkxNllMEtvUBqjl8nrPWGezbqjvaX1vqT/PcrOKLBUrwqaz
iqw/K87qsqWsLfuaNWE92EbWm61h3dhotoZ1Z0tZOzaYLRTfiD1qn6sV9Fn2
Wo+w3q1vqL6l4XyzkuwfrEf4zvq+YqXYp/K39FXVd5DNYhfYeVFa3wI+X+xW
G65WgM22rmc9Rk9lx7ZQX826sSXsYzaIrWRd2CLWhg0M54LVYMNZWdaETWMV
WD9WjNVmq1hXtpi1ZQPYTFadDWNlWGM2lZVnfVlRVoc9xbKyuiwFK8BmsGps
KBsiXvY9lrA2bJa8sb7u+hazj9hM1oh1Y8tYBzaPfch6hd+ENWWTWE3WLpwL
1pxNYbVZh3D9sbpsNKvEWrLxYpzYrNZXLbvPssm6j/Vafd31jVGfxz5gE9kE
8Vo4H6wZmyyvpa+9vjlittipNlTtTX1zrOtbj9VXRV8r9bmsAfuCVWWt2XL2
CZvPWrDe7ACbwk6xSWwT288ms5NsItvMVrCObAFryfqwRaw1m8Easi5sA+vF
VrOubFT4buHziF1qw9Ty+8wLrVtZT9fXQF9X9dSsIKvH0rKS7Czbzv5kW9g1
9iJ7mzVi6Vlp1oTdYuNZDfaBPIdozAaH65t9rC87a8QGsVKsLcvKarFe7B3W
jL3BarPerDBrzrKxOqwPK8I+ZFlYTdaTFWJNWW7Wko1iFVlndoddZElFMrHc
b1CKjVY/qO8xayvPKT60HsHKq3V0bC7Wgo1kFVgnli92PfVPiPaWsMfkj83l
gQnR3Jocuxfej49mQZgJzdVqsTXsqnyO1zujryZbHWYzm81Osz7s2bAXhJnJ
+8rTiLf0NZCn01dKrRdLHXLrtOKhvEBsZg5KiPagsBdNYPlZG70fhfs1IZpX
78ZHefDG7M3YPjkgIdpvwr4zMbxm+I30ZPW+JVhe1plNY/VZ/3C/hfPOmrGM
rBDLwzqxqawe68cqsunsABvFdrBKbEZ8dD7CednJKrBpbD8bybazMUmiORDm
QTb5WHkxMVLfevaZ2jJeKLYPDU2I7tlw74a9OuzZn/LfxD/1vBO7l4clRPdJ
uF8esJ/Yz6KD/qGscOz+GZ4Qzekwr4uzUWyD9+2pbzkrEpvfnydEe0bYO4rG
9o0RbFGYfaI0G8e2OXaAY9eyEuGaZBtZL7aCvcvGsE2sN1vJBrLEYc8P14YY
kCR6/gnPQT/ovSl+Ye+JidY79Q5W26CnMpvDjrIv2V5Whc1lx9g4to+1Y7vD
MxT/j2gf5kPsWWaw7zE17CeiPJvK9jl2hPZtrCybwHawQWw9q8rmseNsPNvP
arCl7Bybzo6zcmwS2xX2D7aRvc/msxNhPrMDrBpbzM6wqewoq86WsLNsGjvG
fmcpwzNG4ug+mR7bf2fq+1Z+SIxJiPaAJvHRnhX2rjZsZjif1ln8/7p4pOe0
2KTvX3yD97jEv2Mbw/XE1rOL7BTbEK4zto5dYCfYOvaArWHn2Um2nv3K1rJz
sXl1iaURqcP+6rMcZyut7+lbpu+kvqNsObvDfgz7nr4zbBv7Q/5IVGfH2Ap2
V77UsScce4QtZN+zBewQO8QWsOtsHvuWHWbfsBtsfpiX7BzbwR6zrew6u8su
sxfDcw37L3uZFZe30vc6q8xeY1VYN1aANWSZWWXWleVnDcLvzaqy7qwga8Re
ZeXYJywXq8Uyhes83KcsJ6vJ0rGirAXLzCqyV1jZcB2zHKxGmJesEGvKMrCy
LAMrwVqH886qsIysDGvHsrPqLH2YO6xleF5gldhL7O+sSXjuYWXYPXaFvSQu
sr/YkCTRTJ8jXpQPln8vTuh5Ktyb+n7jDdkp+V+Jor97fo+d82Xx0XNjeH4c
7/zWYZvZLflifVf01WVb2G22hF0NexIrzDqxPOw9NinMQNaR5Wbl2EW2jyUS
e9jtxNF1tTU+us7C9TbN+15lh+Oj6yxcb/NYfbYnzB/5asfecmxttpZdY3PZ
WdaAHWIP2WZ2P7ZHvclqhmeusK94vXphDrH78lX6buq7wY6zFOII+5VdZgfk
icMsYnfZJbZfHi/2sjvsFjsrf16cZn+w2+ycPGWYJ+xP9iM7L08V5gl7zG6y
M/LnxHfsEfshzAT5s+IUe8ius2Py5OIwe8CusIPyJGE/Y/fYNXZU/qQ4xH5h
59lO+b99323sRuLodz4Se3YJzzC1/S4l2Vjrzfr66Fulrwwbz7azgWwdu8D2
xkdzPMzzH9n/ADIN+Ik=
            "]], 
           Polygon3DBox[{{1080, 646, 756, 1269, 929, 930}, {1223, 658, 460, 
            459, 761, 1130}, {1121, 745, 406, 407, 746, 1122}, {925, 924, 
            1266, 752, 753, 1267}}]},
          Annotation[#, "Charting`Private`Tag$993496#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0rkvZmEUB+D3szP2dcYI0VjjU0tM+0WMyMTEEkREREJBIRJaIbQSy19A
Q1SjEZ1pJrqxjGXGUol/QDOxPFcUv/uck7d4z7n3Vo9MdU3GQgiLUq+I6o8e
92xMDiGfLaxiG+Ps5ReOsYMzHOACJ7jKNZlT73KZB9zgEbd4yT0+8CenUkL4
z7i7j1nLFMlLCuFEn89TFvCMhfzDIp6zmBcs4SVLWSZX0T78y0/8x3Je8zNv
WMFbBrM8odm9d6xjajSH2X7rH50f8p4/eM5N/uI697nEHW7LrHqF45xnP6f5
laNsZTebmGAlh9z1wIZod9bwhcPMjc6Zw0Fms58f2Mcs9jCT39klGepvTGcn
09gR7cX2aLfou8beVg8JehUhpnl+/x9eAQRaONw=
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{811, 1117, 541, 810, 1273, 1029, 812, 1274, 1030, 813, 1275,
         1031, 814, 1276, 1032, 815, 1277, 1033, 816, 1278, 1034, 817, 1279, 
        549, 818, 1280, 1035, 819, 1281, 1036, 820, 1282, 1037, 821, 1283, 
        1038, 822, 1284, 1039, 823, 1264, 1285, 1040, 1118}], 
       Line3DBox[{825, 1173, 1369, 824, 556, 826, 1286, 1041, 827, 1287, 1042,
         828, 1288, 1043, 829, 1289, 1044, 830, 1290, 1045, 831, 1291, 1174, 
        1370, 832, 1175, 1371, 833, 1292, 1046, 834, 1293, 1047, 835, 1294, 
        1048, 836, 1295, 1049, 837, 1296, 1050, 838}], 
       Line3DBox[{840, 1176, 1372, 839, 1177, 1373, 841, 572, 842, 1297, 1051,
         843, 1298, 1052, 844, 1299, 1053, 845, 1300, 1054, 846, 1301, 1178, 
        1374, 847, 1179, 1375, 848, 580, 849, 1302, 1055, 850, 1303, 1056, 
        851, 1304, 1057, 852, 1305, 1058, 853}], 
       Line3DBox[{855, 1180, 1376, 854, 1181, 1377, 856, 1182, 1378, 857, 588,
         858, 1306, 1059, 859, 1307, 1060, 860, 1308, 1061, 861, 1309, 1183, 
        1379, 862, 1184, 1380, 863, 1185, 1381, 864, 1310, 1062, 865, 1311, 
        1063, 866, 1312, 1064, 867, 1313, 1065, 868}], 
       Line3DBox[{870, 1186, 1382, 869, 1187, 1383, 871, 1188, 1384, 872, 
        1189, 1385, 873, 604, 874, 1314, 1066, 875, 1315, 1067, 876, 1316, 
        1190, 1386, 877, 1191, 1387, 878, 1192, 1388, 879, 1193, 1389, 880, 
        1317, 1068, 881, 1318, 1069, 882, 1319, 1070, 883}], 
       Line3DBox[{885, 1194, 1390, 884, 1195, 1391, 886, 1196, 1392, 887, 
        1197, 1393, 888, 1198, 1394, 889, 620, 890, 1462, 1119, 1120, 891, 
        1464, 1121, 1122, 1463, 892, 1168, 1169, 1476, 893, 1199, 1395, 894, 
        1200, 1396, 895, 1201, 1397, 896, 1320, 1071, 897, 1321, 1072, 898}], 
       Line3DBox[{900, 1202, 1398, 899, 1203, 1399, 901, 1204, 1400, 902, 
        1205, 1401, 903, 1206, 1402, 904, 1265, 1403, 1124, 905, 739, 1123, 
        1145, 1144, 906, 1471, 1151, 1152, 1148, 1159, 1158, 1470, 907, 1171, 
        1172, 1170, 1404, 1268, 908, 1207, 1405, 909, 1208, 1406, 910, 1209, 
        1407, 911, 1210, 1408, 912, 1211, 1409, 913}], 
       Line3DBox[{917, 1322, 1073, 915, 1323, 1074, 919, 1324, 1075, 921, 
        1325, 1076, 923, 1326, 1077, 925, 1267, 1327, 1078, 1149, 1271, 1472, 
        1160, 1150, 1154, 1079, 1162, 1474, 1155, 1156, 1139, 645, 1129, 1128,
         1328, 1080, 930, 1329, 1081, 932, 1330, 1082, 934, 1331, 1083, 936, 
        1332, 1084, 938, 1333, 1085, 940}], 
       Line3DBox[{939, 1420, 1221, 937, 1419, 1220, 935, 1418, 1219, 933, 
        1417, 1218, 931, 1416, 1217, 929, 1269, 1415, 1138, 1163, 1165, 1167, 
        1166, 928, 1272, 1475, 1164, 1157, 1147, 1127, 1142, 1143, 774, 927, 
        1140, 1146, 1141, 1126, 1153, 1161, 1473, 1270, 926, 1125, 1137, 1469,
         1266, 924, 1414, 1216, 922, 1413, 1215, 920, 1412, 1214, 918, 1411, 
        1213, 914, 1410, 1212, 916}], 
       Line3DBox[{942, 1222, 1421, 941, 1334, 1086, 943, 1335, 1087, 944, 
        1336, 1088, 945, 1337, 1089, 946, 1338, 1090, 947, 1466, 1131, 1091, 
        1132, 1467, 1130, 1223, 1465, 948, 659, 949, 1339, 1092, 950, 1340, 
        1093, 951, 1341, 1094, 952, 1342, 1095, 953, 1343, 1096, 954}], 
       Line3DBox[{956, 1224, 1422, 955, 1225, 1423, 957, 667, 958, 1344, 1097,
         959, 1345, 1098, 960, 1346, 1099, 961, 1347, 1100, 962, 1348, 1226, 
        1424, 963, 1227, 1425, 964, 675, 965, 1349, 1101, 966, 1350, 1102, 
        967, 1351, 1103, 968, 1352, 1104, 969}], 
       Line3DBox[{971, 1228, 1426, 970, 1229, 1427, 972, 1230, 1428, 973, 683,
         974, 1353, 1105, 975, 1354, 1106, 976, 1355, 1107, 977, 1356, 1231, 
        1429, 978, 1232, 1430, 979, 1233, 1431, 980, 691, 981, 1357, 1108, 
        982, 1358, 1109, 983, 1359, 1110, 984}], 
       Line3DBox[{986, 1234, 1432, 985, 1235, 1433, 987, 1236, 1434, 988, 
        1237, 1435, 989, 1238, 1436, 990, 1360, 1111, 991, 1361, 1112, 992, 
        1362, 1239, 1437, 993, 1240, 1438, 994, 1241, 1439, 995, 1242, 1440, 
        996, 707, 997, 1363, 1113, 998, 1364, 1114, 999}], 
       Line3DBox[{1001, 1243, 1441, 1000, 1244, 1442, 1002, 1245, 1443, 1003, 
        1246, 1444, 1004, 1247, 1445, 1005, 715, 1006, 1365, 1115, 1007, 1366,
         1248, 1446, 1008, 1249, 1447, 1009, 1250, 1448, 1010, 1251, 1449, 
        1011, 1252, 1450, 1012, 723, 1013, 1367, 1116, 1014}], 
       Line3DBox[{1028, 1136, 766, 1027, 1461, 1263, 1026, 1460, 1262, 1025, 
        1459, 1261, 1024, 1458, 1260, 1023, 1457, 1259, 1022, 1456, 1258, 
        1368, 1021, 731, 1020, 1455, 1257, 1019, 1454, 1256, 1018, 1453, 1255,
         1017, 1452, 1254, 1016, 1451, 1253, 1015, 1468, 1134, 1133, 
        1135}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{326, 542, 1273, 327, 556, 355, 1373, 571, 370, 1377, 586, 
        385, 1383, 601, 400, 1391, 616, 415, 1399, 629, 428, 1411, 641, 1323, 
        440, 653, 1334, 453, 1423, 666, 468, 1427, 681, 483, 1433, 696, 498, 
        1442, 711, 513, 1451, 726, 528}], 
       Line3DBox[{328, 543, 1274, 329, 557, 1286, 356, 572, 371, 1378, 587, 
        386, 1384, 602, 401, 1392, 617, 416, 1400, 630, 429, 1412, 642, 1324, 
        441, 654, 1335, 454, 667, 469, 1428, 682, 484, 1434, 697, 499, 1443, 
        712, 514, 1452, 727, 529}], 
       Line3DBox[{330, 544, 1275, 331, 558, 1287, 357, 573, 1297, 372, 588, 
        387, 1385, 603, 402, 1393, 618, 417, 1401, 631, 430, 1413, 643, 1325, 
        442, 655, 1336, 455, 668, 1344, 470, 683, 485, 1435, 698, 500, 1444, 
        713, 515, 1453, 728, 530}], 
       Line3DBox[{332, 545, 1276, 333, 559, 1288, 358, 574, 1298, 373, 589, 
        1306, 388, 604, 403, 1394, 619, 418, 1402, 632, 431, 1414, 644, 1326, 
        443, 656, 1337, 456, 669, 1345, 471, 684, 1353, 486, 1436, 699, 501, 
        1445, 714, 516, 1454, 729, 531}], 
       Line3DBox[{334, 546, 1277, 335, 560, 1289, 359, 575, 1299, 374, 590, 
        1307, 389, 605, 1314, 404, 620, 419, 1403, 749, 750, 771, 1469, 752, 
        753, 1327, 444, 657, 1338, 457, 670, 1346, 472, 685, 1354, 487, 700, 
        1360, 502, 715, 517, 1455, 730, 532}], 
       Line3DBox[{336, 547, 1278, 337, 561, 1290, 360, 576, 1300, 375, 591, 
        1308, 390, 606, 1315, 405, 743, 1462, 744, 748, 739, 751, 786, 785, 
        800, 1473, 787, 788, 782, 795, 794, 1472, 783, 762, 1466, 763, 458, 
        671, 1347, 473, 686, 1355, 488, 701, 1361, 503, 716, 1365, 518, 731, 
        533}], Line3DBox[{338, 548, 1279, 340, 562, 1291, 361, 577, 1301, 376,
         592, 1309, 391, 607, 1316, 406, 745, 1464, 770, 747, 781, 784, 1471, 
        791, 799, 798, 754, 796, 797, 776, 773, 777, 774, 779, 775, 757, 790, 
        801, 1474, 789, 772, 759, 764, 1467, 761, 459, 672, 1348, 474, 687, 
        1356, 489, 702, 1362, 504, 717, 1366, 519, 732, 1368, 534}], 
       Line3DBox[{342, 550, 1280, 343, 1371, 564, 363, 1375, 579, 378, 1380, 
        594, 393, 1387, 609, 408, 809, 1476, 622, 421, 1404, 755, 634, 433, 
        1415, 756, 646, 1328, 446, 659, 461, 1425, 674, 476, 1430, 689, 491, 
        1438, 704, 506, 1447, 719, 521, 1457, 734, 536}], 
       Line3DBox[{344, 551, 1281, 345, 565, 1292, 364, 580, 379, 1381, 595, 
        394, 1388, 610, 409, 1395, 623, 422, 1405, 635, 434, 1416, 647, 1329, 
        447, 660, 1339, 462, 675, 477, 1431, 690, 492, 1439, 705, 507, 1448, 
        720, 522, 1458, 735, 537}], 
       Line3DBox[{346, 552, 1282, 347, 566, 1293, 365, 581, 1302, 380, 596, 
        1310, 395, 1389, 611, 410, 1396, 624, 423, 1406, 636, 435, 1417, 648, 
        1330, 448, 661, 1340, 463, 676, 1349, 478, 691, 493, 1440, 706, 508, 
        1449, 721, 523, 1459, 736, 538}], 
       Line3DBox[{348, 553, 1283, 349, 567, 1294, 366, 582, 1303, 381, 597, 
        1311, 396, 612, 1317, 411, 1397, 625, 424, 1407, 637, 436, 1418, 649, 
        1331, 449, 662, 1341, 464, 677, 1350, 479, 692, 1357, 494, 707, 509, 
        1450, 722, 524, 1460, 737, 539}], 
       Line3DBox[{350, 554, 1284, 351, 568, 1295, 367, 583, 1304, 382, 598, 
        1312, 397, 613, 1318, 412, 626, 1320, 425, 1408, 638, 437, 1419, 650, 
        1332, 450, 663, 1342, 465, 678, 1351, 480, 693, 1358, 495, 708, 1363, 
        510, 723, 525, 1461, 738, 540}], 
       Line3DBox[{352, 741, 742, 1285, 353, 569, 1296, 368, 584, 1305, 383, 
        599, 1313, 398, 614, 1319, 413, 627, 1321, 426, 1409, 639, 438, 1420, 
        651, 1333, 451, 664, 1343, 466, 679, 1352, 481, 694, 1359, 496, 709, 
        1364, 511, 724, 1367, 526, 766, 767, 768}], 
       Line3DBox[{527, 725, 1468, 765, 512, 710, 1441, 497, 695, 1432, 482, 
        680, 1426, 467, 665, 1422, 452, 652, 1421, 439, 1322, 640, 1410, 427, 
        628, 1398, 414, 615, 1390, 399, 600, 1382, 384, 585, 1376, 369, 570, 
        1372, 354, 555, 1369, 325, 541, 740, 769}], 
       Line3DBox[{535, 733, 1456, 520, 718, 1446, 505, 703, 1437, 490, 688, 
        1429, 475, 673, 1424, 460, 658, 1465, 760, 445, 645, 758, 778, 804, 
        806, 805, 1475, 432, 633, 803, 802, 808, 807, 780, 793, 1470, 792, 
        420, 621, 1463, 746, 407, 608, 1386, 392, 593, 1379, 377, 578, 1374, 
        362, 563, 1370, 341, 549, 339}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
PYQ7CYfSeiCcRLiJ9iPldYqLyvhfsx5UzhfFTbE97XNroX9al1qCPeRHNcF+
Gqc43s8160Glf7g/UfQn8SDEi1A9vrYmv4FUv1OdSXUn9U91EdVJNL+E42mf
0f4i3Ek4lOIb4STCTZRfKK9Tnqf8TnmoltCe4mac0P+gmvyG0p41NfkNpf0b
avIbyvGu4X5ZI/iH+xNFfwp8Hf6Dr8N/8HX4D74O/8HX4T/4OvwHX4f/4Ovw
H3wd/oOvw3/wdfgPvg7/wdfhP/g60Z8o+rPb2G4/Bqg+Vj5HPNv5urJ7Keiy
zziGvx/G39Nn+nd6P4h/pqeEv6/bxcnRZWqU8jlwleeh2XJ7AjW7l1j5RMEu
/Q+tX8yLhK+VqQ0rlsuoHf6jPYrt12LFhqVDoqCNd/G9VgUFsNimcPDBz+Uw
k71HfeG9fx9J/IxPKeD751kIwSc7DmpeUab8e+qP2lM7+jtqT/3S91D7iBYt
Dp//9kKSOribedDeYijeU97qx/63QJ/p3+l9PnuPr/n7J/x9e9Y/7uD22PL+
u/L3S/j30nv6e+qP+rnD7MeLzH68x+2nv6f+qB/6vvbC++Nvz3ZsbBIpaaFm
eGdOfiHapbsYbc0sF+cX/zG/+I/5VbandjTP1J7mm/oT3qP4fh+3swmzE5Zx
O+kz/Tu9p/HQ+Ghc5C/yH/lNsEdpp7A+le8P2KYtGltWpHw+1td3HOz/Ghay
z5jH32fy9/SZ/p3eX+Wf6RnP36856Rp5acEXScjYKdMjVr2Fk/464e8uF0My
+4yp/N938ffhDyTJrvWjlM/X9WM0cuV28s8ovndeN++nvkM8NDnpuqVV1nNo
P+y13hC/UqDvo++n79Vl7XAO+zvU5e3JDrLrH/bgP+xRvr/I5yOZ78cAPi9u
fL78+X4N5O/pM/07vae/p/6on4RAc4cjPaLg2xxHgwMHI+GxxtXDq1bJ8cPP
O9sORmfBrx+K5wtodqtqbFftdzCUj1OL+6ctHy/5i/xHfqN29HfUnvql76H+
2ecXUPTn37NQnb//j/v5PO+/Ne+nmvWDPXg/jXj7pqwf/M37UeHv6e+pP+pH
OX/8Pc0j9UvfQ/1Tv/Q91D/3I5JfyZ/kX/4e6T19pr/7R3v4R3vle6W/uP/I
b1sb9rVr1jRPsqzbRst3jV/CaumyIRYOpbCGfcZz/N+X8/fCehDtQdF+/SF7
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
7TjnawBovplqkxqQDm2XfSn2+iDHV/b/3Tguz2sZc9Mc9/XJhNjF2h7uFVJo
9/VFnPls6zCRP2ynlSErlOMHu6wOFosgC0KKp4W8jpLXL823TT9u+QC3ZUal
++tkgMcmy5mhT6UwHh9fOijPNyX9HTYG2aZA3z23407I5+WHpXTphtho7KQT
aTCpOgGGdLkq89OUwcLiya3cS2PQYN6Xw8XqcTC1x830YfL1U/tMO/0ZG2Px
+dcxcSs8o2FRs3uOsUNl0K0woGrT5Vj07r0hZ4hTJGzr4ZPnK/f/MgedZ2M7
JcFv845eZW4hEBE7pzqgvwx+fE/87mOeBC+qpROc9RGcrNZcVWsng0Eet38H
v0mEwOK7h1X0YqBH1deYwvoy6H4wxdl/WYLyeXX+u95Vb6WwvjK4f6JRLITp
ax8NGp4KVs++Bx5PlcLewy87r9wbDnovKncPn5MJ1YXHVmoHSSFqW/b6r0tu
QW6ebf/ByVmQs+XzMt1bUjjv1vRc/4arwkT+0Kbb6tJTcjx8xXj790+Nc6B5
04I1WcuksPbcz/VGDaJxg/FQt1hJJiztYhDj7C2F1he8PvRfFoe1B8YtbtIv
Beb1mWh6IF0KBuf3X7wjjcdu7AneEaFVtz/L8bmR+Ytl6xLwS5RdaPP9MWCg
FrHGU0O+7/r2fJ26OgHv7b8c/EgeB1aEN174sYfc/4fXVtt2SMCqnm52923C
YcWaN9hEjtMurDo0w9g+BT4Ghn1q+/Qu7Fpu56ojn6+5g6yODV+UCt82WTeJ
+RUEReNiCl83kcGuCc/y/TTSoLlH2i2jRgjj0uxk8WVSCDtisWbvh1Ro92Dv
hw4LY+FS+qHHDpHydeLdfMLTV8nK57OSu1atDkgheEeapkebOKhsuuyQlkEW
TAxoPvHgPCmMNeh8X31BINxwcY688zwHRs16GP5orBQeORn222/rEibeQ6nv
PiBg0tpojFpZeXCUWh60eznGMfVpBRwz2NN2YnwSQu+p7f20MmFS9CHXNeOl
UN1jwHaMSUFvH+/crDZJ0FItJcz/lBTGbb7RVU+Oj5+smJphOCgWBgY+NPkq
r5dfsXWPE9g+UK7/gVkFXi3dk/FyeHejCv0weLqzKLOlPI5lf330Iud0Elo1
wLXj+gZDp6Xt39WS1x0BagOnv2iWBkNWRu4Y/dEPBtyp3P5Zni9+eXRvMCcz
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
n+rRkjtKv9H9Yl9+rzuTP+vNf79Mcb9bvPetzd9Pn972mfbOqLBcPl/P+Hz9
HLkmaPHyYsldrq8/z3Xyl/nfJ/FnbOFue0U/kx32b6yd/wyTvYa3rRiYhPlp
VxucsCiD7Wasn1iut3fj/dw0O1q/geYTHF564vCohZlwaof/sqmeZdCPjytc
2C8ZfJ1vFdYPP6+Htfy8nnQg2htWzl9Y/0QY8n4a8H5WtOpRq4n3czD2evq4
6a5AeOEdN1vDqAzGMfshk9kPD7n9a3j74DN/2uNz3n4Gb+/Fx5vH29vw743j
81KPf6+bTe+lnU1yJdncz8+5n898eXQ/3zFAYs/11I5cL31Vy97z2aw8RPYE
m469J/ftXw5ut+5GL7AswIYvtli+m5INr7Zu2nunvAxieTt//ndzeHsP1h7q
svZI7Q9J1k1K7ns5LJ3v91fcHp2E/8Z5znwjucPn/QKfr7k9Q8asrp8uSeTt
3/H2O8tD7nweMV+ygtu/ittvyfQnUMn1J0+5/iSBj3c114ev4O2DpYbtXg55
jh9013x72igG1ANCs891LQNdXu8XCPV+BG8fzNpjY96+LW//+wXTb2/j7dvw
99Ne1nzfnOu3q7h+25jrt3X5+8f8vRF/38zwdaF5g0zUZk+o2t0WP5dXKPXW
pL+m8yna57Tvab+TLpN0r3RuSLpM0mnSuS3pCElXSHpC0mmRDo50C6TTIt0W
6UZIh0S6JNLhkL4kQWhPeghLoX86vyd9BJ3j0/n9LMF+Oh+1F8ZL56Mmgt9I
T0z6dDoHJP06ne/RuR7pg0kvTOezpNckfSudj5P+kvSYpE8gPRzpB0kfQvo2
0ruRPof0W6TnIr0T6XieC+1Jl0M6HdLnkI5kh2AP6R4SBPvpnF5PGC+dK0v/
t99Q9Bvp+EnXT+ewpPun81I6NyT9MemvSXdN+mDSC5M+gfSspG8lfQjpL0mP
Sfoc0guSfpD0UaSHI30c6c1IB9ZTaE86p3NC/6TLOSvYQzqSrYL9pHsgHQTp
AeicXut/+w1Fv9H9B7oPQefgpNen82c6tyX9N+nZSZ9AemXSX5M+hPTBpBcm
fQ7pWUnfSvoo0l+SHpN0mKQvJL0h6QxJV0c6O9KzkW5soNA/6Zz8BXtIlxMq
2E86kg3CeEk3sON/+w1Fv9G9EbpHQjoEumdC5/l0bk73Aeh+AOlDSL9OenbS
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

     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{338.27970547518174`, 148.6206137934305},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{-5, 5}, {-5, 5}, {0., 2.6591477585333485`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.5879894875035367`, 2.9524731874313965`, 0.45955572575801856`},
  
  ViewVertical->{-0.06433138847042523, -0.11960828523352662`, 
   0.9907347427848499}]], "Output",
 CellChangeTimes->{{3.860872756070167*^9, 3.8608727706416607`*^9}},
 CellLabel->
  "Out[448]=",ExpressionUUID->"3eb508b9-35ee-4974-a14c-db2aeb251bef"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Projection Theorem", "Title",
 CellChangeTimes->{{3.860873959190733*^9, 
  3.860873964714903*^9}},ExpressionUUID->"3f857a31-b7fd-4a8b-b48b-\
ced764576258"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "normalVec", ",", " ", "fn", ",", " ", "direction", ",", " ", 
      "fnDotNormal", ",", " ", "normalDotDirection"}], "}"}], ",", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"$Assumptions", "=", 
        RowBox[{
         RowBox[{"x", " ", "\[Element]", " ", "Reals"}], "&&", 
         RowBox[{"y", "\[Element]", "Reals"}], "&&", 
         RowBox[{"z", "\[Element]", "Reals"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"normalVec", "=", 
        RowBox[{
         RowBox[{"(", GridBox[{
            {
             RowBox[{
              SuperscriptBox["a", "4"], "x"}]},
            {
             RowBox[{
              SuperscriptBox["a", "4"], "y"}]},
            {
             RowBox[{
              RowBox[{"-", "2"}], 
              SuperscriptBox["z", "3"]}]}
           }], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["z", "2"], 
           SqrtBox[
            RowBox[{
             SuperscriptBox["a", "4"], "-", 
             RowBox[{"4", 
              SuperscriptBox["z", "2"]}]}]]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"fn", "=", 
        RowBox[{"(", GridBox[{
           {"x"},
           {"x"},
           {"1"}
          }], ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"direction", "=", 
        RowBox[{"(", GridBox[{
           {"0"},
           {"0"},
           {"1"}
          }], ")"}]}], ";", 
       RowBox[{"(*", " ", 
        RowBox[{"i", ",", " ", "j", ",", " ", 
         RowBox[{"or", " ", "k"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"fnDotNormal", "=", 
        RowBox[{
         RowBox[{"fn", "\[Transpose]"}], " ", ".", " ", "normalVec"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"normalDotDirection", "=", 
        RowBox[{"Abs", "[", 
         RowBox[{
          RowBox[{"normalVec", "\[Transpose]"}], " ", ".", " ", "direction"}],
          "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<n = \>\"", ",", " ", "normalVec"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<A . n = \>\"", " ", ",", " ", "fnDotNormal"}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<|k . n| = \>\"", ",", " ", "normalDotDirection"}], "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<\!\(\*FractionBox[\(n\), \(\(|\)\(k\\\  . \\\ n\)\(|\)\)]\) = \>\
\"", ",", " ", 
         RowBox[{"Simplify", "[", 
          RowBox[{"normalVec", " ", "/", " ", 
           RowBox[{"normalDotDirection", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<\!\(\*FractionBox[\(A\\\  . \\\ n\), \(\(|\)\(k\\\  . \\\ n\)\(|\
\)\)]\) = \>\"", ",", " ", 
         RowBox[{"Simplify", "[", 
          FractionBox["fnDotNormal", "normalDotDirection"], "]"}]}], "]"}], 
       ";"}]}], "\[IndentingNewLine]", "]"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.860873967875628*^9, 3.860874551655046*^9}, {
  3.86087460254388*^9, 3.860874632700667*^9}, {3.860874669172634*^9, 
  3.860874669825901*^9}, {3.860874713715158*^9, 3.860874723005209*^9}, {
  3.860874904045621*^9, 3.860875049737967*^9}, {3.860875085025051*^9, 
  3.8608750887856092`*^9}},
 CellLabel->
  "In[471]:=",ExpressionUUID->"9dd339be-be35-4a3f-82ae-c6dc590302d1"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"n = \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      FractionBox[
       RowBox[{
        SuperscriptBox["a", "4"], " ", "x"}], 
       RowBox[{
        SuperscriptBox["z", "2"], " ", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["a", "4"], "-", 
          RowBox[{"4", " ", 
           SuperscriptBox["z", "2"]}]}]]}]], "}"}], ",", 
     RowBox[{"{", 
      FractionBox[
       RowBox[{
        SuperscriptBox["a", "4"], " ", "y"}], 
       RowBox[{
        SuperscriptBox["z", "2"], " ", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["a", "4"], "-", 
          RowBox[{"4", " ", 
           SuperscriptBox["z", "2"]}]}]]}]], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"2", " ", "z"}], 
        SqrtBox[
         RowBox[{
          SuperscriptBox["a", "4"], "-", 
          RowBox[{"4", " ", 
           SuperscriptBox["z", "2"]}]}]]]}], "}"}]}], "}"}]}],
  SequenceForm[
  "n = ", {{$CellContext`a^4 $CellContext`x $CellContext`z^(-2) \
($CellContext`a^4 - 4 $CellContext`z^2)^
      Rational[-1, 
        2]}, {$CellContext`a^4 $CellContext`y $CellContext`z^(-2) \
($CellContext`a^4 - 4 $CellContext`z^2)^
      Rational[-1, 2]}, {(-2) $CellContext`z ($CellContext`a^4 - 
       4 $CellContext`z^2)^Rational[-1, 2]}}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.860874670281844*^9, 3.860874723768515*^9, 3.860874915975875*^9, 
   3.860874994203648*^9, {3.860875032293263*^9, 3.860875050590124*^9}, 
   3.860875089502677*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[471]:=",ExpressionUUID->"7f0f9010-9dcb-4bd8-\
94ea-eb5699898a39"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"A . n = \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      FractionBox[
       RowBox[{
        SuperscriptBox["a", "4"], " ", 
        SuperscriptBox["x", "2"]}], 
       RowBox[{
        SuperscriptBox["z", "2"], " ", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["a", "4"], "-", 
          RowBox[{"4", " ", 
           SuperscriptBox["z", "2"]}]}]]}]], "+", 
      FractionBox[
       RowBox[{
        SuperscriptBox["a", "4"], " ", "x", " ", "y"}], 
       RowBox[{
        SuperscriptBox["z", "2"], " ", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["a", "4"], "-", 
          RowBox[{"4", " ", 
           SuperscriptBox["z", "2"]}]}]]}]], "-", 
      FractionBox[
       RowBox[{"2", " ", "z"}], 
       SqrtBox[
        RowBox[{
         SuperscriptBox["a", "4"], "-", 
         RowBox[{"4", " ", 
          SuperscriptBox["z", "2"]}]}]]]}], "}"}], "}"}]}],
  SequenceForm[
  "A . n = ", {{$CellContext`a^4 $CellContext`x^2 $CellContext`z^(-2) \
($CellContext`a^4 - 4 $CellContext`z^2)^
       Rational[-1, 
         2] + $CellContext`a^4 $CellContext`x $CellContext`y \
$CellContext`z^(-2) ($CellContext`a^4 - 4 $CellContext`z^2)^Rational[-1, 2] - 
     2 $CellContext`z ($CellContext`a^4 - 4 $CellContext`z^2)^
      Rational[-1, 2]}}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.860874670281844*^9, 3.860874723768515*^9, 3.860874915975875*^9, 
   3.860874994203648*^9, {3.860875032293263*^9, 3.860875050590124*^9}, 
   3.860875089506551*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[471]:=",ExpressionUUID->"945ac908-b997-4687-\
ad2f-7590b5682d98"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"|k . n| = \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"2", " ", 
      RowBox[{"Abs", "[", 
       FractionBox["z", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["a", "4"], "-", 
          RowBox[{"4", " ", 
           SuperscriptBox["z", "2"]}]}]]], "]"}]}], "}"}], "}"}]}],
  SequenceForm[
  "|k . n| = ", {{
    2 Abs[$CellContext`z ($CellContext`a^4 - 4 $CellContext`z^2)^
        Rational[-1, 2]]}}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.860874670281844*^9, 3.860874723768515*^9, 3.860874915975875*^9, 
   3.860874994203648*^9, {3.860875032293263*^9, 3.860875050590124*^9}, 
   3.860875089510181*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[471]:=",ExpressionUUID->"76f4433b-c3b8-4f74-\
88d8-6585238ae9a0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\!\\(\\*FractionBox[\\(n\\), \\(\\(|\\)\\(k\\\\  . \\\\ \
n\\)\\(|\\)\\)]\\) = \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      FractionBox[
       RowBox[{
        SuperscriptBox["a", "4"], " ", "x"}], 
       RowBox[{"2", " ", 
        SuperscriptBox["z", "2"], " ", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["a", "4"], "-", 
          RowBox[{"4", " ", 
           SuperscriptBox["z", "2"]}]}]], " ", 
        RowBox[{"Abs", "[", 
         FractionBox["z", 
          SqrtBox[
           RowBox[{
            SuperscriptBox["a", "4"], "-", 
            RowBox[{"4", " ", 
             SuperscriptBox["z", "2"]}]}]]], "]"}]}]], "}"}], ",", 
     RowBox[{"{", 
      FractionBox[
       RowBox[{
        SuperscriptBox["a", "4"], " ", "y"}], 
       RowBox[{"2", " ", 
        SuperscriptBox["z", "2"], " ", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["a", "4"], "-", 
          RowBox[{"4", " ", 
           SuperscriptBox["z", "2"]}]}]], " ", 
        RowBox[{"Abs", "[", 
         FractionBox["z", 
          SqrtBox[
           RowBox[{
            SuperscriptBox["a", "4"], "-", 
            RowBox[{"4", " ", 
             SuperscriptBox["z", "2"]}]}]]], "]"}]}]], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", 
       FractionBox["z", 
        RowBox[{
         SqrtBox[
          RowBox[{
           SuperscriptBox["a", "4"], "-", 
           RowBox[{"4", " ", 
            SuperscriptBox["z", "2"]}]}]], " ", 
         RowBox[{"Abs", "[", 
          FractionBox["z", 
           SqrtBox[
            RowBox[{
             SuperscriptBox["a", "4"], "-", 
             RowBox[{"4", " ", 
              SuperscriptBox["z", "2"]}]}]]], "]"}]}]]}], "}"}]}], "}"}]}],
  SequenceForm[
  "\!\(\*FractionBox[\(n\), \(\(|\)\(k\\  . \\ n\)\(|\)\)]\) = ", {{
    Rational[
      1, 2] $CellContext`a^4 $CellContext`x $CellContext`z^(-2) \
($CellContext`a^4 - 4 $CellContext`z^2)^Rational[-1, 2]/
     Abs[$CellContext`z ($CellContext`a^4 - 4 $CellContext`z^2)^
       Rational[-1, 2]]}, {
    Rational[1, 
       2] $CellContext`a^4 $CellContext`y $CellContext`z^(-2) \
($CellContext`a^4 - 4 $CellContext`z^2)^Rational[-1, 2]/
     Abs[$CellContext`z ($CellContext`a^4 - 4 $CellContext`z^2)^
       Rational[-1, 2]]}, {-$CellContext`z ($CellContext`a^4 - 
       4 $CellContext`z^2)^Rational[-1, 2]/
     Abs[$CellContext`z ($CellContext`a^4 - 4 $CellContext`z^2)^
       Rational[-1, 2]]}}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.860874670281844*^9, 3.860874723768515*^9, 3.860874915975875*^9, 
   3.860874994203648*^9, {3.860875032293263*^9, 3.860875050590124*^9}, 
   3.8608750895137672`*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[471]:=",ExpressionUUID->"e281f7e4-16bc-464a-\
a867-430db20bfc5a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\!\\(\\*FractionBox[\\(A\\\\  . \\\\ n\\), \\(\\(|\\)\\(k\\\\ \
 . \\\\ n\\)\\(|\\)\\)]\\) = \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"{", 
     FractionBox[
      RowBox[{
       RowBox[{
        SuperscriptBox["a", "4"], " ", "x", " ", 
        RowBox[{"(", 
         RowBox[{"x", "+", "y"}], ")"}]}], "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["z", "3"]}]}], 
      RowBox[{"2", " ", 
       SuperscriptBox["z", "2"], " ", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["a", "4"], "-", 
         RowBox[{"4", " ", 
          SuperscriptBox["z", "2"]}]}]], " ", 
       RowBox[{"Abs", "[", 
        FractionBox["z", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["a", "4"], "-", 
           RowBox[{"4", " ", 
            SuperscriptBox["z", "2"]}]}]]], "]"}]}]], "}"}], "}"}]}],
  SequenceForm[
  "\!\(\*FractionBox[\(A\\  . \\ n\), \(\(|\)\(k\\  . \\ n\)\(|\)\)]\) = ", {{
    Rational[1, 2] $CellContext`z^(-2) ($CellContext`a^4 - 
       4 $CellContext`z^2)^
      Rational[-1, 
        2] ($CellContext`a^4 $CellContext`x ($CellContext`x + $CellContext`y) - 
      2 $CellContext`z^3)/
     Abs[$CellContext`z ($CellContext`a^4 - 4 $CellContext`z^2)^
       Rational[-1, 2]]}}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.860874670281844*^9, 3.860874723768515*^9, 3.860874915975875*^9, 
   3.860874994203648*^9, {3.860875032293263*^9, 3.860875050590124*^9}, 
   3.860875089518342*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[471]:=",ExpressionUUID->"3b40a696-58be-48b7-\
8fa6-c688a7e913a7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Q", "''"}], "[", "\[Theta]", "]"}], "==", 
     RowBox[{"r", " ", 
      RowBox[{"D", "[", " ", 
       RowBox[{
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"\[Theta]", ",", "r"}], "]"}], ",", "\[Theta]"}], "]"}], 
        ",", "\[Theta]"}], "]"}]}]}], "&&", " ", 
    RowBox[{
     RowBox[{"2", " ", 
      RowBox[{
       RowBox[{"Q", "'"}], "[", "\[Theta]", "]"}]}], "==", 
     RowBox[{
      RowBox[{"r", " ", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"v", "[", 
          RowBox[{"\[Theta]", ",", "r"}], "]"}], ",", "\[Theta]"}], "]"}]}], 
      "-", 
      RowBox[{
       SuperscriptBox["r", "2"], " ", 
       RowBox[{"D", "[", " ", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{
           RowBox[{"v", "[", 
            RowBox[{"\[Theta]", ",", "r"}], "]"}], ",", "\[Theta]"}], "]"}], 
         ",", "r"}], "]"}]}]}]}]}], ",", "Q", ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "r", ",", "v"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8614193593666973`*^9, 3.861419485502087*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"1007441e-be2a-414e-af16-7f7863b7c397"],

Cell[BoxData[
 TemplateBox[{
  "DSolve", "derlen", 
   "\"The length of the derivative operator \\!\\(\\*RowBox[{\\\"Derivative\\\
\", \\\"[\\\", \\\"2\\\", \\\"]\\\"}]\\) in \
\\!\\(\\*RowBox[{SuperscriptBox[\\\"Q\\\", \\\"\[Prime]\[Prime]\\\", \
Rule[MultilineFunction, None]], \\\"[\\\", \\\"\[Theta]\\\", \\\"]\\\"}]\\) \
is not the same as the number of arguments.\"", 2, 19, 3, 
   27877248076222430147, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8614194863824987`*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[19]:=",ExpressionUUID->"d35b08f2-da2f-4ac1-a8bd-\
f9d49e58370b"],

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox["Q", "\[Prime]\[Prime]",
       MultilineFunction->None], "[", "\[Theta]", "]"}], "\[Equal]", 
     RowBox[{"r", " ", 
      RowBox[{
       SuperscriptBox["v", 
        TagBox[
         RowBox[{"(", 
          RowBox[{"2", ",", "0"}], ")"}],
         Derivative],
        MultilineFunction->None], "[", 
       RowBox[{"\[Theta]", ",", "r"}], "]"}]}]}], "&&", 
    RowBox[{
     RowBox[{"2", " ", 
      RowBox[{
       SuperscriptBox["Q", "\[Prime]",
        MultilineFunction->None], "[", "\[Theta]", "]"}]}], "\[Equal]", 
     RowBox[{
      RowBox[{"r", " ", 
       RowBox[{
        SuperscriptBox["v", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"\[Theta]", ",", "r"}], "]"}]}], "-", 
      RowBox[{
       SuperscriptBox["r", "2"], " ", 
       RowBox[{
        SuperscriptBox["v", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"\[Theta]", ",", "r"}], "]"}]}]}]}]}], ",", "Q", ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "r", ",", "v"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.861419486396524*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"2f1df9fc-7daf-44fc-b842-68f2044acb57"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"r", " ", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{
           RowBox[{"v", "[", 
            RowBox[{"\[Theta]", ",", "r"}], "]"}], ",", "r"}], "]"}], ",", 
         "\[Theta]"}], "]"}], ",", "\[Theta]"}], "]"}]}], "==", 
    RowBox[{"-", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"v", "[", 
          RowBox[{"\[Theta]", ",", "r"}], "]"}], ",", "\[Theta]"}], "]"}], 
       ",", "\[Theta]"}], "]"}]}]}], ",", "v", ",", 
   RowBox[{"{", 
    RowBox[{"r", ",", "\[Theta]"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.861419721330617*^9, 3.8614198004710007`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"5a04710c-dbc5-40b4-aaee-0ad9106f4b8e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"v", "\[Rule]", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[Theta]", ",", "r"}], "}"}], ",", 
      RowBox[{
       RowBox[{
        TemplateBox[{"2"},
         "C"], "[", "r", "]"}], "+", 
       RowBox[{"\[Theta]", " ", 
        RowBox[{
         TemplateBox[{"3"},
          "C"], "[", "r", "]"}]}], "+", 
       TemplateBox[{
         TemplateBox[{
           FractionBox[
            RowBox[{
              TemplateBox[{"1"}, "C"], "[", 
              RowBox[{"K", "[", "1", "]"}], "]"}], "r"], 
           RowBox[{"K", "[", "1", "]"}], "1", 
           RowBox[{"K", "[", "2", "]"}]}, "InactiveIntegrate", 
          DisplayFunction -> (RowBox[{
             SubsuperscriptBox[
              StyleBox["\[Integral]", "Inactive"], #3, #4], 
             RowBox[{#, 
               RowBox[{
                 StyleBox["\[DifferentialD]", "Inactive"], #2}]}]}]& ), 
          InterpretationFunction -> (RowBox[{
             RowBox[{"Inactive", "[", "Integrate", "]"}], "[", 
             RowBox[{#, ",", 
               RowBox[{"{", 
                 RowBox[{#2, ",", #3, ",", #4}], "}"}]}], "]"}]& )], 
         RowBox[{"K", "[", "2", "]"}], "1", "\[Theta]"},
        "InactiveIntegrate",
        DisplayFunction->(RowBox[{
           SubsuperscriptBox[
            StyleBox["\[Integral]", "Inactive"], #3, #4], 
           RowBox[{#, 
             RowBox[{
               StyleBox["\[DifferentialD]", "Inactive"], #2}]}]}]& ),
        InterpretationFunction->(RowBox[{
           RowBox[{"Inactive", "[", "Integrate", "]"}], "[", 
           RowBox[{#, ",", 
             RowBox[{"{", 
               RowBox[{#2, ",", #3, ",", #4}], "}"}]}], "]"}]& )]}]}], 
     "]"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.861419800951232*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"44d1bb12-d04c-491c-a89c-77c2bcdd0432"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "y'[x]==1/x y", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "Derivative[1][y][x] == (1/x)*y"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"Solution__Step-by-step solution"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"y'[x] == (1/x) y[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                 "(", "x", ")"}], "\[LongEqual]", 
               TagBox[
                RowBox[{
                  TagBox[
                   FractionBox["1", "x"], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], " ", 
                  RowBox[{"y", "(", "x", ")"}]}], Identity]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "ODE names", "scanner" -> "ODE", "id" -> "ODENames", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Separable equation"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                FractionBox[
                 RowBox[{
                   SuperscriptBox["y", "\[Prime]", MultilineFunction -> None],
                    "(", "x", ")"}], 
                 RowBox[{"y", "(", "x", ")"}]], "\[LongEqual]", 
                TagBox[
                 FractionBox["1", "x"], Identity]}], HoldForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> "Homogeneous equation"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  "(", "x", ")"}], "\[LongEqual]", 
                TagBox[
                 FractionBox[
                  RowBox[{"y", "(", "x", ")"}], "x"], Identity]}], HoldForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> "Clairaut's equation"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{"y", "(", "x", ")"}], "\[LongEqual]", 
                RowBox[{"x", " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}]}], HoldForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/ClairautsDifferentialEquation.html", 
           "text" -> "Clairaut's equation"}, {}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"first\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming x is positive", "scanner" -> 
     "Simplification", "id" -> "PositiveAlternateForm", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FullSimplify[y'[x] == y[x]/x, x > 0]"}], 
       XMLElement["moutput", {}, {"y[x] == x y'[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "x", ")"}], "\[LongEqual]", 
              RowBox[{"x", " ", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  "(", "x", ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Differential equation solutions", "scanner" -> "ODE", 
     "id" -> "Solution", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"DSolve[{y'[x] == y[x]/x}, y[x], x]"}], 
       XMLElement["moutput", {}, {"y[x] == x Subscript[c, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "x", ")"}], "\[LongEqual]", 
              RowBox[{
                SubscriptBox["c", "1"], " ", "x"}]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Solve the separable equation \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm], "\[LongEqual]", 
                    FractionBox[
                    RowBox[{"y", "(", "x", ")"}], "x"]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                   "RowWithSeparators"], 
                  GrayLevel[0.3], StripOnInput -> False], {
                 LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Divide \"", "\"both \"", "\"sides \"", "\"by \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"y", "(", "x", ")"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    FractionBox[
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm], 
                    RowBox[{"y", "(", "x", ")"}]], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    FractionBox["1", "x"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Integrate \"", "\"both \"", "\"sides \"", "\"with \"", 
                    "\"respect \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    "x", FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox[
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm], 
                    RowBox[{"y", "(", "x", ")"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", "x"], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Evaluate \"", "\"the \"", "\"integrals:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"log", "(", 
                    RowBox[{"y", "(", "x", ")"}], ")"}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"log", "(", "x", ")"}], "+", 
                    SubscriptBox["c", "1"]}], HoldForm], 
                    StyleBox[
                    "\", where \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    SubscriptBox["c", "1"], 
                    StyleBox[
                    "\" is an arbitrary constant.\"", FontColor -> 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Solve \"", "\"for \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"y", "(", "x", ")"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"y", "(", "x", ")"}], "\[LongEqual]", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    SubscriptBox["c", "1"]], " ", "x"}]}]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"arbitrary \"", 
                    "\"constants:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"y", "(", "x", ")"}], "\[LongEqual]", 
                    RowBox[{
                    SubscriptBox["c", "1"], " ", "x"}]}]}, "RowDefault"], 
                    HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Solve as a separable equation", 
         "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Solve as a separable equation", "input" -> 
           "Solution__Solve as a separable equation"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve as a linear equation", "input" -> 
           "Solution__Solve as a linear equation"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Transform into an exact equation", "input" -> 
           "Solution__Transform into an exact equation"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Solution__Hide steps"}, {}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Slope field", "scanner" -> "ODE", "id" -> "SlopeField",
      "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "VectorPlot[{1, y/x}, {x, -1, 1}, {y, -1, 1}, VectorStyle -> \
\"Segment\"]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{}}, {{
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 RGBColor[0.24720000000000014`, 0.24, 0.6]], {
                 
                 LineBox[{{-1.034378861078631, -1.0343128216117674`}, \
{-0.9683921349213691, -0.9683303083482326}}], 
                 
                 LineBox[{{-1.03625605755568, -0.9212477379909904}, \
{-0.96651493844432, -0.859246799364054}}], 
                 
                 LineBox[{{-1.0382095692411948`, -0.8078255952672846}, \
{-0.9645614267588054, -0.7505203494828043}}], 
                 
                 LineBox[{{-1.0401983477271406`, -0.6939936122076475}, \
{-0.9625726482728596, -0.6422037399374858}}], 
                 
                 LineBox[{{-1.0421599881303416`, -0.5797053404197658}, \
{-0.9606110078696586, -0.5343434191204119}}], 
                 
                 LineBox[{{-1.0440082057296014`, -0.46493138498195685`}, \
{-0.9587627902703989, -0.4269687819532654}}], 
                 
                 LineBox[{{-1.0456349804719927`, -0.3496733654245084}, \
{-0.9571360155280074, -0.3200782089057582}}], 
                 
                 LineBox[{{-1.046920325976621, -0.23397815350426124`}, \
{-0.9558506700233792, -0.21362482822104986`}}], 
                 
                 LineBox[{{-1.0477508177454993`, -0.11794659551039578`}, \
{-0.9550201782545009, -0.10750779360995977`}}], 
                 
                 LineBox[{{-1.0480436065146328`, -0.0017299126606701134`}, \
{-0.9547273894853673, -0.0015758838547298593`}}], 
                 
                 LineBox[{{-1.0477675921481286`, 
                  0.11448956968903376`}, {-0.9550034038518714, 
                  0.10435322640052182`}}], 
                 
                 LineBox[{{-1.0469521201416798`, 
                  0.23052903715904524`}, {-0.9558188758583204, 
                  0.2104623515354659}}], 
                 
                 LineBox[{{-1.0456787651056119`, 
                  0.34623598909826875`}, {-0.9570922308943883, 
                  0.31690399220119797`}}], 
                 
                 LineBox[{{-1.0440603986856316`, 
                  0.4615079523662551}, {-0.9587105973143686, 
                  0.42378062153816715`}}], 
                 
                 LineBox[{{-1.0422171201146753`, 
                  0.5762965295046443}, {-0.9605538758853249, 
                  0.5311406370047336}}], 
                 
                 LineBox[{{-1.0402574904445396`, 
                  0.6905989490907699}, {-0.9625135055554606, 
                  0.6389868100235634}}], 
                 
                 LineBox[{{-1.038268503348354, 
                  0.8044438960677931}, {-0.9645024926516461, 
                  0.747290455651496}}], 
                 
                 LineBox[{{-1.0363132535858433`, 
                  0.917877485336368}, {-0.9664577424141568, 
                  0.8560054589878766}}], 
                 
                 LineBox[{{-1.034433365162877, 
                  1.0309524273322868`}, {-0.9683376308371233, 
                  0.9650791095969133}}], 
                 
                 LineBox[{{-0.9212917519601772, -1.0361904138689373`}, \
{-0.8592869650952274, -0.9664527160910626}}], 
                 
                 LineBox[{{-0.9232824482909798, -0.9232387986398296}, \
{-0.8572962687644249, -0.8572557387152149}}], 
                 
                 LineBox[{{-0.9253998929740377, -0.8099013858107266}, \
{-0.8551788240813669, -0.7484445589393622}}], 
                 
                 LineBox[{{-0.9276082156569024, -0.6961038170997399}, \
{-0.8529705013985022, -0.6400935350453935}}], 
                 
                 LineBox[{{-0.9298435532383214, -0.5817721211251288}, \
{-0.8507351638170833, -0.5322766384150491}}], 
                 
                 LineBox[{{-0.9320065895216904, -0.4668464386420369}, \
{-0.8485721275337142, -0.42505372829318533`}}], 
                 
                 LineBox[{{-0.9339603390015687, -0.3513023049285759}, \
{-0.846618378053836, -0.3184492694016908}}], 
                 
                 LineBox[{{-0.9355396963961774, -0.23517654884801784`}, \
{-0.8450390206592271, -0.21242643287729324`}}], 
                 
                 LineBox[{{-0.9365779504010827, -0.11858819138334135`}, \
{-0.8440007666543219, -0.10686619773701417`}}], 
                 
                 LineBox[{{-0.9369474501896751, -0.001739522991194744}, \
{-0.8436312668657294, -0.0015662735242052282`}}], 
                 
                 LineBox[{{-0.9365990702565462, 
                  0.11511311316176026`}, {-0.8439796467988584, 
                  0.10372968292779533`}}], 
                 
                 LineBox[{{-0.935579181702703, 
                  0.23171250932115428`}, {-0.8449995353527016, 
                  0.20927887937335685`}}], 
                 
                 LineBox[{{-0.9340136069536017, 
                  0.3478541891553936}, {-0.846565110101803, 
                  0.31528579214407304`}}], 
                 
                 LineBox[{{-0.9320685257327233, 
                  0.4634165330762203}, {-0.8485101913226814, 
                  0.42187204082820196`}}], 
                 
                 LineBox[{{-0.9299095626130366, 
                  0.5783605078876792}, {-0.8506691544423681, 
                  0.5290766586216986}}], 
                 
                 LineBox[{{-0.9276747534546365, 
                  0.6927091340971059}, {-0.852903963600768, 
                  0.6368766250172276}}], 
                 
                 LineBox[{{-0.9254645447571341, 
                  0.8065215604580392}, {-0.8551141722982705, 
                  0.7452127912612497}}], 
                 
                 LineBox[{{-0.9233437595313674, 
                  0.9198715738271706}, {-0.8572349575240372, 
                  0.854011370497074}}], 
                 
                 LineBox[{{-0.9213489789970126, 
                  1.03283365176735}, {-0.859229738058392, 
                  0.9631978851618501}}], 
                 
                 LineBox[{{-0.8078474451808259, -1.0381443886975632`}, \
{-0.7505389929299832, -0.964498741262437}}], 
                 
                 LineBox[{{-0.8099229072697886, -0.9253566874085161}, \
{-0.7484635308410206, -0.8551378499465284}}], 
                 
                 LineBox[{{-0.8121859575689092, -0.8121648535999915}, \
{-0.7462004805418998, -0.7461810911500975}}], 
                 
                 LineBox[{{-0.814613829772822, -0.698469144587008}, \
{-0.743772608337987, -0.6377282075581252}}], 
                 
                 LineBox[{{-0.8171499849673306, -0.5841586559330668}, \
{-0.7412364531434783, -0.529890103607111}}], 
                 
                 LineBox[{{-0.8196882479867172, -0.4691263138175549}, \
{-0.7386981901240918, -0.42277385311766735`}}], 
                 
                 LineBox[{{-0.8220601829935177, -0.3532988277423567}, \
{-0.7363262551172913, -0.31645274658790995`}}], 
                 
                 LineBox[{{-0.8240382642776285, -0.236681977670156}, \
{-0.7343481738331805, -0.2109210040551551}}], 
                 
                 LineBox[{{-0.8253706491707824, -0.11940776110208845`}, \
{-0.7330157889400265, -0.10604662801826707`}}], 
                 
                 LineBox[{{-0.8258512861524465, -0.0017518737568782794`}, \
{-0.7325351519583625, -0.001553922758521693}}], 
                 
                 LineBox[{{-0.8253980282797928, 
                  0.11590989755694478`}, {-0.7329884098310162, 
                  0.10293289853261081`}}], 
                 
                 LineBox[{{-0.8240884576031738, 
                  0.23320012574422874`}, {-0.7342979805076352, 
                  0.2077912629502824}}], 
                 
                 LineBox[{{-0.8221259839825601, 
                  0.3498391646072803}, {-0.7362604541282489, 
                  0.3133008166921864}}], 
                 
                 LineBox[{{-0.8197622422628316, 
                  0.46569074822887474`}, {-0.7386241958479774, 
                  0.4195978256755475}}], 
                 
                 LineBox[{{-0.817226173146657, 
                  0.5807459661186324}, {-0.741160264964152, 
                  0.5266912003907455}}], 
                 
                 LineBox[{{-0.8146881365205939, 
                  0.6950764700893494}, {-0.7436983015902152, 
                  0.6345092890249839}}], 
                 
                 LineBox[{{-0.812256018951677, 
                  0.8087888447784669}, {-0.746130419159132, 
                  0.7429455069408222}}], 
                 
                 LineBox[{{-0.8099876033821648, 
                  0.9219941598667376}, {-0.7483988347286441, 
                  0.851888784457507}}], 
                 
                 LineBox[{{-0.8079064506590751, 
                  1.0347926001967582`}, {-0.7504799874517338, 
                  0.9612389367324418}}], 
                 
                 LineBox[{{-0.6939931169603154, -1.0401336799641094`}, \
{-0.642201042205898, -0.9625094499958907}}], 
                 
                 LineBox[{{-0.6961030248203718, -0.9275655222908523}, \
{-0.6400911343458416, -0.8529290150641923}}], 
                 
                 LineBox[{{-0.6984679610734884, -0.8145932289929559}, \
{-0.6377261980927251, -0.743752715757133}}], 
                 
                 LineBox[{{-0.7010893500358133, -0.7010910253638338}, \
{-0.6351048091304001, -0.6351063267812996}}], 
                 
                 LineBox[{{-0.7039335767844097, -0.5869029756159868}, \
{-0.6322605823818036, -0.527145783924191}}], 
                 
                 LineBox[{{-0.7069042196833731, -0.47185357548354995`}, \
{-0.6292899394828404, -0.4200465914516722}}], 
                 
                 LineBox[{{-0.7098087377260522, -0.3557832642091851}, \
{-0.6263854214401611, -0.3139683101210815}}], 
                 
                 LineBox[{{-0.7123389575827919, -0.23862178952504715`}, \
{-0.6238552015834216, -0.20898119220026393`}}], 
                 
                 LineBox[{{-0.7141049396828834, -0.12049004393530338`}, \
{-0.6220892194833301, -0.10496434518505215`}}], 
                 
                 LineBox[{{-0.7147551088644916, -0.0017683320436926438`}, \
{-0.621439050301722, -0.0015374644717073285`}}], 
                 
                 LineBox[{{-0.7141417841816939, 
                  0.11696263135308699`}, {-0.6220523749845195, 
                  0.1018801647364686}}], 
                 
                 LineBox[{{-0.7124045495619674, 
                  0.23511872841867423`}, {-0.6237896096042461, 
                  0.20587266027583695`}}], 
                 
                 LineBox[{{-0.7098912533029214, 
                  0.35231202681929646`}, {-0.6263029058632921, 
                  0.31082795448017025`}}], 
                 
                 LineBox[{{-0.7069928609631527, 
                  0.4684144870332577}, {-0.6292012982030607, 
                  0.4168740868711645}}], 
                 
                 LineBox[{{-0.7040208510092933, 
                  0.5834921901557785}, {-0.6321733081569201, 
                  0.5239449763535994}}], 
                 
                 LineBox[{{-0.7011710749202974, 
                  0.6977033012168324}, {-0.635023084245916, 
                  0.6318824578975009}}], 
                 
                 LineBox[{{-0.6985423345933114, 
                  0.8112235256252116}, {-0.6376518245729019, 
                  0.7405108260940775}}], 
                 
                 LineBox[{{-0.6961696661692083, 
                  0.924209620811436}, {-0.6400244929970051, 
                  0.8496733235128087}}], 
                 
                 LineBox[{{-0.6940523803372095, 
                  1.0367882765617762`}, {-0.642141778829004, 
                  0.9592432603674239}}], 
                 
                 LineBox[{{-0.579682277772155, -1.0420958453939266`}, \
{-0.5343196024494629, -0.9605472845660735}}], 
                 
                 LineBox[{{-0.5817487738915454, -0.929801405560313}, \
{-0.5322531063300723, -0.8506931317947316}}], 
                 
                 LineBox[{{-0.584134927223592, -0.8171299449195564}, \
{-0.5298669529980259, -0.7412159998305324}}], 
                 
                 LineBox[{{-0.5868787521097626, -0.7039358267898975}, \
{-0.5271231281118551, -0.6322615253552358}}], 
                 
                 LineBox[{{-0.5899925558005383, -0.5900173838097745}, \
{-0.5240093244210795, -0.5240313757304033}}], 
                 
                 LineBox[{{-0.5934237057633076, -0.4751111390658687}, \
{-0.5205781744583102, -0.4167890278693535}}], 
                 
                 LineBox[{{-0.5969885907132966, -0.35891685246338656`}, \
{-0.5170132895083211, -0.3108347218668801}}], 
                 
                 LineBox[{{-0.600295081012164, -0.24119696110623104`}, \
{-0.5137067992094538, -0.20640602061908006`}}], 
                 
                 LineBox[{{-0.6027319701090891, -0.12198235078132867`}, \
{-0.5112699101125288, -0.10347203833902686`}}], 
                 
                 LineBox[{{-0.6036589067504398, -0.0017913556034831507`}, \
{-0.510342973471178, -0.0015144409119168217`}}], 
                 
                 LineBox[{{-0.6027840532029973, 
                  0.1184153725260288}, {-0.5112178270186205, 
                  0.1004274235635268}}], 
                 
                 LineBox[{{-0.6003835864408308, 
                  0.23766925014638332`}, {-0.5136182937807872, 
                  0.20332213854812783`}}], 
                 
                 LineBox[{{-0.5970932853174321, 
                  0.3554360518499916}, {-0.5169085949041857, 
                  0.3077039294494751}}], 
                 
                 LineBox[{{-0.5935292380775895, 
                  0.47167303940614214`}, {-0.5204726421440283, 
                  0.41361553449828015`}}], 
                 
                 LineBox[{{-0.590090603139398, 
                  0.586613251850617}, {-0.5239112770822199, 
                  0.5208239146587609}}], 
                 
                 LineBox[{{-0.5869661341145026, 
                  0.7005569980238997}, {-0.5270357461071153, 
                  0.6290287610904337}}], 
                 
                 LineBox[{{-0.5842112740927896, 
                  0.8137694547617181}, {-0.5297906061288282, 
                  0.7379648969575708}}], 
                 
                 LineBox[{{-0.5818149594825953, 
                  0.9264541215797216}, {-0.5321869207390224, 
                  0.8474288227445228}}], 
                 
                 LineBox[{{-0.5797395856647973, 
                  1.038758117681988}, {-0.5342622945568204, 
                  0.9572734192472121}}], 
                 
                 LineBox[{{-0.4648855049793784, -1.0439445386456898`}, \
{-0.42692409629764383`, -0.9586985913143102}}], 
                 
                 LineBox[{{-0.466800249246392, -0.9319649537625904}, \
{-0.4250093520306302, -0.848529583592454}}], 
                 
                 LineBox[{{-0.46907971183326125`, -0.819668756260493}, \
{-0.42272988944376094`, -0.7386771884895958}}], 
                 
                 LineBox[{{-0.4718064301591889, -0.7069070593106644}, \
{-0.4200031711178334, -0.6292902928344689}}], 
                 
                 LineBox[{{-0.47506330388954277`, -0.5934491887543663}, \
{-0.4167462973874795, -0.5205995707858115}}], 
                 
                 LineBox[{{-0.47889543532425316`, -0.4789440684408366}, \
{-0.4129141659527691, -0.41295609849438564`}}], 
                 
                 LineBox[{{-0.4832133710214612, -0.3628946307772807}, \
{-0.4085962302555611, -0.306856943552986}}], 
                 
                 LineBox[{{-0.48760532767022685`, -0.24473116039322043`}, \
{-0.4042042736067954, -0.20287182133209067`}}], 
                 
                 LineBox[{{-0.4911398580962446, -0.12416286673880635`}, \
{-0.40066974318077764`, -0.10129152238154919`}}], 
                 
                 LineBox[{{-0.49256265215952666`, -0.0018258515010305776`}, \
{-0.3992469491174956, -0.0014799450143693949`}}], 
                 
                 LineBox[{{-0.491218582243895, 
                  0.12054103014305714`}, {-0.4005910190331272, 
                  0.09830176594649845}}], 
                 
                 LineBox[{{-0.4877289029863713, 
                  0.2411773162415179}, {-0.40408069829065096`, 
                  0.19981407245299326`}}], 
                 
                 LineBox[{{-0.4833462365056595, 
                  0.3594110377131562}, {-0.40846336477136275`, 
                  0.3037289435863105}}], 
                 
                 LineBox[{{-0.47901795221829613`, 
                  0.4755153108765688}, {-0.4127916490587261, 
                  0.4097732630278535}}], 
                 
                 LineBox[{{-0.4751690276668439, 
                  0.59005850672483}, {-0.41664057361017837`, 
                  0.5173786597845479}}], 
                 
                 LineBox[{{-0.4718953326541356, 
                  0.7035417797599636}, {-0.4199142686228867, 
                  0.6260439793543698}}], 
                 
                 LineBox[{{-0.4691539771290063, 
                  0.8163203687360457}, {-0.422655624148016, 
                  0.7354139829832433}}], 
                 
                 LineBox[{{-0.4668624406807334, 
                  0.9286279489290805}, {-0.42494716059628884`, 
                  0.8452549953951639}}], 
                 
                 LineBox[{{-0.46493792845128445`, 
                  1.040615358451408}, {-0.4268716728257378, 
                  0.9554161784777921}}], 
                 
                 LineBox[{{-0.3496044211585829, -1.045571655461599}, \
{-0.32001290117384373`, -0.9570714744984009}}], 
                 
                 LineBox[{{-0.3512329745141128, -0.9339190782625568}, \
{-0.31838434781831393`, -0.8465754590924875}}], 
                 
                 LineBox[{{-0.35322898848084217`, -0.8220411022969742}, \
{-0.31638833385158444`, -0.7363048424531148}}], 
                 
                 LineBox[{{-0.3557127486739349, -0.7098120330083376}, \
{-0.3139045736584918, -0.6263853191367957}}], 
                 
                 LineBox[{{-0.3588454435108142, -0.5970146050245156}, \
{-0.31077187882161245`, -0.517034154515662}}], 
                 
                 LineBox[{{-0.36282209411823146`, -0.4832627166583187}, \
{-0.30679522821419514`, -0.4086374502769035}}], 
                 
                 LineBox[{{-0.3677976638795405, -0.36787140386434963`}, \
{-0.30181965845288616`, -0.30188017046591703`}}], 
                 
                 LineBox[{{-0.37359872301788793`, -0.24973055029266128`}, \
{-0.2960185993145387, -0.19787243143264982`}}], 
                 
                 LineBox[{{-0.3790277408919417, -0.12761537811597765`}, \
{-0.29058958144048497`, -0.09783901100437789}}], 
                 
                 LineBox[{{-0.3814662646650459, -0.0018832395853796526`}, \
{-0.28815105766738075`, -0.0014225569300203198`}}], 
                 
                 LineBox[{{-0.37915841567452085`, 
                  0.12391568300245562`}, {-0.2904589066579058, 
                  0.09492711308709997}}], 
                 
                 LineBox[{{-0.37377556866318945`, 
                  0.24615821841453345`}, {-0.2958417536692372, 
                  0.1948331702799777}}], 
                 
                 LineBox[{{-0.36796092560690197`, 
                  0.3644015666678925}, {-0.3016563967255247, 
                  0.29873841463157425`}}], 
                 LineBox[{{-0.36295535115207594`, 
                  0.47985650086406073`}, {-0.3066619711803507, 
                  0.40543207304036155`}}], 
                 
                 LineBox[{{-0.3589506113300072, 
                  0.5936454071162285}, {-0.3106667110024194, 
                  0.5137917593931494}}], 
                 
                 LineBox[{{-0.35579570797727694`, 
                  0.706464559239317}, {-0.3138216143551497, 
                  0.6231211998750165}}], 
                 
                 LineBox[{{-0.35329517457457277`, 
                  0.8187068052159316}, {-0.3163221477578539, 
                  0.7330275465033574}}], 
                 
                 LineBox[{{-0.351286568270499, 
                  0.9305930883847096}, {-0.3183307540619277, 
                  0.843289855939535}}], 
                 
                 LineBox[{{-0.34964847986252084`, 
                  1.042251102785053}, {-0.31996884246990587`, 
                  0.9537804341441471}}], 
                 
                 LineBox[{{-0.23388594973553664`, -1.0468571157427113`}, \
{-0.21353909365229443`, -0.9557860142172886}}], 
                 
                 LineBox[{{-0.23508383197050198`, -0.9354985484823533}, \
{-0.2123412114173291, -0.8449959888726911}}], 
                 
                 LineBox[{{-0.23658858715018136`, -0.8240192872710029}, \
{-0.21083645623764968`, -0.734326657479086}}], 
                 
                 LineBox[{{-0.23852749101943133`, -0.7123423389551258}, \
{-0.20889755236839974`, -0.6238550131900076}}], 
                 
                 LineBox[{{-0.24110140723789258`, -0.6003211658046201}, \
{-0.20632363614993848`, -0.5137275937355577}}], 
                 
                 LineBox[{{-0.24463384693957319`, -0.48765479748589585`}, \
{-0.20279119644825785`, -0.4042453694493263}}], 
                 
                 LineBox[{{-0.24963086281984287`, -0.3736730114815915}, \
{-0.19779418056798823`, -0.2960785628486752}}], 
                 
                 LineBox[{{-0.25669827179344173`, -0.2568003592031474}, \
{-0.19072677159438933`, -0.19080262252216368`}}], 
                 
                 LineBox[{{-0.26537977191307877`, -0.13372303416127854`}, \
{-0.1820452714747523, -0.091731354959077}}], 
                 
                 LineBox[{{-0.2703694202904744, -0.0019976223965903956`}, \
{-0.17705562309735667`, -0.0013081741188095768`}}], 
                 
                 LineBox[{{-0.26562573531001543`, 
                  0.12992182598549865`}, {-0.18179930807781564`, 
                  0.08892097010405693}}], 
                 
                 LineBox[{{-0.25694288099802515`, 
                  0.2532482246602144}, {-0.19048216238980595`, 
                  0.18774316403429675`}}], 
                 
                 LineBox[{{-0.24980871074957545`, 
                  0.3702478129533839}, {-0.19761633263825562`, 
                  0.29289216834608284`}}], 
                 
                 LineBox[{{-0.2447583975998144, 
                  0.48428628652878064`}, {-0.20266664578801666`, 
                  0.40100228737564164`}}], 
                 
                 LineBox[{{-0.2411906912684429, 
                  0.5969794039785908}, {-0.20623435211938818`, 
                  0.5104577625307871}}], 
                 
                 LineBox[{{-0.23859368374071774`, 
                  0.7090143227439095}, {-0.20883135964711333`, 
                  0.6205714363704239}}], 
                 
                 LineBox[{{-0.2366392463557632, 
                  0.8206989147384599}, {-0.2107857970320679, 
                  0.7310354369808291}}], 
                 
                 LineBox[{{-0.2351236842886138, 
                  0.9321827187145646}, {-0.21230135909921727`, 
                  0.8417002256096799}}], 
                 
                 LineBox[{{-0.23391803821166562`, 
                  1.0435441382354083`}, {-0.21350700517616544`, 
                  0.9524873986937918}}], 
                 
                 LineBox[{{-0.11783104531175434`, -1.0476874178270887`}, \
{-0.10740171913148117`, -0.9549557121329113}}], 
                 
                 LineBox[{{-0.1184719808590029, -0.9365365437418324}, \
{-0.1067607835842326, -0.8439579936132121}}], 
                 
                 LineBox[{{-0.11929068599117555`, -0.8253513081026687}, \
{-0.10594207845205994`, -0.7329946366474202}}], 
                 
                 LineBox[{{-0.12037179352471673`, -0.7141077905706884}, \
{-0.10486097091851876`, -0.622089561574445}}], 
                 
                 LineBox[{{-0.1218624241600203, -0.6027572533934992}, \
{-0.1033703402832152, -0.5112915061466786}}], 
                 
                 LineBox[{{-0.12404039675388916`, -0.4911880864446211}, \
{-0.10119236768934635`, -0.40071208049060114`}}], 
                 
                 LineBox[{{-0.12748873993636162`, -0.3791001921626707}, \
{-0.09774402450687389, -0.29065138216759595`}}], 
                 
                 LineBox[{{-0.1335891023179817, -0.26548038280019487`}, \
{-0.09164366212525378, -0.1821225989251162}}], 
                 
                 LineBox[{{-0.14559246419165547`, -0.14573572435607846`}, \
{-0.07964030025158003, -0.07971866476427707}}], 
                 
                 LineBox[{{-0.1592695295211059, -0.0023376379409176047`}, \
{-0.0659632349221296, -0.0009681585744823678}}], 
                 
                 LineBox[{{-0.14607996650182017`, 
                  0.14193560337880526`}, {-0.07915279794141533, 
                  0.07690719271075033}}], 
                 
                 LineBox[{{-0.13383886638614823`, 
                  0.2620479648901244}, {-0.09139389805708728, 
                  0.17894342380438677`}}], 
                 
                 LineBox[{{-0.1276217510101129, 
                  0.3757494420825292}, {-0.0976110134331226, 
                  0.2873905392169375}}], 
                 
                 LineBox[{{-0.12412054594484001`, 
                  0.4878619741819978}, {-0.10111221849839548`, 
                  0.39742659972242456`}}], 
                 
                 LineBox[{{-0.1219154382632948, 
                  0.5994407067630657}, {-0.1033173261799407, 
                  0.5079964597463121}}], 
                 
                 LineBox[{{-0.12040928540883805`, 
                  0.7107956586177422}, {-0.10482347903439747`, 
                  0.6187901004965912}}], 
                 
                 LineBox[{{-0.11931853815544403`, 
                  0.8220414774485174}, {-0.10591422628779146`, 
                  0.7296928742707716}}], 
                 
                 LineBox[{{-0.1184934601274718, 
                  0.9332280250330159}, {-0.1067393043157637, 
                  0.8406549192912286}}], 
                 
                 LineBox[{{-0.11784810138495766`, 
                  1.0443796998766088`}, {-0.10738466305827786`, 
                  0.9516518370525913}}], 
                 
                 LineBox[{{-0.0015910807982786102`, -1.0479796832805952`}, \
{-0.0014494047003613343`, -0.9546634466794048}}], 
                 
                 LineBox[{{-0.0015999190896659604`, -0.9369053727223964}, \
{-0.001440566408973984, -0.8435891646326481}}], 
                 
                 LineBox[{{-0.0016112772375502945`, -0.8258310556415425}, \
{-0.0014292082610896499`, -0.7325148891085465}}], 
                 
                 LineBox[{{-0.0016264120424194658`, -0.7147567273548772}, \
{-0.0014140734562204788`, -0.6214406247902562}}], 
                 
                 LineBox[{{-0.0016475827477083552`, -0.6036823780759134}, \
{-0.0013929027509315892`, -0.5103663814642644}}], 
                 
                 LineBox[{{-0.0016792994201637345`, -0.4926079844315097}, \
{-0.0013611860784762098`, -0.3992921825037125}}], 
                 
                 LineBox[{{-0.0017320556650480877`, -0.381533478456819}, \
{-0.0013084298335918566`, -0.28821809587344766`}}], 
                 
                 LineBox[{{-0.0018371758988588176`, -0.2704585865155167}, \
{-0.0012033095997811267`, -0.17714439520979441`}}], 
                 
                 LineBox[{{-0.002149419219659365, -0.15938112428052054`}, \
{-0.0008910662789805795, -0.066073264839835}}], 
                 
                 LineBox[{{-0.033105695475078106`, -0.035994479431117284`}, {
                  0.030065209976438162`, 0.03268868291571731}}], 
                 
                 LineBox[{{-0.0021684240386157187`, 
                  0.15607506759388956`}, {-0.0008720614600242259, 
                  0.06276772849566603}}], 
                 
                 LineBox[{{-0.0018419273162052245`, 
                  0.2671527574826581}, {-0.0011985581824347199`, 
                  0.17383863121185303`}}], 
                 
                 LineBox[{{-0.0017341674235653443`, 
                  0.3782276723068331}, {-0.0013063180750746, 
                  0.28491230899263364`}}], 
                 
                 LineBox[{{-0.0016804872877689634`, 
                  0.4893021838515508}, {-0.001359998210870981, 
                  0.3959863900528715}}], 
                 
                 LineBox[{{-0.0016483429839943998`, 
                  0.6003765794794668}, {-0.0013921425146455446`, 
                  0.5070605870299111}}], 
                 
                 LineBox[{{-0.0016269399846690362`, 
                  0.7114509296351702}, {-0.0014135455139709084`, 
                  0.6181348294791632}}], 
                 
                 LineBox[{{-0.0016116651136589759`, 
                  0.822525258367746}, {-0.0014288203849809685`, 
                  0.7292090933515429}}], 
                 
                 LineBox[{{-0.0016002160573962549`, 
                  0.9335995756989304}, {-0.0014402694412436895`, 
                  0.8402833686253142}}], 
                 LineBox[{{-0.0015913154394940452`, 
                  1.0446738864083644`}, {-0.0014491700591458994`, 
                  0.9513576505208357}}], 
                 
                 LineBox[{{0.10450033341981624`, -0.9549402791145013}, {
                  0.11465146002613937`, -1.0477028508454989`}}], 
                 
                 LineBox[{{0.10387599951938638`, -0.8439385633053138}, {
                  0.11527579392656923`, -0.9365559740497307}}], 
                 
                 LineBox[{{0.10307824768696959`, -0.7329694489337919}, {
                  0.11607354575898604`, -0.8253764958162969}}], 
                 
                 LineBox[{{0.10202431179834258`, -0.6220556680636677}, {
                  0.11712748164761304`, -0.7141416840814656}}], 
                 
                 LineBox[{{0.10057006080098516`, -0.5112435984232436}, {
                  0.11858173264497046`, -0.6028051611169342}}], 
                 
                 LineBox[{{0.09844252390672065, -0.40063967593119915`}, {
                  0.12070926953923496`, -0.4912604910040231}}], 
                 
                 LineBox[{{0.09506575286249544, -0.29053121876572713`}, {
                  0.12408604058346019`, -0.37922035556453954`}}], 
                 
                 LineBox[{{0.08905870155888032, -0.18189648252260335`}, {
                  0.1300930918870753, -0.2657064992027077}}], 
                 
                 LineBox[{{0.07705454274850079, -0.07927055759457288}, {
                  0.14209725069745482`, -0.14618383152578265`}}], 
                 
                 LineBox[{{0.06292303209653109, -0.0009491628472317751}, {
                  0.1562287613494245, -0.0023566336681681973`}}], 
                 
                 LineBox[{{0.07656031958190018, 0.0764523718622673}, {
                  0.14259147386405546`, 0.1423904242272883}}], 
                 
                 LineBox[{{0.08881165575963826, 0.17871254800093692`}, {
                  0.13034013768631736`, 0.2622788406935742}}], 
                 
                 LineBox[{{0.0949352655272108, 0.2872683322206063}, {
                  0.12421652791874484`, 0.3758716490788604}}], 
                 
                 LineBox[{{0.09836416093238201, 0.39735320613111147`}, {
                  0.12078763251357359`, 0.4879353677733108}}], 
                 
                 LineBox[{{0.10051831479258173`, 0.5079480115851579}, {
                  0.11863347865337387`, 0.59948915492422}}], 
                 LineBox[{{0.10198775107174968`, 0.6187558828376015}, {
                  0.11716404237420594`, 0.710829876276732}}], 
                 
                 LineBox[{{0.10305110293754667`, 0.7296674779446244}, {
                  0.11610069050840893`, 0.8220668737746646}}], 
                 
                 LineBox[{{0.10385507373536976`, 0.840635347235435}, {
                  0.11529671971058585`, 0.9332475970888094}}], 
                 
                 LineBox[{{0.1044837212053225, 0.9516363035056454}, {
                  0.1146680722406331, 1.0443952334235547`}}], 
                 
                 LineBox[{{0.21063042926689046`, -0.9557567633050523}, {
                  0.23071364312366074`, -1.0468863666549477`}}], 
                 
                 LineBox[{{0.20944626959362814`, -0.8449596634682948}, {
                  0.23189780279692304`, -0.9355348738867497}}], 
                 
                 LineBox[{{0.20795789270163773`, -0.7342804832860588}, {
                  0.23338617968891348`, -0.82406546146403}}], 
                 
                 LineBox[{{0.20603848881134812`, -0.6237946772423949}, {
                  0.23530558357920303`, -0.7124026749027385}}], 
                 
                 LineBox[{{0.2034872335229862, -0.5136461873400673}, {
                  0.23785683886756498`, -0.6004025722001105}}], 
                 
                 LineBox[{{0.19997881509416437`, -0.4041317188195042}, {
                  0.2413652572963868, -0.487768448115718}}], 
                 
                 LineBox[{{0.1949987908421888, -0.29591594252450726`}, {
                  0.24634528154836238`, -0.3738356318057594}}], 
                 
                 LineBox[{{0.18791283096034567`, -0.19057771182177502`}, {
                  0.25343124143020546`, -0.2570252699035361}}], 
                 
                 LineBox[{{0.1791213482011939, -0.09150161215120751}, {
                  0.26222272418935727`, -0.13395277696914804`}}], 
                 
                 LineBox[{{0.17401517293172528`, -0.0013034246708888998`}, {
                  0.2673288994588259, -0.002002371844511073}}], 
                 
                 LineBox[{{0.17887062680725585`, 0.0886939477781221}, {
                  0.26247344558329533`, 0.13014884831143347`}}], 
                 
                 LineBox[{{0.18766654140227754`, 0.1875165746675114}, {
                  0.25367753098827367`, 0.2534748140269998}}], 
                 LineBox[{{0.194821129415808, 0.29272780173019913`}, {
                  0.24652294297474317`, 0.3704121795692676}}], 
                 
                 LineBox[{{0.19985494400810228`, 0.400887446862805}, {
                  0.2414891283824489, 0.4844011270416173}}], 
                 
                 LineBox[{{0.2033986626790434, 0.5103755839497234}, {
                  0.23794540971150777`, 0.5970615825596544}}], 
                 
                 LineBox[{{0.20597292702801678`, 0.6205105895184784}, {
                  0.2353711453625344, 0.7090751695958551}}], 
                 
                 LineBox[{{0.20790776688711313`, 0.7309889132995786}, {
                  0.23343630550343805`, 0.8207454384197104}}], 
                 
                 LineBox[{{0.20940686383098553`, 0.8416636529458178}, {
                  0.23193720855956562`, 0.9322192913784266}}], 
                 
                 LineBox[{{0.21059871567616878`, 0.9524579674300807}, {
                  0.23074535671438243`, 1.0435735694991193`}}], 
                 
                 LineBox[{{0.31709343368464193`, -0.9570311939145427}, {
                  0.34644291765050483`, -1.0456119360454572`}}], 
                 
                 LineBox[{{0.31547475398810415`, -0.8465264563411016}, {
                  0.3480615973470426, -0.9339680810139429}}], 
                 
                 LineBox[{{0.31348935527780947`, -0.7362443135730243}, {
                  0.35004699605733736`, -0.8221016311770646}}], 
                 
                 LineBox[{{0.3110162333318993, -0.626309420148605}, {
                  0.3525201180032475, -0.7098879319965284}}], 
                 
                 LineBox[{{0.30789232576963915`, -0.5169378631712022}, {
                  0.3556440255655076, -0.5971108963689756}}], 
                 
                 LineBox[{{0.303918236563061, -0.4085152612661305}, {
                  0.3596181147720858, -0.4833849056690917}}], 
                 
                 LineBox[{{0.29893001874485203`, -0.3017300412646374}, {
                  0.36460633259029473`, -0.36802153306562924`}}], 
                 
                 LineBox[{{0.2930879346857078, -0.19770888694954794`}, {
                  0.37044841664943895`, -0.24989409477576316`}}], 
                 
                 LineBox[{{0.28759048840442264`, -0.09771663262996481}, {
                  0.37594586293072413`, -0.1277377564903907}}], 
                 LineBox[{{0.2851105826377187, -0.0014204460218206923`}, {
                  0.3784257686974281, -0.0018853504935792801`}}], 
                 
                 LineBox[{{0.28745777116303634`, 0.09480725852081635}, {
                  0.3760785801721105, 0.12403553756873924`}}], 
                 
                 LineBox[{{0.2929093426742188, 0.19466981353408508`}, {
                  0.37062700866092796`, 0.24632157516042608`}}], 
                 
                 LineBox[{{0.29876601018224636`, 0.2985875393360332}, {
                  0.3647703411529004, 0.3645524419634335}}], 
                 
                 LineBox[{{0.30378488191041453`, 0.40530904499662623`}, {
                  0.35975146942473224`, 0.47997952890779605`}}], 
                 
                 LineBox[{{0.307787355073509, 0.5136947745276723}, {
                  0.35574899626163775`, 0.5937423919817055}}], 
                 
                 LineBox[{{0.3109335760620979, 0.6230447720472324}, {
                  0.3526027752730488, 0.706540987067101}}], 
                 
                 LineBox[{{0.31342349102656347`, 0.7329666214715785}, {
                  0.3501128603085833, 0.8187677302477104}}], 
                 
                 LineBox[{{0.3154214673745412, 0.8432405551309657}, {
                  0.34811488396060564`, 0.9306423891932787}}], 
                 
                 LineBox[{{0.3170496553978477, 0.9537399264912261}, {
                  0.3464866959372991, 1.042291610437974}}], 
                 
                 LineBox[{{0.4239917988627505, -0.9586505777550561}, {
                  0.4617368314169918, -1.0439925522049438`}}], 
                 
                 LineBox[{{0.42208300378814456`, -0.8484726098532529}, {
                  0.4636456264915978, -0.9320219275017917}}], 
                 
                 LineBox[{{0.4198087417663625, -0.7386091269237036}, {
                  0.4659198885133798, -0.8197368178263854}}], 
                 
                 LineBox[{{0.4170852578143079, -0.6292087644657395}, {
                  0.4686433724654345, -0.7069885876793939}}], 
                 
                 LineBox[{{0.4138274697651335, -0.5205025146470549}, {
                  0.47190116051460884`, -0.5935462448931229}}], 
                 
                 LineBox[{{0.4099867454599603, -0.41284343106474636`}, {
                  0.4757418848197821, -0.47905673587047587`}}], 
                 LineBox[{{0.4056480867818514, -0.30673440539050767`}, {
                  0.48008054349789103`, -0.363017168939759}}], 
                 
                 LineBox[{{0.4012214739818352, -0.2027572802177276}, {
                  0.4845071562979071, -0.2448457015075835}}], 
                 
                 LineBox[{{0.397647965973821, -0.10121777279036905`}, {
                  0.4880806643059213, -0.12423661632998649`}}], 
                 
                 LineBox[{{0.39620646803544657`, -0.0014787576201492308`}, {
                  0.48952216224429573`, -0.0018270388952507416`}}], 
                 
                 LineBox[{{0.397568253440756, 0.09822980227243765}, {
                  0.4881603768389864, 0.12061299381711794`}}], 
                 
                 LineBox[{{0.40109670912107365`, 0.1997002114521646}, {
                  0.48463192115866865`, 0.24129117724234656`}}], 
                 
                 LineBox[{{0.4055143820714747, 0.303606308467878}, {
                  0.4802142482082677, 0.3595336728315887}}], 
                 
                 LineBox[{{0.40986380846883347`, 0.409660175916194}, {
                  0.47586482181090894`, 0.47562839798822826`}}], 
                 
                 LineBox[{{0.4137216222112018, 0.5172811235429199}, {
                  0.4720070080685405, 0.590156042966458}}], 
                 
                 LineBox[{{0.41699640194485194`, 0.6259620144069223}, {
                  0.46873222833489037`, 0.7036237447074111}}], 
                 
                 LineBox[{{0.4197346091355292, 0.7353455554387603}, {
                  0.4659940211442132, 0.8163887962805286}}], 
                 
                 LineBox[{{0.4220209822477825, 0.8451977241831604}, {
                  0.4637076480319599, 0.9286852201410841}}], 
                 
                 LineBox[{{0.4239395562108787, 0.9553679253671933}, {
                  0.4617890740688637, 1.0406636115620067`}}], 
                 
                 LineBox[{{0.5313738524228594, -0.9604947303865199}, {
                  0.5765470568014784, -1.0421483995734802`}}], 
                 
                 LineBox[{{0.5293099297362032, -0.8506324148380733}, {
                  0.5786109794881346, -0.9298621225169712}}], 
                 
                 LineBox[{{0.526924762355716, -0.7411459245591032}, {
                  0.580996146868622, -0.8172000201909856}}], 
                 LineBox[{{0.5241791822801517, -0.6321812591322056}, {
                  0.5837417269441861, -0.7040160930129278}}], 
                 
                 LineBox[{{0.5210592575705624, -0.5239412079963474}, {
                  0.5868616516537755, -0.5901075515438305}}], 
                 
                 LineBox[{{0.5176157403425617, -0.4166918065866647}, {
                  0.5903051688817761, -0.4752083603485575}}], 
                 
                 LineBox[{{0.5140311057662251, -0.310738013404481}, {
                  0.5938898034581128, -0.3590135609257856}}], 
                 
                 LineBox[{{0.5106993965214716, -0.2063239088143623}, {
                  0.5972215127028662, -0.2412790729109488}}], 
                 
                 LineBox[{{0.5082393246410881, -0.1034232547737727}, {
                  0.5996815845832496, -0.12203113434658283`}}], 
                 
                 LineBox[{{0.5073024902338304, -0.0015136809771401736`}, {
                  0.6006184189905074, -0.0017921155382597989`}}], 
                 
                 LineBox[{{0.5081867014880203, 0.10037990777430815`}, {
                  0.5997342077363177, 0.11846288831524744`}}], 
                 
                 LineBox[{{0.5106101192550098, 0.20324074010786825`}, {
                  0.597310789969328, 0.2377506485866429}}], 
                 
                 LineBox[{{0.5139257177065231, 0.3076074185365977}, {
                  0.5939951915178148, 0.35553256276286904`}}], 
                 
                 LineBox[{{0.5175097277562805, 0.413518189838816}, {
                  0.5904111814680573, 0.4717703840656063}}], 
                 
                 LineBox[{{0.5209609413688998, 0.5207334783270277}, {
                  0.5869599678554379, 0.5867036881823502}}], 
                 
                 LineBox[{{0.5240916902970632, 0.6289481876255826}, {
                  0.5838292189272747, 0.7006375714887509}}], 
                 
                 LineBox[{{0.5268484097288996, 0.7378945272342312}, {
                  0.5810724994954382, 0.8138398244850578}}], 
                 
                 LineBox[{{0.5292438010215578, 0.8473678438641858}, {
                  0.5786771082027802, 0.9265151004600588}}], 
                 
                 LineBox[{{0.5313166361275032, 0.9572206400076995}, {
                  0.5766042730968346, 1.0388108969215006`}}], 
                 
                 LineBox[{{0.6392422768075439, -0.9624550492510608}, {
                  0.6908709113613896, -1.0401880807089392`}}], 
                 
                 LineBox[{{0.6371323840026858, -0.8528678155957813}, {
                  0.6929808041662476, -0.9276267217592633}}], 
                 
                 LineBox[{{0.6347655975828671, -0.7436843748777977}, {
                  0.6953475905860663, -0.8146615698722912}}], 
                 
                 LineBox[{{0.6321396539478662, -0.6350311682525787}, {
                  0.6979735342210671, -0.7011661838925547}}], 
                 
                 LineBox[{{0.6292872466380373, -0.5270654277750988}, {
                  0.7008259415308962, -0.586983331765079}}], 
                 
                 LineBox[{{0.6263041467530166, -0.4199648405939204}, {
                  0.7038090414159169, -0.4719353263413018}}], 
                 
                 LineBox[{{0.623383260957668, -0.3138920237399426}, {
                  0.7067299272112655, -0.35585955059032404`}}], 
                 
                 LineBox[{{0.6208351554276937, -0.2089203153544246}, {
                  0.7092780327412398, -0.2386826663708865}}], 
                 
                 LineBox[{{0.6190545686001487, -0.10492984419472247`}, {
                  0.7110586195687848, -0.12052454492563307`}}], 
                 
                 LineBox[{{0.6183985661116995, -0.0015369367382896408`}, {
                  0.7117146220572339, -0.0017688597771103318`}}], 
                 
                 LineBox[{{0.619017400188559, 0.1018465946284162}, {
                  0.7110957879803744, 0.1169962014611394}}], 
                 
                 LineBox[{{0.6207690528234175, 0.20581241438559938`}, {
                  0.709344135345516, 0.23517897430891177`}}], 
                 
                 LineBox[{{0.6233002166905685, 0.31075197037114166`}, {
                  0.7068129714783649, 0.3523880109283251}}], 
                 
                 LineBox[{{0.6262150688757135, 0.41679238294420234`}, {
                  0.70389811929322, 0.4684961909602199}}], 
                 
                 LineBox[{{0.6291996650364761, 0.5238645104901752}, {
                  0.7009135231324574, 0.5835726560192025}}], 
                 
                 LineBox[{{0.63205774235285, 0.6318071128421685}, {
                  0.6980554458160835, 0.6977786462721649}}], 
                 
                 LineBox[{{0.6346911321132971, 0.7404422730276118}, {
                  0.6954220560556365, 0.8112920786916772}}], 
                 LineBox[{{0.6370657182488484, 0.84961191428453}, {
                  0.693047469920085, 0.9242710300397144}}], 
                 
                 LineBox[{{0.6391830341530615, 0.9591886655871319}, {
                  0.6909301540158718, 1.036842871342068}}], 
                 
                 LineBox[{{0.7475683023756277, -0.9644445353350793}, {
                  0.8047371647379014, -1.0381985946249206`}}], 
                 
                 LineBox[{{0.7454911145475938, -0.855078388383746}, {
                  0.8068143525659354, -0.9254161489712985}}], 
                 
                 LineBox[{{0.743224552513133, -0.7461166580835307}, {
                  0.809080914600396, -0.8122292866665582}}], 
                 
                 LineBox[{{0.7407908808991724, -0.6376598127888589}, {
                  0.8115145862143567, -0.6985375393562745}}], 
                 
                 LineBox[{{0.7382462542226119, -0.5298198976785112}, {
                  0.8140592128909172, -0.5842288618616666}}], 
                 
                 LineBox[{{0.7356968650241025, -0.42270556319616914`}, {
                  0.8166086020894265, -0.46919460373905314`}}], 
                 
                 LineBox[{{0.7333119778093409, -0.3163918842122637}, {
                  0.8189934893041881, -0.35335969011800294`}}], 
                 
                 LineBox[{{0.7313210966534567, -0.21087441254033235`}, {
                  0.8209843704600723, -0.23672856918497873`}}], 
                 
                 LineBox[{{0.7299790187428014, -0.10602099730239395`}, {
                  0.8223264483707278, -0.11943339181796159`}}], 
                 
                 LineBox[{{0.729494667283808, -0.0015535350355970262`}, {
                  0.822810799829721, -0.0017522614798029463`}}], 
                 
                 LineBox[{{0.7299514311760724, 0.10290797500390525`}, {
                  0.8223540359374565, 0.11593482108565034`}}], 
                 
                 LineBox[{{0.731270554051833, 0.20774520477749325`}, {
                  0.8210349130616961, 0.23324618391701787`}}], 
                 
                 LineBox[{{0.7332457808284267, 0.3132402762779898}, {
                  0.8190596862851023, 0.34989970502147694`}}], 
                 
                 LineBox[{{0.7356225048241924, 0.41952966862815255`}, {
                  0.8166829622893365, 0.46575890527626973`}}], 
                 LineBox[{{0.7381697715479989, 0.5266209889256313}, {
                  0.8141356955655302, 0.5808161775837466}}], 
                 
                 LineBox[{{0.740716361857319, 0.6344408024921576}, {
                  0.8115891052562099, 0.6951449566221759}}], 
                 
                 LineBox[{{0.7431543539551686, 0.742880936834098}, {
                  0.8091511131583605, 0.8088534148851909}}], 
                 
                 LineBox[{{0.7454263422100376, 0.8518291681051497}, {
                  0.8068791249034916, 0.9220537762190949}}], 
                 
                 LineBox[{{0.7475092666578974, 0.9611845748185205}, {
                  0.8047962004556317, 1.0348469621106795`}}], 
                 
                 LineBox[{{0.8563057460918971, -0.9664001114487967}, {
                  0.9181919999662274, -1.0362430185112033`}}], 
                 
                 LineBox[{{0.8543122635835181, -0.8571993522588855}, {
                  0.9201854824746065, -0.9232951850961589}}], 
                 
                 LineBox[{{0.8521904982294929, -0.7483850627708764}, {
                  0.9223072478286316, -0.8099608819792127}}], 
                 
                 LineBox[{{0.8499760823429685, -0.6400322531467261}, {
                  0.924521663715156, -0.6961650989984073}}], 
                 
                 LineBox[{{0.847732821828861, -0.5322157780576873}, {
                  0.9267649242292637, -0.5818329814824905}}], 
                 
                 LineBox[{{0.8455603362162478, -0.42499654152864236`}, {
                  0.9289374098418768, -0.4669036254065798}}], 
                 
                 LineBox[{{0.843596461722519, -0.3183999864712101}, {
                  0.9309012843356056, -0.3513515878590566}}], 
                 
                 LineBox[{{0.8420077647358087, -0.2123897801329003}, {
                  0.932489981322316, -0.2352132015924108}}], 
                 
                 LineBox[{{0.8409627882299215, -0.10684643139981621`}, {
                  0.933534957828203, -0.11860795772053934`}}], 
                 
                 LineBox[{{0.8405907819191623, -0.0015659766736354497`}, {
                  0.9339069641389623, -0.001739819841764523}}], 
                 
                 LineBox[{{0.8409415267332027, 0.10371046988756541`}, {
                  0.933556219324922, 0.11513232620199018`}}], 
                 
                 LineBox[{{0.8419680323298891, 0.20924267311037809`}, {
                  0.9325297137282355, 0.23174871558413304`}}], 
                 
                 LineBox[{{0.8435428958581656, 0.31523681640470164`}, {
                  0.9309548501999589, 0.347903164894765}}], 
                 
                 LineBox[{{0.8454981026162253, 0.42181502409160854`}, {
                  0.9289996434418994, 0.4634735498128137}}], 
                 
                 LineBox[{{0.8476665505418758, 0.5290158553101506}, {
                  0.9268311955162489, 0.5784213111992272}}], 
                 
                 LineBox[{{0.8499093347372412, 0.6368153188783809}, {
                  0.9245884113208833, 0.6927704402359524}}], 
                 
                 LineBox[{{0.8521256915709242, 0.7451532190054679}, {
                  0.9223720544872003, 0.806581132713821}}], 
                 
                 LineBox[{{0.8542508473183149, 0.8539548791192758}, {
                  0.9202468987398097, 0.9199280652049687}}], 
                 
                 LineBox[{{0.8562484555050257, 0.9631451628673795}, {
                  0.918249290553099, 1.0328863740618206`}}]}}}}, {
             GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[
                    Hold[
                    Nearest[CompressedData["
1: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
dMEKwcRVncT+vBJubZV6wIX/AXL3EJA=
                    "] -> CompressedData["
1:eJwVWXlUzO8XLim0UESE0CIK7WnjpkQkS3tpIymktNkp0kIrKiQVJWlTadE2
t4WWaVVpmbZpZsxoxsx3lL3U7/P7p3tOn/O+9773Pue5z3Nm00k/K88FAgIC
+cSf/8czssZD3TF8XB7CfhJNRMra7FCpfzzMetIwED/Lw8Qae8NbiXz8yDW7
O3KVi2EDF2uKuDykNHQqTt/k4OoExcxbqXx08JWSLBuaxOvqo1/fjPJQ73io
senCLzgb3CH8KouPQctvy2jqMLH0VLSyZwcPBbpjhnkxDLQPy5x+k89HSZ8O
3akYGs4dGLewruWheTzJ1X7NBK7s+zC1p5SPdmcd7vvVj2JYToqlWiEP5UmV
Y0HWw5jMIJM4VXyU+K7hKX6iH0MiE8qGM3ioeZpyZOv1PnTxXBOpVsfH9Zi5
YH6qA6fDpxVtknk47XDm21KHNuxVu+uc3Ei8z+zUbdQgoci3FVcj4nl4oTjt
yvPwalTQ9HFrfc/HUk/nh832zuj51TJoYywPLTUfetV8dMTc4yemXxHnO7fG
7FI/Ugv2TzwOeRDni4+mpzHKq0C7pXn0KJF/rXpR5Z9bHbC3LvmSFJE/aau/
ii+fDLKCijlrqvl4d+Hluaot/XD58BgthKg/8mJaobJ5HzQF6RZcJt4fE5CQ
7XB3FDZ6VQ7WF/Cwuj+6Xm/DMPQm0oc5RP++v3Y/J+xPAxFlt2vDNTxsP6Ge
LTtPhSyJziWfif7Pf07/dXINE07p3Nsw2c7DEfGgS4kBDEi5r+SHxPx4N+U3
CpIm4fL2YRttYn5ix4PyOyZZoCvQql1LzF9XMSfF2I0LcDSxVY+Y/3iqf7zn
KQ68NJYWEI3l4/DMt9/NN/ng0fVPM53AzdWid0ncCR60kWUG9K5xsYEHp42I
ewo+prnvD+GgaZUM7CDuydgu/iIymosLOj/KbCPikG9u0m9fDubSTJIziUgJ
vGVETeXiAcfnR8rZk5i2RWcm3YWD+y7wBUymWfhnssLnVyEXb0nIh13bx8SQ
kjlylAUHp/u++r28xsD3Df5799dz8UH67vvUZzQsHdo7rafPwebjlgvPLJ7A
S2Ol1+Z7iPxqcbQu6igKkgRrQpU5ePFPWKy09jCOVf0mC9C5mOea97rmWj8+
naj1CZHhYPKMu9iVE324SHvhFP8/LiocFZswle3EC94lZvGiHPzaLLiCrN6G
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
                    
                    "]]]][#/{1.8886343710290623`, 1.9993373334446}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, DisplayFunction -> Identity, 
              AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, Frame -> True, FrameLabel -> {
                FormBox["x", TraditionalForm], 
                FormBox["y", TraditionalForm]}, FrameStyle -> Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Automatic, ImageSize -> 250, 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "TransparentPolygonMesh" -> True}, 
              PlotRange -> {{-1.001385498, 
               0.8872488730290623}, {-1.00132156498, 0.9980157684646}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.05], 
                 Scaled[0.05]}, {
                 Scaled[0.05], 
                 Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Fewer points", "input" -> "SlopeField__Fewer points"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More points", "input" -> "SlopeField__More points"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Slope field", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Vector field", "input" -> 
           "SlopeField__Vector field"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Slope field", "input" -> "SlopeField__Slope field"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Direction field", "input" -> 
           "SlopeField__Direction field"}, {}]}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of sample individual solution", "scanner" -> 
     "ODE", "id" -> "PlotsOfSampleIndividualSolution", "position" -> "700", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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

                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2516165#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm]}, AxesOrigin -> 
                    NCache[{Rational[1, 4] Pi, 1.}, {0.7853981633974483, 1.}],
                     AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "(", "1", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], TraditionalForm], PlotRange -> {All, All}, 
                    PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
f2D1+QluYuv9PrFyqnSqOdeEk3jtY95zqeCPV3ayE4um3s3br0anHoY1zpP9
e+ER1+JE8N7nEf+IjbbcLm8AuyiZ/iXWaeVvFlenUwHsq2aIT5qrfJkAPylW
nCSui2IwmWrQqeV7z08QV0mICN8BNz1ZO0b8YlOz1YmddCr2+csPxF861YOH
wLVKtAHiajvp7F0UnYoW03xHLD955mEhePHvhl5ii+v7vnJoQryV8e0mPkfT
1XkDvrLX9BWxueL8jWwtyBesn18Qr3B8GLd5F6zPQr4O4p684rQGHTplb9fX
Rvz1ZF2LqS7ki2McT4hTjy2IfNxDp6bVYvHfL0rq7inWo1MOJheeEa+cC8s+
pg/xhFPqJXFJ5ZS3mgGdUvqsip9/J0dt12JDiA+a7Xg/RNWC644n2MWsvoeY
79a+9c/Bg3Ev+ojvvdZecdEI5r+c7iBxeN94/F+wQsBNHJ+4+UVsjsZwfS/L
DhP7rslcImVCp/qUQseJNfbxxSeCw+P34PMdRhJLeOhgD//NeD1WzOlJ3DeF
9VGnOU08OWnlYWQO8V3sODO5/uYbo+bLwdbCvxYT945KXOKzoFPCAkk4Pwz8
n74aBH94wcD55Lv0lttRS/CWC2uJ+T3fMWdYw3x6Vq1F/KC/iHfEHuaThkcS
ccDtgNjVDpBfQ/qTcf6tHPqrB+ZWNknFeJCSPFwGXjH5Xz39o9fxQZAjnTpt
zHEN69fhpgSOgzB/39+uwvpU4Oq1ba4wv7M932H9NblLyh38o/bJADGjI/b2
JWLujVhf8eV/a5wDf5UYxPpKRFt2vM0N5uvnbZPEQwGnrOw8YH3TlPB5nRJG
TkmMN53KETf5r74Stf4wAVZTNcP6qsDknICZD9RLvAa4/6CpHpQi5AvrnyaB
+zELCUpXbh+iU2wGnhg/XygMj/EeplOvT4vhfs/Ucy7FUPAd9RfYj206OPxa
x49OvWNaivGZWy1Gof8Indo4NoX7R5vfbUqmjkK+W22G+0txBy1/5IPNTl7F
/dlvlyRq/I7RKaau1bi/8S3m6Zq3YDbZnbi/sbZr6qyqP52avWyN93+W/X3s
yhoA9Vu6I9Z3lxZlGXSCnUM34X59+YC/atZxOtXN9gDziXqwuaJ7IJ0q+cWB
9Z3kI8UdCkF0SoJVCPvTpBTOUvtQOpXAnor3j47bJTbFh9OpoTNKqsRnljxf
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
bvqM6/vQTcN6OfBl+xRc//sLWOYMwFbRO/B+12k91vBocINzJD4vVGpvf2oa
vGnPT6w3+Mxsk7o/0Sn6PlesJ4p+n36ROQLxyrn3B4k/ydEavDXguvo8jFcn
Kzfufw0WnziK8UxwIWWU4zOd0i1aM0Y87FbDHA5mcarA/Uyr+b1ajqOwPr7X
viBmGZZ9nQE2s/7SgfnsdIdbJ1hNelMbcR2fXZLWGFy/3HGsBzoWOj9LjEP9
t0y1kpjdZSjcDpz05e8t4n9lVasvgHNcnmM9oMFTZbDkC8S/hzcKMH9nLnkw
Ds6wk8oktug02r9uAo5ntz/m/yUC+//YgjfNvcD93s1T7SpPwQcO12I/Inxo
4VHZVzp1KMkM80v+k5Oeo+C+1Wtxf7nL6THn2m8QH3LncH/A1K5ofwq423QC
89Xy+KIS5u8wX5/z4f77Kd7WuWPgT4anAonFNjBbjoAvzq/HfOj+xbZs3ySd
UhFYivm+7Wzn0jZw2dONh7CfkXPz2vED3t8wEvN9LavAs2JwzlNezMdKO74o
CNMgvod/xHxdSuvNTAS/uzCK+fy87diSebCWrgTm/+hRp/EPdMgf6pq4P9G6
1br7EQPi3x8Fe+I1No09cdN0Sk8qFPcr7DxkOMxm4N9nPbEjXrDOV972C+ov
uSgH4t3zeUdW/6ZTNLEJ/PuD0bKNd/+AFy3/i5+fdX8b+8AfOsWacBOf52Ob
/FZt8hfW26cGL9xvCH7i3gRep/Ib6wlJ1bGu67OQnyr6cDxY2mQS+f5Bv6Qa
gePlaXlePxb8JUUfx/Oa0JPn3nN0KvqYFu7PuBZdSn8PFnc7jPVY/IdEB5N5
OiUwdR/vF/T9+TCrsAD15O3beH8g6bi63R8mBrXajI77Q38nr+a5MDOoq/sa
8O8tTp1t+voc3ORwDeuHiQKVM3ksDKp5+AbWBw/MuN8bLmZQZ87n3MN6LNOd
4yobg9ptUoTrYfmVuyF7uBjUe+t92A+M50Y/CQMv1i3C/vDKLJNAJfiTxyze
zx9sX35PhJtBOYnm4fM7Qdpeixjgps007EcyvFXuZa9gUHY9Mfi8X2aHZTGD
lwHHbYL3E79LbueS4mNQKw3TMb7IH2z1tydO6cXnH+pSZjWfgINu2mO8eq5T
MZyzmkHlLbHF/XWbNmMDfQEGZbqbA593WentlZ0rzKCEr/Hh3zPKORzm7wbz
CErifrhhg2QahwiDypHfgvH18euCxECwDrcWxt/zz/7EGonC8QXpHMF+78G3
q7/XMCj7L08w3nd+6Ct1Wcug9GYTcb97vj/pwQvw6Q4dzMe5fQYj+WIMSs76
HOaT8FaRfebiDMp1fQTmp792OsEPwBOifZi/Fg1su7JRgkH5aUpgfuuQ8GHM
gf/ci8P8d17+jpiXJIPS9i3A/Pjr1iPzN+CVC+WYP2+n7nxQsp5BTYZdTML8
MfxeIXIDgxrIVU4m3lt1tdJ6I4Oy6D2Pf88ZL3R2p5wU/Dwl7zzWO9IZbxdL
MyjFHR74/QWn0jevr5RhUFXLWNKwnrngc81xE4OaazTGnx8VMzqitJlB6Uf7
4e/HP7c14JSD4+vYju/fWn5BfgQctejKOWK9QSaxOnkG9TCnIJF4S6xn9oYt
DOrzwdN4/Mre2cKp4HdsBnh+w8XZOXPgWI0ZrC9qPL3EvRQYVEf5WRwflXaW
kjfgWG7mMzh/vnsqam5lUEVsjji+TFzZ5vzbGFTliQ6sd9KWFAsZg81s3mC+
dzfxGokCB+ztweuzamBR6CR4T9gTzPcGftfKHisyqJFgK8z3Ffv1w2bBUTJS
eP2HavINFbYzqIwiBt4feNp7/Fs2WObjUbwfULc5SilAiUG9lRTA/C4q1rqs
BCwpfBvnV/uN+qEh8GjCTtz/14xqSzBUhvO7o4vz9eSE7jfxHQyKY/4v5vOF
XxtbbcAsxZZYb5o8eJB7Dnw07AbWo1mhzDZ/wff8t+L+/gPd3y+6VBiUUMwE
1reR0UG32FQZFM1yMe7nX7pcck4DbDDLh/v5rC6bzIvB5/PEcD1lDV8ZjFBj
UAXqr3A9ajvvEt6iwaC8i3Nw/+KyQSKPIXjVbw98fmhOhWWJO7iCdwvuZ6ze
cpyeBb5ZeQ/3f66cDepg2wnnZ1+J+xXvXCZPD4FlLHZgvKibYwv/C84cHcT7
efqFJsf5KAYVoxiN8SVT1sXdEFz7qwX3I9ayFxvUgOt+bcLvw4iXk9V5Bd6j
2IzPA0179mt8B/OJ7cXngSaFmxQkNBnUAaYj+LwOR3yRcDKY7+007jcEOKWt
LgHvdXiI+w3lpjdXPAZf2ZSK+w1fQ53ZZ8HdqTtwv2E/7+Qvdy0Y30bNWcx/
r0KHdmrD+J6r/kLMeuJw5+QuBlUY8qmdeFH9vS5JHQa1rk4Rn/8+U3bv9X5w
cV0G9mO2pT19rWD3vOQ6zNe5iZNXdjOoxms6WD/kdIf/fANeCBTC+sFjSGJu
mS6D0rRjwnguH3aOKwisu/Bff6jkPKhiuodB9WqXXyROvR2oGwPO3bYY6we3
6Ud768DeMR7YbxYGhh/ZqMegUqcP4P3+XQO+lQvgnuw/mH/obmUt2/UZ1GGF
VryffW7Z9R4fsGjwNbyf/+xe2UIP2KQlGuuHxVu0bMoNGNTg1DTuD0xSHWdF
DBlUUkgU9tulLlIPzoLvVe3xJa5pPMCYBqfP7ML8GhvsKnvQCK5HSiDuD6RV
ans8B0u/HsT8bJk6U6BizKAceMJwP0BHPWKsACx92Rjrg943Q7IrTeD8Gyyw
Pnjtsq5+Asy04actXh+XB7aPTBmUTae9NbHCTAVzthmDKtWL3Yf1otai6gBz
BsUq5GtJvC6pXmPDXji/n+ZoWbfpqR5LBjXTOGyF/bDjug/l+xhUdPhafP9d
Y+U9cVYMav7dT6xHgtfl9ztbQ/z1PIjHF6zwb1zNBuLrbTs8nxeuhwOKwPUx
57AeYla7z8Jny6CyIMNif35waOMkuKHgG46Xx2xtw/798Hk/r+F4Vrf72rSB
RY4E4ni7XXRJzz0A8XpTKO5X1AzcUOK0g3i7sgj3K258bXkXAv7qzcDrt+P7
ebm99nD+tX14f8n2tP8MqyOD2t80hPOFpfWGhTp4A8d7nE9Vcym3j4G5Ng1i
/eF7MN5nCLzj8hTWHz0hK77VOkE8b3TC+rb+awC3rzODOqisUIP7Gw/Kh165
Maiu/JVYb5x2mL2R58ug4k9z4HpP6GR7OACevJqI8aAl9NuAwCEG5fyLE+PF
suSdAslgA4kV2E+Y2S7JOHGYQT36xo/3AwPPStdbHmFQ2xWFcT+5bXL0JlsA
g2JwXsL9AvkC1k/a4BMMVtwfCDKeEzgJ7rM9hvGvPz4obhq8JFQXn3fzOnAp
4ONxBuV2sh+fr93vkeJfFwTnE1+A9+NXPIniPXIC4peFB8Z/y98dbjfBQyPx
2P9JvPlWMwo+rXUT88XFgnoH+zAG9UP8E+YTC4v0uwbhDEqLdSPmH/fIEq4z
4Bgveby/fTQ+06MZLCujiPnqqha7yI6TEJ/itmJ+6xoVSl5/CvKxJjPmv1KF
JuNs8NW6TqwvdlU/514VwaBq7iVj/jQSE7/CFMmgzp7px3yb7urlHQQOCnHD
/KydJag6CU5XHsR6Ivxy9fC7KFjP9hmY3z/UX6u3iIb5MdGN+X/fuV+Z7eCc
+P/qBV2VmhOapyF+dAqmE6/7/sGxBqxqKnKBWE3af2tBDFw/jY8XiWeqb69M
O8OgskeNLxHXntv87/BZyC93eDKxP13pLmIYz6Ce6Oqjt0xzaKkkwPqWbse/
d6b1u/pvTIR6Suk9/v49lWN3+JIgPjGfysD6Jno78+JzDOqx8C38fJ23aptP
gO23X8bja9pUbscAewi54/E316YmeyXDz+15sd4pLxx+/AF8L+U6nv+fjdcX
rFMY1KzuKqyvWD271F+Cr690wfES+BjaXH+eQakoXsP6rbGxw/UPeHpNNtYz
PwNn2LenMiiN2+fwemid+bi3FPw8bj9er56OJdOZaVA/FCbg9fXmUbrSDebV
1Mb65Zedlv7KdAYVwkPD+bFN/Nu1OPCCuALWnyULqfbBFxjUppQ9ON8i1l7n
qgI3et/9rz4JSG76AebnEcHnPS50/9vgcZFB+Zx+ivWKkZDs/L4MiF/p9/B5
hJDq/rfbLjOo9Qdb/3s+WlWm2hzcp1CJ9fbAcHm6H9gkIguf9wzPd7G8Cc5P
/u/7Ra5OOXSLZ8J61BvE/bdJn7KRFVkMKiXPAvcXzsX4tcmD/aP4sN7PeeFZ
YgxubXmL/QGdznQ0DjzpZYLPCzSdb2Nizob5ukQM7+d49d6SoYH3LtuF9QiH
5ggPVw6DStZ5h/dT7n0y+yUL/vH4CPYfgu9ftniATTLS8P6K9h1X5yHwI51a
3H88y2ZpMAf2OauK97fys0O3Cl9hUGms93E/wzjx0CJrcHpBOe5v5l+YKHwB
zjQKw37p1+L089/AcZvGcf9i8n7AiWVXId/sMMf7bVVz70x1wfeeCWH9Mp3g
rOoKHjE/gfVLs4vY+iiw0L9efH74TQwfTy64sH0b3l/5zNCarQf31Cbgfsjt
mwWj78DTbR9w/3XutuarP+A/fJexvmGdW9nAnwv9F6c91i870kRKtoOHPhvi
/RInf/uLe8F5cWO4v6t95W3UUbAmSxLun+zv8bErAwu6/MT7J+JjcfpPwT27
al8Rt+gMKX0BB02cxv2S5m/yK9dfY1AuoWr3iUNZvZ5mg2fVRHF/Y8NSNb3E
PKgnFm5jflzy2sXHJx/qWfPfn8n93b3ihxzjwMvLvuH95NO9ZXsLwXVWE3j/
+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
CX4mNfO/J++qwV0TW39RH0+yLP8HLhHsxPhhaEVEyPl5TJI959BnaqM6zsrQ
+UzCHcNqpu5ZLnftFvivXgHuf9x6J35eHdhzgWsDda7Z2j98C+Dvx3kxflnF
d/JtGFjKJKGSOvQpK+GyMJPYX1croL4TnBzWDG48kJ9H/UVP13/uQibJc9qM
8fmhd+FO0eCnXS/TqeMerbVuBY/8qUrBeLGsx0xYhEkCPr1Opr4no2oYDy53
MsX4zCPt/ea34MM1lRi/8e2N0Fm8iEmsLLddofYNGdJMAu/KeITxfNP4To0l
i5kkXCnzAv7/rofrU8BCg1zB1Dyeq8hSUSb5/Lgd40dnrjSjG+DFaZJnqQvL
xC1lxJikyq0D48/L7647Z4G5lvNifC+5oeR6rjjczzeFXtTicwZ77yyB618k
gg5crq18T4JJUrcreFPvsL17pVSSSfQ7hvHv99/yrNOUYpKdPwb88Pez9WeU
g4UlTTC/EHhDcpP2UiYR2yt6nnrR66mganDf2a0Y3/KeGGjYJM0k/Je6MF8h
+KhXpAYsa/s6gvp5TPdG3mVMMs0zGkn9Y7jb3gDcNi4XTW2r9/VBPfj56o94
fzNMhj/PXg73Z40N5keUJ1hCxuB8Fhufx0KjhceawHqbXPH5SeefUGiVgfIx
6xTGw8PnLx8SXsEkxlb5hdS16wpi94IXHfp7jzpoK2fqLTiw//NDau3fhZ+6
V8L7urWsHsvDmT4JSVkoz7tuYnksmy9laQ3uZme9xng4I/HNR3BC5EAHdbbk
/Xd9ckxyZ4Urxs+VGht8Zsozie/KUiz/oSu5l8iBP2znxnzVeIDZoSNgtal8
PG9ijxHP0CB49JT2X8xXzQwXGl3FJDc/m8yn79+Sm3qhv1czyaZmEW18n7m/
Ky9RgPrJ9LcuNa/Zy84N4J0nvmym/v3KXMkfvMD9mSH18CafrmnwiaWP9uL4
/PdhHV4lJknfeNaF+kdVvOa8NUxyLVwvgzryx7IR2XVMss21dTGt/8wFZudu
BYufqcD60G2fit0RcMu8vKUYX/vpd+SCG5uiMH+pLej3XEGNSZYJhWC+U2qF
TL6qOjyvgQX7qF0KD+XpaDKJm3DqNerfQbXHLDYyicLN86tpe/DF9sef8C1M
cnRwNrZPa/uLTnOZMYmigQLOx8s5oaIjDZZQzMX5kDPiB2fpgpOfrcT5fEcr
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
nWo8r6APWDU9eApWsptN6+uJwA875r2ZIuJkJa3P9149y7oNvv15RyT6Q8iD
bc1vYb4XfZ22l2FyMvs72ExoMBCtmBk/Q+IdzB/nadL2leNSXuACfuOY54cO
zHspPAkOn33IG52VJjis0DlFfGt7afve3C7XcPz9FOl2D15J28vif2rJYB4R
MUO0trl2dA14zVjmcvSC7rDN87thviReroMWujDRmQYOmpOigv7L85v98gPE
F57mQui9dn2uP8G1haf4aXsNWdgg+XGKnJzxYC662jk6zu0jxm9zeWn9C9Ve
zgA/+ujDxP50WD8tbFEvjF9Nkv3ooZSksQ1gLpcftP9lfv/kcBi8p+NZN3pw
l6/2417ML+x4i9Y6uKV/y38w3l9ZUY/Wd17hENQH8/lrLffRC/ybQ9oHYH7d
bOKLnuU9/GMS/HSOrTeaddTGc8HgFFn/n7MXOrBY2tYTnLvexQW9XvKE9l/w
6heSNnQ88vP+rTYM8cwZa230AXutyrARON/X7cM43l10OmiUCX4dKtyPzrnO
Km8GxwRafkTb3Z1fITE6RaYs771Gv90+XZ0LVtIQrUbriCh0dn2eIplv78Sj
N9xxMF06DuWVe3st+pt+ZbMDeDqWdzX6tPwx+xAww99dn37O7tpfD240nauO
3sr0jXf+Cu0xg1sUPcA1+C/qG4xHZ+7Q/Lf24s75g9+nyKrISJovTchZszD+
D4xnE3vo81bq7dzl5eDKtF90P5iL8TI7+sEez07R/V7WzzSO15yE+rMtnN5/
YofYi9WBn1gvoc/HirDfyX+fgniwbS7d75U9ucDfkjVFzN9y/38/6ndcIjOm
p4huxGb6PtGgKMNnKmA5yzH6PtAPi6qPbwL3fQ2j+Tgi/OxjPLjg+TW6X/fM
b3dztWYwiO9xR2O6f+nNOicnLgYR3JXUgfFcwcXgqVJuBnlm/T4M4z2HxwtU
fGYziPqBC/R9Z9aa78aug+UGROj70izf/Ff8BCyonkv3pzxYO2bCN4dBZMXE
6P7pOzb2uqeAix+V0fc5TEvrPGqeC5/729DnazTrzyep8TPg+l+j6+0tV0R7
bwHH7LFso/fX+XqN/cGuriLV6NrqkP5q8Pnid7fQhQ3xmo4CDPL2h9oeur7D
bs3rs4IMorDw7wDGz6MOe50GhRlEfkJ/CuP1xWMlBnNEGERqD99n9GNeBxEd
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
03wG+Tez4xPa44cyy6uIQba3e2livH92Y1fkNXCAUaYu2oH5U7wKHGfdtxyd
7rF7mWgxtAcXS2N0Swa/XyV4svXPZjSPahuvyAMGGfmVSfNdiTmfA8tLGSRk
hlMemqF6QfQT+Oov1SJ0jM71fKFHDNK9aOIB+tPYx+F94Dxt/wr0FrJxh1AZ
g/BetmlGRzyNtd33mEEy4q1H0XLZXXGCFQxyd4+1PJ0/dx82XgX+eCZZCf28
2Xt4LzgzaJjO77qnUg2egG+8PqBJfXuwZ28lg9S1mtL5Y31GP3lSBfVRQGUb
nb9O1W3dVwPxzp4kmt95esie7zJ4k/uuMzQf0rWl/An4RavUObRb3AlVoVoG
KXp1huZ/dr7L5yoHL1+kRPM3pX2JzULPGGS3zMkctJ7P/XOrwapCv2h+QItf
xdQD/HbF3gK0SqjNk3JwgvgKmj+RcTtf4PEc+o/UDJrveJB2Mq/iBYOoCcS1
of8bF/IZAefcqWin+S3X+UtF6hnks8F/b9DubatLPcH7Nop3oQtGQp6LNDDI
5pp1fWiDkKgpr0bo78XzJ+jvq92uvgb2Y5z5QfMZUvLnq8Dmd+1+oUOa7GXE
mhgkdsOnSZrfyso0qwYPeTT9RV8v6swWf8kgp0WvzZ0F3uXmF7gW/OWn6Hy0
x5EAi4Pg4X2X+NENhWWfnoKtmceE0HUD8ureLVA+J7gk0KdK/rHjwbYJDpLo
lAnz1hrwBd1MKXRsIb+/ZCt8X9VyWbTWmdPPasHekwIK6KGPdxO/gleFGyqi
Fxbo+Ei1Mci1AzuV0Jl1obKHwVmbLimj/3XPPCH9CsabLw/U0AIMQ3Uf8C6/
DHX0Kj3Bnmdg2elQTbSL3l0L33YGcX44roNOEnGbfg4eyQlbij62rrZM9jWD
eK78q4ee/+6Z3xGw83q35fT82vfr1oO3PSrQR39fX/RtwRvob44MG6DDTZPy
j4KtnLhXoLe1L/ZtAO/cMWcl+uwMx2Vybxnk1NYp6lj/lKpGsOqL6NXo1Fk+
NsfeMUj0cIURLV+ll6MKHdB+P8QYoznaDyNfgmvfMalnbaxnzO+C6xnzmDq8
Mi9s83s4fyEp+v+qPktbvoKf69asQicYHpSP7WYQ9xlC9Pf5T+Va9oI17cTp
8Rp5OwVof4Djf8NtiA5ym/muFXznbxI9/8EwFq/8R/i9k+bL0KU+Lit8wJff
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
ZPejd729c2AC/FytwQG91kIyzcSIScSf392LjlwlN3EfHFk1azd68eWMzRNg
j6u/rNB7vYqumhgzifAOX0v0LDHTjvvgLztjt6M7LJ9qTZgwiUrhi23ozz0H
SkxMmWR1VftOtOCVu3JxYDcRrj3oYfk94RNgQ5lCW/TN3Ur6Uv8xyYftr+3R
s5tj/5qA3eT/7EOznjoejgM/3PfyIPqUTP6yGvCq23tc0AGDGZ8mwCmCQkfR
y8PPb9tqxiSmfj/d0XaZueQ3uOgM8UMrmQv9k9rGJKKb+wLQyi6LC7eC9UIz
6fWLW8TQiAf3Wjyi13s8f/8GU3Mm0eReFkfPT0jdjDc4a09jAlpg/MuLeHCf
R2IK2vJOp9EkOObW4xya/6/wpMOD7UxylHPTG7RxwahCLVixb/QdesPxeT8n
wSW1VU1ocwGlgP8smCTQrK4TPXBnKn0KrHrSfhq9z/C7zLYdTPL1yG517D83
bl2cOA2+dIy9Ae3zpeRVAjh0smYLrT/ksPjYNLhvY74Fet0Dh5eJVkxy8ve0
B62PFGUd/G8njDdqgrTeja3yggMK1kzCdIyl9Z60Jw/rWIA5o7Xf0/pFm7n/
JYEDnn/ppvkweD+dstzFJJlbvPhwPFLvHYtI3c0kA9u/03pW7bl13s1ghZda
dHx7/sfclrGHSXSKHpxCj41pqOwE+w1UhKMbBZLqmTbQf69vK0VPenNs2L2X
ScgmFxk63oYWX+axh/bfyUX309VSf/qrg2OVbs5DL33+6qwd2INFltL68rV2
nrngs9Mtmv+vJ7b6iIMDxCduyt7oa/tcTubvY5LSe8bjtP66lv4cFycm+bEz
dxbOLyWnO0QiwcJyCgvo/Z9K4oql4OeXMqXp87/jAUZCB5jEPZGhT+t1X5mK
KAN/fRp/BX3QOnyzqDOTLLGvpvVo1kxeEn3rwiR1l+Zb4Xw4VuZTuPo4zLd1
GrSejEKWwNhecP8Nq7k4H0fOM1UKAl/9578MPSyXcecLeI8D7za04gbF4FA3
Jrn56T39vc3VdfJ8rzuMXz/l7XF+t74rPhLtCfPL8l0tuJ8XFnowm/MMk1iK
3h3E+EI8pXlWdyD0t08+Z/D+//GnUsHzLjJJUqdvFJq9cqGgJrik6mIW+pHz
gHIEuP7DvT501EnH/eQSjN++fy0wnkryixiNuQz9w95EBfPVvP38I2RHCJNo
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
P4ytAt+MnFxD8xdq7txp+g716f2bdH7hE9IulPnBIsbtxnT+2ScqUO4JPn/p
wQK02ZF7n7+BGUEGIjTPZUbJ0rGfUM+qPfhN82UXzuaTGgAvN76NFvieIe8O
DpZ+kILW55y2SAWTRcyL6Jr9znFKv1jEzccsCr1A7aGK4SDsD22JjfT+t0VZ
lusQ1HcBc3jRM6T2diSDt911pPOxVGfInC5wRe4uen++aHvw8R3DLFL1WIfO
3yZhVofCRmD/uc9MRk/8dk9P/gPHf+c7mmet46098BUc8vwZ/b7C3t3VcMlf
FikIiaXfZ5hIpzfmggWLsidwfTlRJCJXNgbXD3Ia9Pk3w1+hv7omWETtHx/9
/uVrdJid0j8WGVdI0EAvNKvP3QkO+29EDp1vtT/kD7jdyYo+H2afmSXGmYL5
96zMY1wPxaY9iFeZziYPI20V0VZWP/kDwHrrPMVoHrn9/tB88NHnq2mekm3x
Kf/lPGzSOi+tFdfjGs4tdzteNpHfveMk+mnnlcggfjZZLrCmG9f3sA3vXz5h
s8k0i6sH8H6UXu55X14Om0j82LcJXTtyl7sSPGO7ghW6Z2e73TuwajK/JPqj
sn7fZy6bGOzNz8P647zyzy1sQTZxCG3/Qp+nmnPE+T8hNim9fkcO6xmRrNH5
SeDzL/7woi1dn/W1g1t4xLrw/pOMhdNxH2HY3h3lt9DVWnHvDoiwyevUiaXo
d5/UrqeIsYmYRZYa1lc3imKMf0nC75PZ3IH3l1qXvtdcJsUmj07ZnUef7Q1c
cgC8k3XXCp3t91iKX5pNLFXyH+LzTz7vNglKyLDJyPx/Z/H5p4qZ8lor5rHJ
6jwtb7z/1BueE3F6AZuUHHjugM8v1XHHkj+Am3RMxdCiqy+VSsuzCWNcuYnm
LQj0cG6Ch/L1PdDh/Vm3Hi9kk9we3UCsR1dNdS3+uphNjNaduo31q8r+kMV6
ymzSc0XGD+/3XFjfF3AIbD7TQR+9zLG4pBQ8J66Xjd5St811jQqbONUbZ2I9
LSE3mbFpKZvUBuztp/d/PslExKmxSbfmrxNYf//8pNf5Hhy+ScUTrXo/20xC
nU3GFlYuQ3uN3xVIAy+LmvMZ63k3p/57hRqwPy7MpfeHzsyP0f6qxSbR/qe4
eL2w5rTT7SXabLK9OKkLryekYyLkd4EXLJ7+HG2h1zNnHPxrW3sIeuOn6UKz
ddhkPKnuJ17PXFq6y9xIj022zA3rwuud7o0T7w6Dd7PmV6BXVHxxrwQXnpWm
+Qrk4MswB33YX/niftRZvTXbDNgkQ0B2mOb1DR3LOW/EJgfOr5RAi6i1ObSC
1962mqLXuxtPjcoZw/HsS/mKvpXPMb0DNpKwuY/efNOtt3Q5m9hMxtjTfMOb
ly+wCZuI+ygYoFf/1rGwBYebSsijFZKO3mwGswN+jWD/uCyvqP2/VrCJR0rQ
dfT08bsaOiawPSeTT6DN9Jb9CAVPV5sbjL5X57qJZcomt56wbNF/SoW85pmx
SfnoZR603jaZZBsLNtl4ImEf9tNh3Vm08wy4Y8Y9H3SGVZxxE/hZrcR69O3y
fR3elmwytaZBH20/8FgndCWbvJn+dTo62LJw1nPwjqtbhrB/zxcH0e/MVWzi
X67ZTfvXFX5LPQOe1XrvNVp5lG9R1mo2SRBXvErzE7T/sn+BT7Kmn0Gvj7Tu
X2bFJqbV86PRTQdmPXkOvtpvEoieZhRxk2XNJiodZBt6voHd6TVgy6pj7ug7
UjO3N4OHrvdb0/7pIv9cZG3YJGr+LDP0YPBqqy3oJ/sM0FsyedUGwe3b5JTQ
j8cH2BxbOP+PvxRAr4xs4V0L3tKykEnzGWoWTp0Dm5+qmIbe8bnpr9xamF9M
2mg/+jvPTP9uBWfWre1HNyYIjN0B6/9k96JNtJ9N6dnB/m6w+oSeOy+LLxws
o1/XgpZTGOaUgz1XJn9AX9twTWiGPZu8fJlL++P3ld2Ssgf7HGe9pXkJO0UW
JYKd16ZUo2W3fFRvB9//Gkb766c84CyXd2CTC8LJ5Wi1LedtfMHzUvnL0Gfn
1ewYAV/mJpagy37EnDu8jk10fbSLaF6BQsUzwf/YRIintRDto3zsdxJ48/zj
BbTf/p/4rfcdYX6QGqGuW5j565UTmyy87leMHldOFRdyhvP1swL9/dle/4yd
wQF3Fz5DW9YWbL0K7q70LEWLHqtP+AKOnmileQHesQ7FS9azyVmhC5Xo0J8a
vbvAK+tOvUJvGBBd+Q+cFmZYiy7JkAgxdWGT9+P99bQfVe+hrBjw3ZUdTWhP
7R0iYhtgPg8J7USX//dn9Uaw8sDCbnSA8pfDKeCEjTN+oD8pdows3cgmPIan
RtD6Wwc1gsBpK5Qm0NLRm3c9Bq/x4uXB8XAxeXe/pSub8EpuFUS3ZXPU48B5
poMi6Oa3/HvqwCV3CqTQdrvmT3q4wfzoM6KI9mGYmd8EO1n5q6ODmitO/gTr
n52rhy7eNjJ/vzubPAhVXYW+7DngesaDTUTu8W1HK8ovzG4CPytfGUTPj7Ai
XllPNjE59eIQOlNJ+N5t8A5nn9Po9EueYuVeMJ+9ty5Cb3K7HThjE5wfIWsr
aL9KEZdaezBb+kQtelVU+5mP4FcH0r6hbYpiF//1ZhO/e56SOB8M2w+cWr4Z
9ucK8cVoPp2Hf6PAs6V4aP7KXpGd74S2wOd5vXcN+ohndILyVjZp0G6IQuso
+q3z2MYmbbuMJtFjnaz3N8DJEyqCOH8xr3EcfoJtt62di/7PSt9pvy+bfOAu
WY5elWO166wfm1w7vCQSffkC+VrpzyZq6WoiNK9m5FmzRgCbGIfWO+N8fuLz
cFQIeFVL4g50mOEpjadge7tjR9BaHoOnbAJhf936ko32zjqwwWcPmxDpS1xc
L3q107Sv7mUT0bSKSvR6s8sjnAMw/lel0ftjsrHJd3oi2YRP++IYrodbTsfk
qh6B83ndPvr+45XGpoK94Hh2kC56mv39Kr4oNnnuUr4XvUfbakL2KGxPwfMh
9FjqnPT10WCb38O4PquuDOGvjmUTw2OPuXj/6urgS968c2ziErQkBOuDu9Ol
N02A06sqrqC95BtLTc+zyY+VQc/R/LUJMbXg8MEpLtYb1ZwZiwZghVKSeHMN
7f1hYapSEpu8+z33JX7/dYrf+G7qVTY5tFhGAeuXReMhnMSbMN8Udf7D+id1
b29fQiH8/dDX9P085mZl/mbwYt7mH+jjgh+l5z9iE7f1HVP0+8Wn59fmgq9w
PtHn2981r62qfcwmYVeTdqMH3/2dEn4C80HYTybWf6UD/ocvPGeTrd/tVLE+
/Kvt3J7yik3OMB03Yf3ZNyZn9x18c63lHnTxGvcXmtVsIteoHIU2fquVWwY+
r1d3A70u2PpK12s2+bkt4Ru6S1+3cMlbWJ+v3t2O9a7X07WsB3Vs0rmtmL6/
JceZ4n/Vxib37gdr0OdBDlgeFmpnk4Mn/OnzBl5Vf6bWgxXK7azp8yuLzk/1
gLOnf6XPQxQKFM9kfoLzrUMzkeYNDJUFmnayyafnrjRP87XmdcYJsIvpUn68
3rEa/5JUC7505fss9E3rrArPz7DeHVRWoNen8soa4V9gPOqX/Ufvr/CzrIq7
2OSY1rI79PqpInyIrxvq43eVD9F1jzddswb7PLV4TvMLfHz+toB7VPk+0HyD
Kf8nYz2w3t86TPMe9wcHxup+Z5P5V/fR/AHnHWetw8G+Hx78h440lRWsBO9s
bnajeQP3951z+sEmzS2fd6H5G1Ty9v6E83de9xl0ZUSubl4/rm9X6tHxnkdn
/gNrZ/i2odtevug2G4B6fLXsV9rv2vvY5TpwyojpEHWHmPjQL9jfRr6zsf/L
Jr2Vfw0G2YTJCp6DFt31tTUSLG3vNw+dkb4pQ/g3mzjyclTQOq671moOsYmF
qowlenfTdOMD4A1Wm2zQ245PKZeCfy6Id0C75y2f6TDMJsK3rrij+TfUfQkY
gf29Por2H6/OqGx7BJa4N3kA/TNcsZFnlE1OT7pGoNnjau9Og8cV3pxArzRx
rsv9wyZLeAKuofcJ5jaOgbcdmJOGTn20r93kL6x3SmkZ6Mw2675asHeNbw7N
B9g/e97vMaifD+TSfm1Xdr9fajAO6xFv+At03lUeEgkunFKvov3TyzK2CE+w
ycffJm/Rx7aJvtD8B+fzArE2NNEz+XQA7HqDj+YTKJxtnSgFjzY3dKJtxVz0
102yiebfhT3oUXujDZfBlrkptF98knncwS9g2yIe2k8+PTikfM8U1DNe23+h
A6uFfxaB3V4H/UbP4JEW5Z/GIREKXsM0v2DBaWMbsMkG9VH6efX3bjsHdrf5
TPvXX7CvPNcGTuoKHkO77o0uXTidQ3IE+8fRO7PzB/3BW++spPkFEVyHBfng
kMwjtD9+gG1DtAUPhzx1S6X986svCA01gK9sW03zDJT0WZu38nKIDjuE9ttX
jn3YMgrOP7CU5hscOWfWPIefQzxql1DnexT16zE4pMtdj/5/1sLZkS/Biy9E
0d+fniQnvYHJIWvF19G/n23/1jcVvGKESz+fonjfo+/glrlp9POrD+x1D2Vx
iN2PPXR7F0t23i8D13rcofkN6w8UsQXYHGL+5AXNdzAWLCm8Av7v/bkBtPN/
3cJd4MsuNn3oA5OHdi7lcIii7xfaL+lO8sSSEvC+Z9m0n9+CnM7jTC6H9DZ+
pfkTu2x0f9iCeeaM0ePv6aRx/xM47nYJ7ffv19wwR3EGhzx6t+sDWkr0e9hu
8GjxtDq0QauXPY8Ah8icKKL9/oUOlRevBpcY9NC8DFeepCVnwN/tB8vQc9vi
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
d5reL1LULsDaBu47ZnkKvaNBdW0RON3qDf39m/E5NjW9hkuWDS2hv/en/5j2
6cInuN5ZJU7XQwz1/57LB5ttW3oJHfDLQ2UcfOTuvCi05OHJIJfP0P/VQnLQ
d9xW7N9dB59/tPcPulPAdItqPcz355Tp/lfzJa9wHMGfbUQv0uspl421d8Ar
lBvC6H5SI7oHxb7C9WLS2CO6nrHGK4q/gUus9E920/WQyArdb9+4pKzB0pTm
fypvk5rXCPWTYY8VurzHbGo7mGm03YnmLQsP5r8FL9G8fwGdkGFn+rSJSwb6
XZ+g40SE1/aD560sfIlOF9GVU2yG833o+zua3yynMRUPPpib0YRWk7R5fbUF
rs9MzQQwrzSJVzunGOyttEMY7fT75kOeVni/LQriaAnT/viT4KSz/6mipY41
hdu0QXv5G0bzUHUu9ETEgVuWaNC81H+LzkZ/AfOMpNE8VbdlGrf/a4d6JmCu
O/qgxniJVgeMV2PF4ehjSmtr3cEuG3huog8vntH+GLzKm5WIXqa7jF/hO/S3
mTGPaP5zkP98G3BQp1g2+pfQUeU4cGO38ws0/4xKyzmdUC/4XKB5zZtCjNz/
A3c/0Kd5zU9D/gv1B0fJfqP5sWuX9ZZO64J6ebk7zWvubL/YowUO3u3Zju42
vsc8Ce6fNO5GCzidM+0Dq3UeoHnOues0Tyl0w/VYQeIozaf955lgA/bWfTKO
vu8ePvQF/OeoNi/m33b/57xo7g8uWfg4ewb69X/lRtvAXcVTs2g+7qRCajE4
PWGMjS54v7iRpwfqpb/JgujmsSRBbfAnc7k56EtR6Zs8wPEXjoqgz2TqeD0B
8xhepvnQAdb7Mn+Cd7o6LEB7pvD2L+mF+ad8Ps3rFY5XUTwI3iIbIY6W3dpx
KAGcrNMggb7nOcc+sI9LbA78kEJv7qs+7/kT6n/fJOprXQ4LBsFrx7RpHjAx
l8+26+cSQ58J+nqPX1XPTASzZl2l7xecIbC7EfzLvYV+npS179LmD0D9Ez2N
5gV/cBbiMwPLrO6i3+fljg6LEPAxqWj6fTdN08koBXcv4gqhlb0VmDMHoT6Y
+o+DXtMcbacDPuK/i4lepRb2xgt8LVBOAP3rvKh0LnhmzXN6/POtX7ar/OIS
MYt1NI/YmtGy2RHcrLyEnr9v/YGpd8Hr3OtH0DeSLnmKD0E97BfcS/vLtao2
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
jJccOvMmt+8MN6jXPsQsRl8eK12vD56ItOJDT3yXiO4EO19ubMbnnwMe8p1d
7AHtIfw6zf8bis1QcQJryrQHoNv0oqazwY8Ua9zQ7y9uurDrBIvU54eZ0Oep
dfuNroPj3ltpoV20fot2gttPvlNC/7DOy/M7CfXZ80AJtPbD4ND3YIlflWy0
4b14u8WeMF41PeZHJ7iObnQC2zUqTtM8xvnR85+AT8vtHkFfeODVzX2KRX6t
EuxB++xPK90FDphv3Ya+dKEmuBNd+a4WPbC+2kXxNIvcV/5ZgRa24uz2B/sX
x71BJ6++qVwFHrv3neaJbnjmtnKJF7RHzZfPaZ6HaBjLGfy8QeEZetap3hlP
wcIPtz5GR7VfHZ5xBuoJ4YZM9IuzAZ36YOk9fDT/UentrKoAb+j/KlzT0Pf9
Z315dhbGL9e36eilIV7feXxY5G/cDPr7cdWbeg3BBRFv6P/Lc986kQj2TuLQ
15OICOHvAd9l9NE8yZPbxRcr+cL/kzWix+t8c2rdebD+f6r0/URWLNeoBTel
Piqh+aAtV60l/FiEK+rBO5qnOqTn6Qo2s5Wj+ZNVKwyi8sCBhls+0/zMK9ez
Z/nD9fCsjOaxShvL1huDlzY1dqJFg+ZN3AT/FXQbQJdqbpToA4ddCZtAv/li
7xYSAP1d7X/z8PPd1+GYVA++vrx7IVqv92mVZCCLqEwKLEf7W8orFoCtXN8p
0/zJCbtDgudYpDjReSfad8bnW+ZgwfPnaPtzKryzeAh8KFX+GHpdBpclOc8i
6Sdf+6CtjtyKDwMvXF8djvboK18pHQSfj5/JA/STjwmm1sHw+c3mGUKnhujf
SQd/tjPnxetFfFh38g/4BfeyhWg5c5mMKyEsUq7H3Ibutz+1vOwC1IeHdl9B
mzw6fk4+DOrXwjw9vP6zsnv++oKNveY7oj+tzHZ/D97933tful9OuYyrczjU
07uCnqAlBF+eunGJRXQP1Upi/xP+5Dr3nCssEmy0iYX9l/vd8fg9YJednzfQ
9bfS1C1p4K9Lvxihh/t+n1GLhOszeyQS/WVcSfTUVajPPvjSfILtErUVHdHg
V9qb6X7Rd2XDFGJgvrAjyBp9V/irvj/4rL8wvR+kZt76JtFYFvE6JFtF91c+
mihkEgfXr6fsIVwf0Feo7Xx1HcbnF5VZ2N/flDc1u5XEIhqRSe443/f6W7nB
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
aFxj9QWe4A9b9X1onleWiHUv+G7VDl905YfWUOvbLPJ9kBWAju/If1MBNlpx
6hyaMTVhrtYd+L0SgTR/qzPgulU6eGK2Kr0/MjboaqzsXRbZmxB4CS1peH04
HDxucioYPf47XlckBt7vPIPmeaULdX77As6/rUptZ7rh8ZtYeP/aBvr/96ou
svXiWERtWTR9/wtejf5PwERQ4AI6/4Lqt8Xx0J8+CJ9HtylHOEWC9/Ee0O+f
GjOteUYCiyjZDNLf1yMetP0MWF/4Df39cnlz3o+AQ+5s9kYvq0yycEqE/RF7
kG6/R96bWj+AA0PkjtDt/3d8r2ESiyxsOUW3/+jmsxeUkmF/RfyheXWbgyzn
x4CbBRbZo6/t0cwTvwfjc2kvvd++tld58hf49nr1TWjZ71rxB+5D/50s16X7
86Tt5jYwW3BYneaJFZU8KnkAnz8guATd+GWmi1oK1EevRuajux33LrwHZn0+
SvP4TIUNky4/ZJGTnRq0fRv1VLZap7HIaa9nddj+by2/8aQSrDVvM83/+3fI
46p2OozfI4fz0SPBttsXPWKRWMmDMegWOaFZIxksMoW1cA86/JmtsNNjFtHt
XW2BFv1aJlAPdq9t1Kf3u3a8EynIZJHyry8WoDV763QvZMF4OG15E80L+/Vy
xx/w7qNJNL9+iX71CbdsGK8/J9HjKRN7WIXbn0J/7V1P8/hDg5NPyeayiKNw
pwpaSk836xp4y8UINvpS88ioaB6LzJzawE/zEwLCvIfAn4Y+vcHxTehUT15+
AdSXqiou6GHBVQyVZyxibzeNPt9tk+Sto3FgUc899Hy8zJ3UdRcLYfzYEzuO
4+ljzjifVTHUi4u5fuiGKkPj76Us8rvvNr3+/4ivwue9L2A+1t5Br7dOF1kY
1AyOPXiV5os/sN///nkZiyze5NJP77/4rXP7ajmL9I0+3Yr+K2T0U7mSRV4o
7qX3g/RcH34fB+ZeDGjC9fQ5/cwsZhWLFKaJp6I7qq+f+wfW2RZojrbcXm1Z
UwPtZSTpBh7fzTdZVeT2DvqPqJcgrqe9XevaP4Ibso/X4Pwn9ev6FKv3ML4p
tEegv7POWJI66D9b+5bR64u39anMqWeRVw9bjPD874Zq8/uPm1gkM6TmIM6v
h5cvmCHfzCK/TBSV0EkbmR5R4NiagUGcjxfscd0U2AL1AfOKK/q2W8syyzZo
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
W6w9o50c77zzjvR5/rHN27OIR+Mz6H6y8dt77zl+JvMhnEP3T/kUrmsV2cEA
HV0u7U9n8/7xkEQXiUexaiJ4f0udw/ZPI06a9GU2um1oioh9NwMMAn9qoV+v
F10Q2kPWZ8l2J/THaP0ufi+ZX/Cc1k/eDK68XEY8Vv/hAHr+oOtssW8k3w2o
iqLPG4vY9SYT5+TcuEGfL56TVWTTR+Jj8p1U+vdjoYm9xP91tj1Bhx9tiTjb
z4A/k1e8QPvtSDzF+07GZ+zXSlrPG9keWEosa5DdiBYtuXR21wADbh9MakPn
vHt1ZdoPBpzsK+lBW0bse5RMzJsn8gMt/yKm2eYnye/bvYZofe9iPZGvxN3n
BkfRt5rtFp77xQDpN5cn4f1A23Udx/mD+PlpHa13nXX+75sy4tJ180XQ4SvD
lHb/JvneJw6tjzXYffOI+B+Sj67RofcTDybrt6USl7vaUD9qXeZoP0TWt4CD
9PdPNraU9hGzN6bS13Pd/sc+fJgBZue/0/+XvDa6Wesvub6PTCeje09m7asi
znUPH6P1yqlrpPb9Y8A47ws9nmnJgTlSI+R8ZZjT4220NtidSbwqOJaej//W
eXGcRhkQu6L3E/pgulb/T+L0G8YNdDzI+OXFjDEAZpwsRwuttr9gMM4ApmV+
AfqMderhOmLPt/0P0MePSayVF2DCPnfVi+jPbtKuT4i3Xp1D67lfchM2uU5i
AvPmZB+0QumBiCuTmdC4N9CBXl+zhw/NpjDh+UF5Mzp+moM+txCvfhDKQjfX
fVyvKsSEDkfJYRy/mTU7kwqJQ7/NpPXnxUbB45unMsFy/uALdFpAUMltYSZk
L+fT/oY+Y1sNl4mQ/+d6nOb7azRas7qJe0Jv0nz+2K1LL/nTmCDfCbR/T2bc
hw0VxBtsntJ+gi2+TwX2ipHfd/pL96MyULHflCXOhLNVj46hS2vqY42nM2HR
v0H6vJ5hooj/e2K/yTYp6EP173cek2KCdNaKY7S+9srOLYXSTFAN81BCT11t
XGEty4QnnbvsMV48aA2d+Eoc9mGyHLrGItg0fCYTas8atWA8Otnm97ZGjgkO
1w5sR/vO3rjHTYEJ7QGduzB+gbFI/zjxntk8DtokY6NvvCITNkcMf8b4V9s2
527nbCYoRmmuQR+X6TqyX5kJLtIZfMyPT/L2DQZrkPO9ffo5jK8zv22crslg
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
rXmppjkbFII+LUBrVuz/1LCADeNdnsVo9vG7xVqLyfXv2NKN49l29vlbghZs
SDMwNcTxr/CqOLKZ2NvflObbT2f8ijttyQY10/N0/xPtrwXbPlqxYVrL9cv0
/vjn8y0xK9jw9UnrC/x8qZV+LHOXAxvW3/mqi/N5UvyL84sc2XBoXuhN9Ovi
AyHfndjQV7I5kO6Xvv003241G3a+2EjjhYb/sLPIejboKXgtwPjy3aF3Uegu
NjCn3XuO8aty5KPgVk82PFw2y572qx3f2WC+mw27D/xsRitVL0r57kWOP/75
EH7fNTRTR3LlfnJ+WnMNMD5O2RNYpHKYDSsMZdZifP32vnGgKIgNVVNNXmA8
/r4jPunaaTbMn3dXBON15TED78Nn2JB35JEdWlmoUE8rhA0WUkm16LmDt/bH
hbLhdMeGDxj/TRKFug/FsEGsXKYO1495nxdddzzPButzx6Xp85hFHlvmxrJh
XYalPfo8c6PqlwtkPE0rL6L9Xvo81qyKY4OW5+LbuH6FvlUtNopnw7417Ra4
Xs5aHHh45i02XDB8dQB9y7PD/CdxsVXeLfTm1MzhlEQ2xE4uo/khY8UNLdV7
bJCX/H4X13Pd3nlbxog10j7SejzdN81JzUlsKIrOo/tpKCms3hqbQuKNpTbd
T8J91+JrYhlsWDq4+zXdHyPiiHMPMd/Lpgtd+F+lwqv7ZL5s+iGI9UdTEt7W
B2axYV57iBk6Tiewwv0BOZ8nvWk/V/7K1e8WPGTDxiKZvejlGl4yI9lskFqz
4yq6WveBddMjst4UymaiN19Vj3r8mA0jo9tofd0G2bzu2CdsCIldW492sT3l
cDCHDTmzvtJ+m1U//V475bJhk6zsH/TSZzccdJ+yoVyuegrWa5m5DnVPf0bW
g3QlKbS+f2BUP3Gc529FdFLtYpuKPDZItzgz0GqyJjNS89ngE2OgSevH+nd+
O/ucDedUYvRoP9YZ7+p2FpD4KeNpiL5ocKTKqpD8//HHJmhFwQ1N7CI2MA4d
ovVnevonf00tZsNd0RvUCw58UeokZqzQMaX9Wg+FupS8IOOjiWGE9vvmm5BY
woZgs8O0Xu1CcNL4fy/ZsFWCNRf9dER9l8crMl7auEz0jqEvXxa/Jtff/jjt
V6o0d3C/+hsSb7rV6PG6LV8hObmUDTetJej5SBD/m9tGzBc2p/1LDyn88i0s
YwM7J/Uz2om10DK+nIyvoTXVtF9uR6v6yQo2ZKwzyUNrTX0ntamSzLeAFXfR
2maq0xdVsSF1ODoCbWZUoqT2lg0xWwV80OetVHe3VbPhyMll5ujy500phTVs
sNk+S5nWwxX/HImvZYNI2iRav9ajb1OxuY4Na8vEstEegqHLLepJvGrVCEcP
sAw+aTSw4cCrxVvRizj5Bl8a2bDs/H/084PwroShkiYyHx9fpfvJtBX/Lr3T
jPE/JY3ubxPUfWvHBza4xVywRA84hN61bmGD4qtdkrR/6b+EZ7xWNojWqtfh
fGpJnTer7yPJZ8Y13ej9aoUHGyo/kfO1xWcOeoSbkp3RxgZ/7Wj6+c9rTDrW
+zMbVEK0HdBxDT0KfzvZkL7tjCrO775Kz47mLjaMyfRW4vzf8OfQ82fdbOhf
PXoEfeUK9+6JXpL/WCmXYzxJSjI3F+1nw6n1rY6038A5ndCvxBcclvRh/DnF
y/la8Z0N6nMNT6ObNkV/iP7Bhj8rs+5jvDJnnA9S+k3Wq3VBXZhvPnLc4irw
hw2F0U170KtfNZh/JhZgXvqF92OnO2YYJQ2z4dgci9/4+Z37Wm5F6F8S/ztY
tB7Oy57js/cfic9lHt8wnp6xcvgzb5QNM4saGjE/9TLctUJhjOQ7N+evQqd7
z88ZJWaZe9fg/dvHAt/ziyfI+18/TQ/js67JrBinKRzwqQItjN9F/In98wU5
4GRR4ofxfXXBvU2KQhzI19cpxfXA9o3tgfapHNj2KcwP89kBI+vYl8IcuFG6
qxHv57osln6dLMKBlWGTzdAvZom6H5jGgWFBQ2nMd3XazErWiHGA8yMvEO9/
jBhbmJqJc2AD490w3u91ialyFZLkgNL7wJ+YD48mKG+6JM0BLi9HEfNh2XRl
+2MyHDjWGZKB69XQvEk2m2dw4OZ4tBV6T/YhH82ZHKhsVz+D+bHnPbE70nIc
GJ10XpPWy0wP7fxDvEhDph7v3+zWWxlXOIsDKirT6P3iST03JO4qcIC1ek8v
3i++N601KlSRA2pWDxPQyrFSbO/ZHNBkVbujvwYZV6yZw4Fo9Vw1dFnz2lPm
Shx4s29LJ66vx6J87DSUOeBuWZKOvqt4e/p3FQ6Irj1ugw7ufjqtTpUDs0SL
af/DOsk6uadqHIibEz2I+bvxuZ/68eocGKxso/0T3dfJbT6jwYHn6+6mogeP
Lo73YnDg4URDGPpW3+EfzkwOPB3e4Y1mpTx1MmFxoCNoxVq0yAPxElU2uX5d
JyzRQlP2WAlzOHBrw099Wi93qe1DHzFP6zKT9vP03hn4jsuB9Mu7FNEbQ4WN
n/I4INW5jvaPFPQPbwrW5MADkwNiaHWn0/mrtTiwdFeIFFosIrPUXJsDaXZ+
9Hll2YnxLoYOByJKrNRo/deNfXLiuhz4ptY3F62/V2T1L+KBjHXm6Ju7Xt9p
1uNAf37ICvr+IrJEivQ5sOnG7i30++oPr/2TDMj5ufXXH31wuYRA1DwOeM9h
XUArfD4Ze3g+B5o2dtH6L9tLHDN3Qw5YF+nVoCM8pwwuM+KARNzYL3TiWtk8
bWMOXF9gPguvxzyP9RflTThwRaSL1hv2BX4KnCAucxzYjj4xfjWsyowDTyr/
FKAzVzWnPjbnQP3T1gH0o1zXlhsLONAdN6KO46M3keW9DzhwKD0pjPaPfaLj
KbOEA0I9af44/hzNH8mOEB+dLfsMrZIXVvXZkgN669eOoysSTfyyl5H3+8At
GMdzUW3xVVdbcn12SWXi+PcfkKpebEeuT/XyCXTe7+dymvYccEuftQLnT9B9
2/rx5Rw4dZHxC/33tiPrthMHEnt/2+L86w2qE/vtyoE7F60Mcf4Ov079F7+D
AzM0TVPw/mOgt8zGsJ0cCNMOlcP4MZajUHd4FwdsdRQC0XsVZv5ZsZsDVsF5
rhhv5Jv+iE3sJdfHYGoQxqPvDowQd18OTC2s18N4VlQYLWJ/mANfv33fTuu1
UoouG/txQHfWu6vo2tY9P2T8yXgt7BbC+DjzjI7PywAOPKrMeodur5Zr0DlN
zt/CZe6YT5pnnzugfIYDNUdvR6AFv7WpiQdz4OyKo/loVRuTh10hHNg597gi
xufeMzUZN8I4ELnQpow+D/Ai5H1YOAe0Y1t+o20X6ykcjeCARWCBCsb3+X82
lLpEkfmR4b4fXTCxQXBGLAdybPxpPVeHQOPzSRc40Lh8lO7fKqvjFDZAbCCT
6IxeOt1pQ+UlDoQccr6Evp77flPeZQ7s7nSg/Wwyzu7xTY0j4/uJexM6P+Jx
49mr5HjZCbQf3vjz/Ywj18j1iSvTRz8RMw/ceZ3EG4WfK9AdXyUPWt3kwNx+
Bu03WeivIGIUz4HbSmzaby9TyTydfYvEc4kZj9C+4Q06wokcSO2NaUcnuDhJ
DBG7PVIeQkfy+0c6b3PAU+D4NLr/rWDaaP0dcrw5GXPQLu2R01/d5UBxbcpc
+jxC4RWDx/fI/IY95nQ/3JtVnneTOPDi5w/aT/KHv1b2xWQOXGjRdUV7OuVK
Badw4O0gZyvtD6J2KOBwKgfeadbQ5yE8O93Hd6RxIPYIh9ZvGdw4HumazoFr
tayTtF7KutbAJoPMB63XtL9IUfv6ryb3OXD+hDB9/vHjDrWH/EwOBBR9jKT7
AzapRMzJIufvq20MerbeuqMSDzhwfHApreeK3FfnP04sWV9Gf34kOjLs+0MO
/Aipo89j/BcbnvkpmwOrp20Mp89T+lZ3VT/iwBQnjxD6/PG8dTrFj8n659YS
iBavnHvu4RMOzGO+pvnFmgW2w7dzyPhJUqb1aVNPZftezOXA8i/v6fE3Xt0j
GvKUA/YN/1zQoacPpx15RsbrMR9aD3d7QZ3H7jwOHKm3NkF3FJ3W3JDPgd62
vbTe6qdUhLDDcxL/b3ym/VOOsgYGFxVw4D+pmxN4PdOuv5jKKuKAodRH2l89
ddSUP6uYvL+ENfT+fO0s2c3TXnDA4YfgZfTSwP6p30s44FXRsxbdXTp4sO0l
h+Rf8sZo99cev2tfccD31daZdLw0/jc35w1Zj8UcX+P4Pddp9CWllAMf/36+
Tr8vuLkh43oZB/ZX/XcAbSMu6H+qggO5jvVytP4quP+7QzUHgp6a0u+7h+67
my6pIflDd7IY+oq382XDWjK+V0xU4fxkPC4KVa4j4+GvhRPafZ6Fukw9B3Rc
ebT/O9PCrlSogcxnTnsZzn8xQQGnvkby+o5ZZui9Wem6bU1kvpYV/MB8TKmr
T6OumQNRv0MT0fFNTMj7wIGYazZTaD+WWw/WhH/igKB9dSLGp4OLlMsD28j/
t7VYhn7nzHX2befA4VjbLszPBt9wLrt3kPXLQ0wVfSR/spBBN4k34X9yMF6O
O96V5PZwwGNkcz3G1y87R3nKvWT9bzs1jPvluO0svCLyjeQLk5/YY36W5j+0
vvU7B/LmnTLB/KtWaNNY7QAHeqZa/ofxelpcWMabH2T8LXGtxnzrqoaxXfYv
DkyXtz2G+daq3GfzUwbJ+mcs9R7j/Yzr4gbxvzmQ0DZkjp4Tobg9bIgDB/vG
ZDD/6jVvufrfMAdSuqcE4XoRcvTQF7+/ZP24PDKC64vyN+2MbSMc2Ls2YhjX
o7c7JJiLJki8df3Fw/Vq+a68H4YCXAgb1i2m9VAnV1VrTeKCQp8AzZ/Y+sve
zJnChVWgchfXywV7b7fNEOTCvDWrHdGvp/wWFxPiwph+3wTNH/z2X/07lQuH
80Vpf/KlI7cEfghzQUfbl+Yr5bOqfLtFuFDzdQatl9+nPjzpkygXFjTV3kOX
7FC90TCNC/dbkvfReikzmxVVYlwo/BRqRuvr+31lXolzYV2Zlzg6riqlO1+C
C7VnFtH9kzR1uqsfSXLhxaRR+vzd7E3alenTyf9nRcWglR7813JHigvenwe9
0V99uiauS3PBlDt7Nf3+ccxt3kUZLlzoHjJDl1/oPBYxgwt9M46z0SvOn246
I0uO93riTNovb+lCqxMzudAZ4Eb7x7DHZUoPy3FhdnLcKN7/aRAT3Lhfngu7
Zzn/Ru8rkBXeNYsLk4r9fqD/272saLMCF9wTJ1M3u1+PXKfIhW1P2n7R+0f9
s71XzuaC1ei0f2jDrUXb7Odw4eoeb/q8bbrc+T1LlbhgO11cCm3jHBOyUJn8
/GOZCrrYs+ixkQoX9Ntv0/qumvsaf3VVuTB1drgVWvtAjj1fjQs7Iw7T/XOj
ppzOZqhzQWyp6zF0ZtY5HWUNLvxbyriKtqouz5dncCHmSkUeuvTGtJliLDJe
dp8Txesh80OsRZDNhYhJwfr0eg46PhknLlDSd0d3rcq+95PLBXvNrbRffNPK
hrxvPHI+LN7R/QimWC/r7ORzQY1bpEnzSWfF/e/nkuN72huPHhYLrK3T4sLR
CxKf0FqjYP1WmwsHbxxXxfGY/6piT4kuFzruqt2j+/1+9Lh1fx4XZN5LVdPP
C5ovb6TM54KGh7sqjv8Iw+j7dwy5ECV3cz/6ypt94teMufDlYoECzhe/B8Fp
Z83JePQ3OY7zaXWx39LTC7igVP78A7pcruvnyYVkPFypN8X5t7ls4Wm/RVxo
PRYyjt63kHdxpyUXpAZyzuP8LfnV42Fvz4Xvc4f+YjxwvWCdo7GeC7/EH6/C
fEwgYOFLtQ1ceHYvkT7Ps6RgpFNlIxd+m9RrYH524uJbjzmbuHB3Wv9V9MQW
TVu5rVyY/CU3HONX7ZwHNRJeXPBdku2J+deZUwwliT1cKL655A7axemkv/he
Mp4tT31CW3lMPSi2nwunlo85Y/yco3V85bRDXLj1xGA+xt8OEb06sWNc2MdO
b8d4nX9v70bxAC6w2OEzMd7b5uaNiR/nwhT7omW0vujgeR/Jk1zgKUolow8p
ebnKBJHxZB2/FdcPT+W9p2ac5oKIYGA0ulDufLHsGS7ky4bkowN1HALkQ7jw
d90v2q975ofqL0phXBi/e+kBWmu3ZpZKOBc26Ik3oXf4PYtWi+DCaq/DY2iV
5acjmVFcWKHNoPXP4o9fpLGjyftd5bIFPfJx0UduDIk3O/ecQr99OOm4ViwX
bOK5hegZk637dC5w4djO4ha0nVPjXv2LXNi7g/MXrbigMdPoMjm/a801af82
f/v9pnFcMBpqo/uRSY3PsFxwhQtCyqZrab83+evcJde4cG7LYCB6k8M2k2XX
STzVt6b79/hIh2y0uUHeb68pff6zM0Xksv1NLmS1v8xG79jX1ekQT+KBT0cx
rQfKYFuvvMWFiYnwt+ig3LLnaxLI+WsueI9ObKuzWZdIxvPmg19ovdAhq94N
t7kgO5jQh7Z9xby++Q4Xwr9ZD6J3s/dt23aXzO8kd9o/8Hwn12LXPTLezrbT
eqOIVasM9iRxobr/zTjtN1cyaOydTP5+njTtp/cpaNpKnxTy8+dZtN7nTvel
wCOp5PX67/1Dqy64VRKQRq43s/83emoDR+m/dC6kvjhK92OTEtQOOZPBBTvd
FbTf3tDMx6Kh98n8qNzYgt6/vvh6ZCYXHCYnVaON+KutYrO40KDDpPVXU97u
nxr3gAuXCiof0nqtq7Oarj/kgvOsmwnoq212BQnZXPC7EROJLvku9ezeIy6o
5yf4o7vlt5enPeaCYkvpFnRMsuOPrCdcaNw6hfabOD9cw3uSQ+JN0TJddLxT
3+G8XPLz9dGy6AOiCe+LnnLBM6HlN44P67c9rRV5XDjbupHWsz07efx4bT6X
fJ48R/Pdupocg6bnXHBsiaf1/A0XmC0dhVwQlvWVQeulrHvbW8SF5BHeFxzP
MrcWNg4Uc+HNpAc0/1t7RJE1VkJeX4frQPfDG5u5e8orLrguEKf707rdfv1S
9DUXROeltdH6+HtuuXKlXPiYLrOL7t/tcCJOt5L8/PHbDbRfRc2h00ZVXKjo
Eab1PBsnDM4sfMuF9Ny3pTjfja4rvLKv4YKF8iT6POORwmfgWU/m+/bFtRgv
fuyDWu8GLhgK7PZBb3W8eeRIIxdmzhqh/bGfdY0Jn23mwkCBvgPGm4EF+5WS
W7nwQ+TQLYxXpdbya7I+ciEoUUcHvVws9XbuJy7cKGU+xfgWOpB0sqydC1wb
tV0YD98lGc3r7+RC0umyg5hvxbvGyg11kevhvOMM3g+LvTcoLtBDxs9am5t4
P0z6X4mRzFcuSJff6cB4W2Q9EWr4ncSPMwseYTxuqXomt2iAC4NbA/9iPjXn
VnS2zQ/y/mWuLUYnTIrW2/CLC89zVTox3s/5VyC1Y5ALWtq7ga4HM2cIev/m
Qq+7y01cL3TP8nmnh7gQOta4D9cT/ooht8hhLox+c2zD9cdN4kdi3F/yfm/p
r0F32/odzBgh6//Rf064XoUYSozmjJLzrfuiEde3np9Nl16MkXhS9Zz2nw7K
4Mg0T5D18u/MEFwvf8y+398hwIPZGqtovU6ulv+n75N40Lg/gvb3DVLqmjJV
kAeepfm0f/CnLWHzpIV4UBFwKQ/zCQlu4NE5U3nQmzp/H3rL+CYbfREeNH8I
+YzfN9cecapeIMqDjliNRPQ1m6teNtN4IGdouxPtp7FYZbUYD8ZVfumhP+Yu
7dwkzoNXmRKT0GdephZ5SfCAvSKsFr+f5oz6PPST5MF+ty3JaGPpe0+DpvMg
aGFQEPrA08WNUVLk/21sp/vvHr5vPe26NA/iWHus0L23nzsmy/DAblxRB+3p
eDf90QweGDi/n037me2YolYsywNGTLwYWiO+/l7VTB4cn+s+Qetd7mss/SDH
g8UxokPoN3Z9w93yPPgzP/InWoE/v/D3LB4UhXbS+h3LSZNuTFbkweZpE4Po
qUEO0dNn88j6Vz5Cn+f0ZF+ZM4cHA+tgKv4/D8/gHK4SD0w1lsui1xr79M1X
5oHs3y4m2vXcr/lLVHigvE7AFD1FfsoFR1UexL4OcUb/i7o7baMaOb4in73o
j5mfz+9W58HN0pxw9BrNXIMjGjwI3WqZiZ78eG7vGQYPEmeJN6D/E16UHcvk
gaCngACe/6O1f2ITWOT6f5HVREe+dQzNZPOAKWNG+xHeMZicW8HlwbMHoUXo
xqnrf7zn8UDF8so/dNGn7Qt6+TzoLDw9D8dH28lLCsJa5Pq/zqf1+BlrMt8t
0uOBxE7Ttzi+8pc05jjo8+Bgao4Sjsf/Ol883GjAA/fLSV7oJ8r/vh6bz4OP
3+7J4nhOWKjq/tSEvJ+FGXT/BfX7Bb9KTXmgGbykBR0QaHat2YyMn+ufFtB6
cvVq3X8LePD20xCtb5HVzd1kYsEDTvfc+zj/zoedTLRZwoNZ2aeU6felw8Zj
ay15UNzgG07vt9UED/gv40GVwLg33Y9iX29rvi0PCj3l7Gn/msVzWqxW8mAF
u80YP78N3df19trKA+3sfDuMR/q1aw+f2MYDpaVtkeioJ2XnY7bzwFBy4h3a
IiFCKncnDwIVZdZjPLOu/zpDZA8Pvs796ImfP/1urrS758ODdk33AIyPY7MW
Pnnmy4P6v6zn6NL0qybVh3nAf3hiAl0i8izw3xEeGP2rCcB8TG5lg+ry4zyY
a2zui/E4c97HC3/P8OB0UIA1xvfXd8BzeggPnNp3naD92CJgNfMsD/akBT6i
/R2usfY5hvIgolRRFdeL5pCGB8mRPDg2YNRN863zh80Lo3jgeLZc/v/3Lypa
GqLJ/FB2WYp223Jjs1AsDyaHm9+k+6nH8o9tukzGo2D4UlwPZ8TnPDscR67P
wFxa73I+QHpG5BUeyF+MjkbXnuIKPr/Gg+UnImk9QP2s79frr/Pg3OicEfTP
lSEO/Td44HF75Wxaz3x16bDSLR4YD6esQTvK7O2fl8CD9235B9AWwr4j9ok8
2OjrEY7eorNJZdttHkSvjblLv2+y0FkbcIcH4lpWtN/VpD+dKRfukusZ61+H
Lhg7I5txj4wfA3YveoWU3PlXSTzoz1hC612Wf47hfUrmgUV6hSR+n+WuKdg4
nMKDh3VPlen+9/E7r0qn8eBahchctNXQS19eOg/mLEg3pt8/dyjvssjggdrb
20vo99XKBw+43efBprk99PkvibVvYg5l8mCLgDftr/bXXq0sPIsHPoPG69BO
GQEK9x7w4H62yUbab02/I6DwIQ8GB7w20XqbqJUjzdk8+OFcQd16tCZ88BEP
VMOcaP1JXKq7seQTEo9th+j3c1PrJ42wc8jvL8xegy5Kf1K7KJcHfoqnaX+y
/d/OFK97ygOhMI9l6EdLvEsPPeOBgM0yWq+j53WkOyKPB/cE+bQ/WcjsBKXk
fB5M7BOh/eW8hb7vfPGcB+8smuj52vLJvaK1gAcv9C6O4PmU2zyy7G8hD3QH
TTvRi6GwaUYxD+wXFlbS/tLdTYutS8j5dl55Ga2ppKe45SUPDoSvovtjMoMK
RI6/IuuNofI6dGrdGcm41zyYKnbPCL31xVl+9hsS74u/0X7RA1PLN74tJedD
ufMbjq8fTstTvpaR12sMo/n0zxbVYPVKHizYVrWT1mN12PP4VST+/0ih9d43
ul580n9L4rXUHgn02czLZy1ryPV/En6Pfl74NHJseS0PFJU/e9P7hc33g9a8
40FKuYgp/fwwMbtmZz0PoOjBC5xfc6Pr5Q408MC8R+s0+uLzb3uPNvLAVWG7
JXp+jsHGiGby/tb9e4bzdVL1Pr1HreT6/1GOxPxsoM1SseAjiR8/Bheg4/nB
cqWfSHyO3vgV48F2o/V2re3k9W+2mlG3nU4T7uKBzvifQown+punGMt08+Cf
8Rc39Izc8cY5PTwoa134G/OzJ3lHVut95cEJB5YyWu55ybIN33kwvI/vgPEs
Ot7Hd+cADw6HDdRhvDvY9/jpwR/k9U3eOaNnWP48ee4XD94s8/PG+2fa188J
5Q6R+Pb9Kn3+Tk9yvKlkmAeZbWVumJ91KssWV/8lx1eo4YnxtuDkvNqeER5c
cZ8dh/fHor/FflUU4APzb8lCzMemC+zZyp7Ehzm6jb4Yv4sPjP/Sn8yH6bfT
sjG+33zvtMJekA+3AvfSfmL3J2bPWSvEh8eRi6NwvSj5fHds21Tyc407X3A9
+WIrM3FChA9eOt+u43pTMPFbOVyUD5Jrs6egg2rvOF+ZxgehHR+8cL3SNDky
ki1O/t9Nabq/ypIEHctvUnwwa3rkguvhpsESsX/SfNh5UKIL189+hnmX8Aw+
NP9xO4JmnXr/QWMmHz7YP8zA9TqnXXhIV44c3+AtR/TZE6oskOeDAtNlGPOL
yibVYjcFPog2f3amzxeVSOh6KhKbxougD6348cBvNh9efPpZiM8jvZCqtA2e
w4dl5uXH0cLxd4YvKPFB/IXqYrTupWO5t5X58LPnswh6fviqqIcqfLBgitJ6
EtHZuseKVfnwsO+/BPT1epmAGjVyPM+W+aJ7XMZi2tT50CtmtQLdYvwrf0CD
D3yXw3x0kPTQ+ASDD+eUy8XQd3zFVk5n8eFdy/wB+nyVoH6+MpsPhnKpjeiA
FfvMtTh8cLJWKUEL/SipNufyQffff9noryfm+5MZCZBWkYRWv/jCeD2fDxu6
v8ejb5Z5S3hp8qFCr/UaevUjiz9H5/Jh8cxQauPvxoOhWnxoUui7SfuNSboI
X9Pmg0z54F20c8pN7TQdPrQ/uZCFDtkg55Wny4e4PS8L0LeeP31eoceHKcd8
a9DJ22LYrfp8cDh0rQud8vVGYr8BGQ+9fAE83l2dn+dPzOOD3V65Oehf/Zta
pxuS8xfnYIo2ujbniqoRuT6TK9ejtULkvHSN+aC+MPA/9LBfjYOzKTm/N9Y3
oh+mX968xYwP+0c8hfF69Z9IDjlkTsb/lePG6OL1D+QvLSTXixl0B6116X5A
EvDhhPOGNvRY1aSR3EV8sLYVU8HxonYxWb/Vgg8MrYxbdPysFh74voQPB7aH
daM/excVTlrKBy1hSV2af6pvuM20IuOFWfKG1luPH/DaY8cHsY7MWTjePywR
rzthT8a/jY033S/pnrxTzHI+3I9Rp/s9+TGjQ5848CEjaVMo5offYzdMEVzF
hy3qRfT7ZaVNjXLyq/mg0TQplH5fLNK8kLeGD+E2KsPoXXbHaxxc+TDiUVSH
87HTMu7f9fV8iOp3uo3zWeL3apeF2/jw5mcf3V/haJ+MW6QvHyKDmhXx/rxo
SjjzzmE+7Dmun4Q+aPFF8JkfHzxmfzHE+/kmW+YKdfvzwfK32mqMV52C3uKL
TvDBxtHFBuOZ5BNpo6FgPvhNqzhD+7eH1cw8GMeH/riV7+j9MLH7N0Kv8KFM
age9H6bk8XTh7at8UFLtXoV2HNtaVH+dD1cs5OrQVgHONSYJ5Hw6nCrD+P52
S7fEykQ+HIXVwnR/xo7nG71u86HObutiup+jxKKlN+/yYaaYBv0+cObdd8rC
qXxw3etLv//69POluFoaHwaiQl+j51yUkjZN58OkwIxRdJnVQ7e998l41BHe
jOuX3vcggaaH5Ppku6ji+si45h//K5vEH21DWs/J8GhxkXzMB5GVg4fR8he/
T1uSw4egOb/K0WHmF4/ez+PD2PwN22i/WZv51WX55HzHhoXQ/Ed7tVnXcz7U
J++m+11v/Ki+WrmID2Gh6l/Rj5vfCZoU88E2sU8Enyc6LSFTuuoFH9aLOjJp
PYWf0aWwl2S+ur5xpf202lnxSa/I/L9Qsx/t255cUPKazI9Ct2D0P+lXf9re
kPkgvJk+3x8lEmAxXkquR+QH+vy/9YaaO4rlfEg4+7IIPTflpaphBR+E1RRr
0ZPOrM90riTz92Q1rSd4G3LZZV8VOd7GTlpvEGZ7TC7sLR96Vq38R/9+i9jX
pGo+HOLI0vqMW55L61/W8EH6hCrdr7/tr07j51oyvsIOyKBb7lQMCNTx4flJ
YVr/cHaaiqpyPZlfEfUKtD7jGXubaQN5ve5mRXTzqt4il0by/golqe29ds73
aSKvb7+b/r3LlbsFMc0kHhT20dd/5nt3U+Z7PhQ7h9H/fzrOU6HqA7neJpb0
/SVd+dP1rYUPEqnT6ftXnGFbMe0jH/I+dfahSy95vuF84sNLqZKP6IwXaz8s
bSPj/1AifR7ymdbsqVvbyXi2Op6H/rwnY+l/n8l8K16RRF9PSfF6fAeZrxpS
tF7GuXq9eMEXPmxKyD2CPqlxLKq1k8yX49bu6MspR+aOdfEh5s8jWo+zO08x
2aSXD9opcoLo3z5FZ12/kuPbPvaJ9tt96RR4+Bsf3HJTntJ+t0GGjx71k7/n
WNH66w5m1M+673yofcWj9dJnnrZY/h7gw22h/Ok0P2av1TX4Rcb77o8pdDzP
jXjjPMiHEJXNPujVwYWHD/zmg86pgAW0v+11zpwHQ3zoO+b1CufL7ZDNUrXD
JH7eMghGv+Umzv71l+QDFwPo5x1uj5Wv/igffsifov1mXYwyXzmPkfXF2IDm
g75X+doHx/ngs9KBRZ9nnbLJIltAEzJTsmn+Z9crd9JISBM2bYyl+8smHHc5
6zpVE6ZVC73BeHGjpyD5iLAmPMp6uB39Pk5KN09UE05KPr6K8adcetDZQlIT
6qwzOjCf0+p9KLd1uiZUuBzci85ZnTlwWkoTPh+xGcJ8zsBue2+pjCbsXjNj
HONZ61Kp387ymnBFz68L490Zpz/7fWZpglv2tZXo6yn8qZcVNOGF+aIteP9N
ZWbEwdbZmnCxyXoA4+lIR/jOXark/X98vAHzt7LxRfFhapqgf2/UFu+3tZx0
G7ivrgmH+g0A87kfUu/eDTE0oem3Jf0+U+SAxuPTXE3Q2LiSPi9z8ff25GSe
JszyvZFC91c+qpldydcEKfNddZivHf6ySFpeSxPMxSzNcD3Q67+02VRbE3L1
jfxwvRixOlq2UUcT3tnsf4b5md/iwc/39DSh/KL/Klx/OoUjYir0yfGPaKfQ
fpJeRWt/GmjC9KSBqWiZLRPaZoaaYO2wnu4fkjNn+oJNRpogHPTNHP2wqNjj
tLEmyB9ZnonrpRWD8+etqSa0z3Wk/VuzprZu/mOmCfPm1c1FyzAsu2Yv0ITR
sJ+PcT1ftV7fcDtoQkzD8w+YP4jeLJgctoicP2VnX5q/eP6PpDOPp/J74jiK
JBUlpE0i4e73IiFjK1uWylJJdlEkKtklEi0oZWmnElFJSVIqCamskTUlJMqu
fKV+z5zfn++X697nOWfmM+d5zpyZOT339Whwy3mDFPL+vu7RvwY0WJK+0APz
1X+9DF6usIEGT/lqJZFr/VodTTfS4OGqh1XkvISo8JP9RjQYfp4XjXwtfSY9
xZgGogmFBsiRxg0Fz0xosNHkiTDyeokgu25TGlzMvl2L+fY6kpPioptocMM7
+ArygPPWLo459f1WS/2Q786Nf7vNggZVkhHGyINKOe8iLGkQH5aigCxZdacn
04oGu8xshUi+/8w0qerN1HwZ3unH8wGFfb6OE1to8IkZ/wF55mm1F8usaXC9
ob8UeXjmTw1DGxpcm35YgFzglPZmry0Nzhz6lIvc8Gi9f5IdDXpEt2chv5Pp
4BZvo8GDeCnCTZeCRb9up8Hz6tnk8we2ykzPsadB9BW5h8hzNj8V5O2k7K1+
ywtkoWyP1fYONPCE+FryffuW7oraRYOWZ6/JeZDKgo67OY7U9SkOkH5Wzmfy
pD840SDNengxOT8imZI67UwDE4UKDeTV1uc4q11p8P2A807k2S45XeZuNNgm
fz8KWWVLZ06AOw3Yi7LuIs/V4J2+6kGDXGWNDmQNrlHqiCc1f3YDhjg/e3zm
lS7ZQ4N0GA1D/jbAJ2i4lwYvvm9/gryLP6A22YcGx9QkyPkG5Wd89i/20SDy
gXEU8uc5pX+/+1Ljl5v5Dvld5vTJ9f6UP7Vd9+wi9h1yePcBGuhOKZLz3Wa+
OiFnDtJgjucFcbTXWL5rb3sCaOAiuaQMOa1bITEhhAbqjuNmaP+7fFbqPAml
gXuCH6kfNO4bJNgTRvmfkK8s+osV26pV8wgNln/Jnyb+87T39rdo6nr8Ptaj
v+3nKSyTiKH8q6/GHP1T//nHmzrHqf8XbiH1Litd78xIjqPG41xPFamPw+fV
tSGeBiFhLl/Q/zUi6rVvp9Ag/91re3weNHDqUv+YSoPMTxtGkPtPpZkIXqDB
pYzJ47g+fCg1p2jXJRoE/y15jPpzX9T0xaJ0GmQd36SIemUS8Mv/2G1qPgp2
rkZ9e6ocFx70jAan/JYqo362LQ5Myi6h/HndwyDkzBf7X7Y8p8F/fXOqkHuP
n/TULKXspazJC/X31KJnX6fLabBnjcpNfH/nLvcyMaaWBttn1AqS93MPn659
XEeDzouLLZBd1cd+f6+ngebN/GTkYZvlZeaNNGAKv1iN8WKH3NOTUq00EFeL
Iu8XeD0fWnO/0mCfSwXpv74zeljqczcNRu/8O0Dqu5gEekv00uD8m6V3kafO
NLsG91H+kvljBakXosONNvlJg9TLjFHkMBWhU2GDNDgu0iyP8fjXx5137g/R
wKGca036l77K1F4ySoNFUZ/ykL9OT53+8YsGK/dYb59P4pGpi9wkDRofl0cg
Tx5Rt7L9jwZT8x/eQH75aizwxR8aVGj3fCf9i55VPZiYpoHSu6VzMN/9iJPZ
bNo/GrjV5yshnxu1+Xeenw4yT785Ic+d3Xv1rQAdBHYFBpP8eEm6vcBMOlwf
sziLLM2gsdcK0sHyk1sWOS/h2rvCR4gOnCMPSH6+91unNddn0cFAW7UGOT3w
skmLMB12BXzuRPYKv3pMTIQOzKT7g8j0Ya+2DXPosG7y2h/krV/4zEJF6dAs
mjULzwtsdHf7kD+XDnpqL8h5Ap+EC4e/z6NDUHuXFDnfcOCm6koxOnjsEVmG
/Ec+VtROnA5PjBmy5LxFwYbp0wvoMKvLiPQzstf8Muv1Qjo8SN9C/p5V7kCb
lqDD5NhG8v+XfEq8eJJ0+LlhhTRysf6s0j1SdAgRqie/r7FdQzVDmvq9dHty
fclldi9aFtNhY9zDKbz+9am7PRYsoUMco+kH6f/0bY+iyVI6BPM9aUeeU+7G
H7mMDmp+26uQ+Y22jT9eTod7E3dIf56uMOMZIyvoUMB//wry4nANFeWVdBiY
tfMYsoI9zdtZjg5VYVmkf5SWkkJl2io6ZLYlmCF3Tq7WqZenOEWURub3M696
zmrq88qSs5HN9I9oh66hfu9h4RO0D82vZUsKlOhwI90gkZyv6ZOTGFSmg7y5
gSuymi9nixOdDm51UQLIv6T6U9MYdBC7WfgO7XN4f8V/9Uw6LGNsOI9sETct
spFDh73bt65A9ty3oyiCS4etfBWf0P6Dtn4/WsSjw9edwZeQL+zJdGOo0yHG
LEYMOflVa+jutXQY664rQ38S37PpXroGHV5vNCDPSyt+jrlIaVGfDwtrwPVh
1DCr20qbDvHO68JIPdCEgoiT6+kgRxdQQGYOZAsJ6NJh56ULnujPtTqnzX8a
0oGfrvse/f+apne60kY6RERm7kL+4H1HzM2Imp9VPeR8g3Cpi1abCR2Sj9fx
IStbDtVUWdDB9Es+2T+IWq7+e5YVNb5xawJIvtyz3xoGm+kwKq3Xj3ql9eK3
6NOtdNinb1KJ68GbJtqXJ63p4C9G4yLvGBU2UbOlw1H51FR8//f8vYOYvx0d
Fsic+EP6+QjoDd/dRrGbkyvy0vxHAwPb6bDns0c9rhebjV8JKNvTITDl3Vd8
vna4ei/sugMdEutSl+Dzd1Na8tfPu+jQVfMJUG9heJXbCic6RLrd2Iv7uy6K
mgVpLnSY2OnThO8LH+i+O/bRlQ51ZlaSyP70hX6S7nSQ/ea3A9efy39WpJzZ
TYcGC/ZvXG/mm+gqnvSm9CL6QyDqvYtC07s3PnR46/WN1AtmFGvHz/al/n68
cCdy2NkTzjF+dLhUb2GH8ePBvKADr/2p8SieaMf3i3uebLwmeJAOCVYynsjN
y+NNowLosGZOcjyuX1eLiVWWHqZD+2S1MrL/rTCnGUGU/ykZVuF6tiuqQ0I/
mA4Hj/aQ/eFvetyuyBDKHscyliC3h0e8fRlKB2Uv7ypc78o0V9YIhFP+0sAh
/XlqrHcpHz1Ch1Sr/b8x/v3Jvx9eGkmHT5vekH48DRliQzOi6BC+4NNRku/+
MiTYIJoOdqlXLJEHcv9bGX2M0sOOqZXInwROd5XF0OFDR9cv0s/FYd1zoVg6
zLuwkeTfe+6aUbgxjpovCak85ORrA2+On6CDlIVeEvLnl5O/K0/SwcLyMcnv
L3Jk6M05Td3/ir0eyIbSp2+axdPBq9zEFnni2NLVpxMof9hsaErOP5i0P69O
pEPne1N9ks/1r/6Q+Fk69Jia6yDv1p9ptCWJDqxWLcIqD/bzzp2jg07CLPL5
up8rtJrO0+FYxGUT5IcJC3YtTqHuv3TYGtlYfdOlHal0SPIbJucR7obXT1xK
o8Y361QA8s5ZWXs6L1DxI6qAnM94vad2Su4SHRzl7TORRU0sM90u0+Fmls8r
5Bs6Sj63rlD+rt7xlezP9+2y7L9KB+GxNGEcT3bPr02MdDrcFTzHRG6sHXPf
n0Hdz7nibeR5xWT7hQfXKb2s5o9Bvjig0v/rBmX/nVsfIfvYeNtoZtLh168b
35GrxjeFv8yiQ8tfge04/wNuY1pCt+lQazN4DnlswWJJkxw6qEenNSCfT+mX
qbtDjY/pz21oTwXHZfZ15VPxSbWO1BMdlZCeveYhHaL6p+qQX1Xce7a3gA5p
Ae4KaM/pS1+GTBRSeqBWUoMcnl1pMOcZdb8vysn7d+kswWLLEjq8PwFXkecW
TZqff075e1aIAPrXvuPSFStL6VCuz/cWuV/0/Kx1FdR4yoXvR39c5Fz0bF8d
pY9783+j/yoYKY0W1FPXbzLfB/cHVkrG6f9toMOqEd5XZL1PzLWnmujgevRK
HerB7x379+e0UfFqk04B6kdSzvjqoR4qnkefLkP96V5s9ejkFGVPZ7PDUe86
m6d9m/5Q8aPwzyPkHprYRrm/dNjPfDqIHMR/wKiQjwENkV47cX2WnHbparcg
A04KXWORfg9r2rTZsxig9l+8C/Jd3qVfIcIMkNG4dw7ZQfPhc4k5DBhSdP+F
PK6RnmUoxoC7A3V3ST+JgW0qZ8QZsMomgPSj2Dsrr7JjAQPW6YuRemJ1A6b2
hxcxwMyWn9QvfDV83rJMkvq7nUk4cn1DvNMCaQbcT/C8gbw4O7U5R4YBoh6i
P8l+blMe/LeEAeU9EWKknovtsVcblzGg1CmXjfyz3E+uawX1eWkxX+S0kcQ/
rJUMWKKtTvpbi/YEj4bJMaCf9fsWcuXFZ+pLFBjAdlFqI+fr0pZHe65mgPnZ
uFHkmkbbwUeKDAg56DEb45XjT+9DQkoMmB1duAz5XZirjLUyAzTWH2Ih71fQ
ac1QYcCW5am6yNfD+R+P0BiQlrGY1Ad/rnw3X5dB3f+mIQfk5a9MqxKYDMi8
sGgP8qK+ln+fWAz4Mj/yIDK/uqMVk8MAVRojjLxPMf1UEsZlwDv/BdGkn0rp
DtP3PAZ0eCnGIc/Xah5dpsaAM+fdSP7Vri07HnurM0AitOz0/+s3dl94upYB
x27oEGbXBV+Yu44ar5S3J5CPHFhZuFOTAWXtruT8wknlluFcLQbU8vGT8w05
iVlGf7UZYHAylfRv0dh4tthch7o+UUUf5FPf0jZdAQY8npvuRK5/4aupQV0G
tC+fsQV5tuuCctBnwJ33enrIrw/H3k00oOwtdxsT+c5P2sMvhgwIMgUZ0o/G
he8jdyMDwjQHBZDD/GdJRxsxAMR2kX4/U8WGBxuNGfBs5/F3pH57+7NBRVPK
Pgtd7iJP+h6KCTRjwPtHfacJe96dt8yCAbbTTRvIeZXZa//6WDKg7QB7BfLL
M3PnvLBiQMWw1Dja2/LG3BC3rQxw3u2TSuyvKvzzI2sGfEir9iD2vDzXRcSW
un+Dq1zkMts1z+9uo+ztsF8pOR8QEJomsIMBm/TdYpDT92idsbZnQIlQthHy
QkOhlikHBqQKiJaiPymNMaqMXRlQ3eJyHv3T5rt64iU3ar69pQ2QHa6UHxh2
Z8Byla8/0Z+PPIlNSvWk/LcmQxOZvbO05ocXA4TEY9txvbOee0ZZby9lD7Td
IYSHp9X6fRgQfm/iHqnPL5Hep+PLALnA5A3Iuzv7HiftZ4B7u0Qzrn+O9vvl
rz/AAI7B8TGyP1BeJZIUyIApi5xW1CPv0qHsviAG1DfEdeJ6JpfRtFsnhAHZ
r54PoH5tlp3U7g9jgPe/PhnUN4d52ta6EdT1txdqoR7Cui1xyUcY4Gh63g3X
M5dlZpkbRDHARppH+q+kq+W2pUUzgLG0ZjZy/C612OFjlD39xzbH8wN2mQJa
V2IZsDHn73fU54RHv4X/nKbsW/q5H+q5+1dazJYEBhgtjf+K+m9a7LbqdiID
rk2fsUe20Zp4uD2JAVJCww4YP4TMbHLun2PA/tmKfRhfmj5UPRdJpvwr3TgQ
WUxR2OBJKmW/nqK3MV59tW66v/AC5b/Rx82Q57x/q7P3IgN+SGSR83tzSwe+
v7pEjbeE/VXSz2235oNlVxjw4mj8ZtIvbrT4wqGrlH24skXIftC5g9eqrzFA
vIhZjs//alGeZWsyGGB64jDJf7s8cnFW5HUGRHROWiJfkpDY3XqD8o9X10j+
0a9l9T28TAbsNnAYJPXG9DqOnr7FgPR9y14jVz3U0PmWxYAu23fXSH3r233S
ercZoCJuH0neR9iNiF3MYcCrvEceyDMHbRUnchlgvPm9FfKVjOX2lncZcHnu
aUAezzK5m32PASN83aS/c59qp6zgfQYUm75QIf8f3HVvVz5lv/PF1yCvybXb
VfSAAaz9Lwkv4TOgLSqg5u98KZ30q8/MkvJ9xIDCTAF15NCmUyurChkQWeNt
gHyodMx4dREDPmmPkveblle+JBx5QvnniiN7kKsv75hoK2bA55uC0ciPx12C
1j6jxkt4Xzo5D9D0b2lSCQOKgm6XIncc5nYMPmeAoVrWN+QM0RnPTF8yYM0h
G3Ecz5jWY80zyhiQEXSY5HOJh+kvcnxN6ePzyqvIUV9y9hWXM2D76aOkP2FG
yfmIg28ofWzrI/0YJ66sUK+roq5/yC8eWVHcXZT5jgHzHiyrR1Y7qLWwr5oB
snGJLmg/l6obDDbUMmBMT/0e6S8Zq3kuo44BN389+kfyJX9EnXH4QPl70YxM
kk+5OPTfhxYGPBxslEB7tlv2V5HXRv3/c/dDyNPL9+07086Aw+cMWpAd+9k7
LDoZcOlXxi30D74t926+6WYAfUDQAf3n5tDqcqVeKj4tlCH9+I4r3xWK/UbF
h4+D+ri+YekJdm3sp+I7N42F/seXrS1ePsSAFWF8S/F9kvitkxurpih7cn6n
gv6ftWnRDto0pbdmVXnI3VUjp079peLDC/+1qBeVsk+tLPmZ8Ks5bCPqycPG
mZubhJhgujCF5L96l8zV6BdnQrLbxxbUo0x2m775QiaUGi5dgXr1oFDPJ0+C
CVbCKi7INg3fVh6WYsJg6bHvyE798wRnLWPCWt0NJN9D4uu+Z8prmBB62HkU
9TSj99GreCUm1OZsIusfS63W72PKTDA8FrQXedGtV+dL6Ezw5A8g5wH6OCne
NlwmyG0UfYX63bOb5V/MY0LHm0X/IRucLkuRU2PC1tKl5LzllYO/9AfXMmG5
GP95ZEOnQZm49Uz4YKRqg/Gmreir7LAOE2hpWkeRW6/93mCnywSnwGnSb0Sh
9+ToagMmPJsRR+LfZM6ioNOGTJh6aaBM8q+r38lObGACa20y6Z9w4nfb+zJj
JmwL/Ez6t31z12qkmzLhmHNFETmPx9c2fc6MCRwthVZk1n8lhn83MaE1eZDk
+0cfG8h1t2DCKuEVUvi8XtDsplZtyYRm2dsc5OOKrE/qm5nQf+gEyReXjaxI
nG3NhCyeIskv9524fMHPhgnjVbXxJF+c11TWasuEz//upCMP7jsoZriNCUv2
FJB+FbfaQoPvbGfCoaxPL5Gd74wJSdszYdRWjuT7f5HuuH9kJxNyJQ6RfH9R
y/Xh/Q7U/IbVfUX2iFm819qRCavVmSTfqWnEP7DEiQm9HUdJv431r60ylVyY
8F26guT/y6s+Gj/ryoR5saMkP9/b/5brXzdqvBqmyd/bHiiN7fZgwuTVDvL/
a+k61+t3M0H7/Cny/QZiPw6s92LCZXsBct6gLFHdPWsPE4ov8cj1RXTLHZbw
ZoLtzKXVyOt08rPDfZiwU+se6dfRWDcw/X0fNd4j3+4it9bX77fZz4RZjU8v
ItMP7RV66ceE9edWk34d934UPaEfYILgZxnS773PuzQx9SAT/nmd2Yr8VDnu
uGAAE/52R6kjD9kuvLr/MBMmBL+T+TNScvnYHsgEgYjHJF8/ti6UbRLMBEeR
/hqyXxfjcbsghAmB9oeySH5+sPyGVWHUfDO2hCPv6yrkTwin7EUzcDPygdbD
rZ6RTNj+M3yI7OfV50w2HmXCpnmWT5BPz61caxDNhCPbjYg9v5SqWrziOBPO
HUoQQXawePzkZCwT3lZUV6I/2KRcDfsvjpofU8ljyD70PR6Np5jAm0geR3+S
/mxzyiCeCZ23Xt5CZh80a7ifwISIjHo75K657mXxZ5lgkhRzF/2TkV3BM01l
guhlK3Ke54NIoEtRGjW/LyuqcX204PvWfKWLlP+d/eqGbD96pUD4ChOKjvXF
oD40t/w2rbjOhDu9+iRf/3ZzUNTam0zIuzW1Atl23LjjViYTLpRJknpsM6fa
x2OzmaBRU92I73uSS3c83HSPCb4ej/xwvZM7/1dvex41P0WldrjeedTbouuT
T12/iZ4RrneW6Z/bE1/AhBlZdH1c37iZHNaULaT0YqM7Wd8s6S7m5D1mwq6S
W86ov/ztR5Pri5mwTrDrBr6v6Xy6QNDtGXU9JTcbUM+/aixNmyhhQjpdVBS5
XqRwnUwpE+pXb03C9c3tLpsNOa+Y4F0sQPLB5HbFBq5/zQQ/mX5tZNkNL21c
Kil79eYnz/fWqh/4Jt5Q8xs3dZi8/3ifVHf8LRPKSsqHMd7FbZ31dsl7Jkip
mPmRfrvC3B93qqnr++HzH8bTvbTlanq1lD4qS8YhcwSqb36oo+xNdM1KZNeq
tH9/PlD+vU/eDfdHHPRe9iY0Uf61tZX0I+Dzr/gl30yN7/VzZZhPJn4ln/m4
hQl7UjUikG2F4+I3tTGhxS9XF/n3kJXUl3Ym9Pg1zUZ+kiZefugTNT6fLn3E
/Ri3jdWX53xmQolAby7yco3Ey1e/MKFKKTUWOTtv52vVr0wYvpG2B7lmZJ1k
VTcTFr+tJfnqheuZpx17qfEck9dDVmgCxsQ3ar5DgtSQO6cPTpz4Tvnfy0KS
rz9vvKFn5QCld7TXhA/9dfn36AdlrytiyefbdyiB+SATMmZ90yX1lS1Usr4O
UfawtXIzcpeM77rgESaMHVroSb6P7++o+BgTHvbkRCGL67Z+uDVOjfeykBtk
v2nFvE6dX0xgpHhUIT9pv7ig6TcTRj5aTyCbPz3l7fMfE9Jc6atxfDh8vUOC
f5jws7RhO/Kmb3cuXppmwr6jnCRynuFRv6/qPyZYcOl1yO6xPpUcfhZEPDq7
A+fHWdxi6C/Fr569vYmclXBIpUqABRuWak+Q85uTNztcZrIgd7cDWW9ukS+w
YQmyYM2ttj/IyW+ku/5QLP6JZo/2s0W0e+35WSxQmW4n52cj/g19rBRhQYlF
Cdn/8rs8Onp+Dgskj80m74fknzuvchVlAf3WDvI+KGb+2ZK/c1nAHbpfi/ZO
Dzz7gyfOAvtV3gPoDwFmNXI3pFiQ0iF9Ev0tN0VW+Jw8Cxo23ib92YvcSwtc
FViwveJEAalf+0EtiLea+v1KRxH0/8NLLuo0KLKgsK0gD3lOx6NXEiosMIl7
PI3rjfFFw0WpbBastrSKQP3R3L2o0IvDghiz+6S/fKOX1htNLvX3Jj1S76Fq
5hV6B48F1hdekPo851bPG161lgVjrp9qUd9Wnr9yfpziIlN3KdTHi0/NrMo1
WOA+WbQDWaZQSGiPJguE+y52IstNWHrnr2cBa/1Pcl6wuESqOFqHBX/9T5Pz
9+1GC2XtgPq87AVSf8x/2UPFaV3qfqwryfqgI9upqlqPBfuu1f0kz/PBFlHp
+iw43Su1EuNJg9eUqpEhC05MKUSQ+ppVJYwlG1iwNa2R9A+rHanV+kmx7Ycz
pH/V3CUDKUlGLDBqnF5N6t/u/K/Hw5gFo8FJpsisfmcTTRMW2IQK+SB/9bKw
+mLKAqaHWQ7yz8vNYw/NWKCxXrgCOe/am9zYTSxQMN/3mexHJCmE7DRnwecz
B38jyyb/2MW2YIGqyPy5uH9RWqWwTdCSss98Jtn/a91c69FM8ZzEKgZyyKbR
E7lWLHC+0ahJ8rvbTpcd2cyCqXED0p+hWzZTwmYLC77GipD+DNc1dQKVt7Jg
pteSLchZm7aP/qVY9toeks/+IWAqst6aBXWag1uR17cqrLllw4LzRv/vf1CW
0vYlxJYFT5scTZHNa+XyrexYcGBKTQ954MZUyupt1PWWi6khR6p7JU1RHL/5
C+l/MHpz/42a7SxIyr8iQeoHL1r09sYOFuydqf0P7z86w1Y42J4FsY53SL65
l5/Wdsud1Ph1974h+UAZr18oOLDgel47yQ/aZzO5fori6p6jscjWuU21Nbuo
681874LcVuEadNORBfnS99ch91ZmrA1xYsFjR7l5pD9abbLoZmcWSN1a2EH6
u/EZTCi6sGDR4qBs5ISA2+PTFH/8ZEz60S22qxVpcGWBg3LAWmIfza6HItxZ
MDTnySOSP/7k41sbDxaAcBGpR5EZJ6VB382Cps29ish+BwS2tHiyoCrv0nG0
76aaB3x5XizQWTef1B9ZdHn9q5g9LKBNhpN6JZrzu0+qerNgthRLBnlybNYZ
UR8WfPtt+4C8n6yel9tF8XIpSxNkVk+D/BlfFtTIRXqiP0qrpS0Z8meBSPIN
f3Je2J5XU36Asm+fWWQ/ySesKu3KQco/e1p3IhdpTu+3CGCBk9gdVdSDdoOy
NfeCWFBp2qiIzzPzdlw6dTyYBcV3fYrxeeev7QlhpxAWaMox7fF5KOnFI1gQ
xgLd1LxiXC88PfC46OARFtglhP/F+J//ObPGPJIF8nOW9OHzWXhO5R/Fo9T8
1A2343pggVRBcksU5R/rWrtJPrjEcaEH0ZQ9t9//jXp4WeXiiVPHWODbaLEI
2cwp9SMcZ8HSaRfSP/5ue+xVmVhKPzZfJf0wxZhVYWMUnzem9aI+LxS1CLt1
ggXSl57GkP6f4ylXIk+yYFzveDfpZ7pPr8n+FHU9y+lmyPo1L2PF46nx0kzg
YvwYlLg2c4DiwW8LH2A8OnXjx7nXCSx4eeOPFuknxc7RvpZIfT+X/h7zK6Lc
O6eCz7Agwea4B3LE2Kkam7PU/bUMkXzwZXGFT9hJLGCcNL5P6rs2ujwVPceC
PToHXZDDY85+6KX4+xubpchLN5nOLD1PzbdIbRvmd9R/OG18OZkF7W2vryMf
rnG6EZjCAgvFJQeQ5w+US1mnsoC/7p4JsmfTq6usNBa0VHqtQd6maw+iF6j5
4KPNRf76MXGil+IjXk2/ST1+M8/S0ossGBGw7Cf53GY9N69cYkF9+eGvyBei
Ra8FX2ZBzxMeYelbn/Jsr1Dz3+NO6uVfcXZp5l6l4tHmkQlkPtcLUmLXKHsW
K5r9ldjTib0DFIdxr8khv59Q+1iRzgKzD3G6yAt6rm2/kcGCnQu2uyM/baoe
PXKdBf/mjCQg3wt6leFwgwXNvaovkEtCj3pp3mTBcLXwL+TBeDEj6UwWZI9s
4uD4iTnu0xqnuDzymx/yxMWMjXW3WOD16EkhydeWvpB+Mpu6f75Ukr//8KHb
iOdtSm9TPW8htwdJbNuYQ9l7xz9+nO9KDfoegTsseHBTpJSszxIvS3ZSPF1j
SPpRtL4VaH56l5q/8fpzyOtu308PzGNBXu6hQLSvj7cFs23vsyBAZDOpJ/HD
dHuFaj71feNzvdE+/1OQMhl5QF2P5sN9aL8vnDc47y1kwfv6dHL+YTB8rpzp
Y0qPPrhwcP1wO3/0t1IRCzIdVlYim8jQBnqfUPNnK/uP1A8RfPDNtYQFvUIL
49Df0uy2abu8ZsHzhwIzcD2/sLnKV7+cut54vcfI6g4pT1ZVsOC4cpEv+rMH
xzz5ayUV/4U7v+DzQaRckofHO8oflUdrUA++rHnps7+BBYFlH9pxfXFi8PTi
LR9YYG6wQgv1RDZrqJXXyIKLPvJpyDH3jmT+bqLi30xla9Qff7bu9iOtLGjd
e7EM9YpPYB87+QsLFk9NHCX1oYYNbIO6WOC6IqAJOe3l96SdX1lg2deghPq4
qPSBrXwPC/g0Rt4gWztmTd3vo+7vPZvUGygIdOs8/50FZVLLyPk4o/557UH9
1Pd/CCD7DYFn1i7X/8GCY08NyPOn1gLz5w1DLNivWrwI48WvuW2uj4ep9QZ/
BqmHOPXxwMrLI5R+Xjzx//iT8uGLxxgL0s+pjCMf/X6912yc0r/r5aRe+IHy
UzM5E9T6p4tB6uWHtxcd+/OLWv/tXXMfWfuA0MDn39T64fCVVuS9VkGe5ZNU
PNK4LYD5D+2rZP7l/MeC4EXrFZGd0vpyzkyxQPGQiTEyn+uA3+E/LJj/+uVu
5DjmaiuHaRbs8EuNJvnSt9M2Gvxlwa7vz68gN8dsslH+x4LLV1QeIR/00wsV
42NDleDbKpK/LRNaPEFx5ZmkdpI/xOCXaOdnQ+azgAGSb+1Qd7RUgA23Zuz+
jWxgNzYnewYb1nbY8mN+x/wqr5yEmWyYeKsxC7nETcMtQJANuZZ8IsgKTS5q
DkJs2DFwaTay0fsfKwxnsUFFQVCI5CNNtqykCbPhUOSaf/j9s2cztRbOZkP5
qf/GkMOyqQc1ihvqvHuRlU/JFH0WYUP0pwONyB27Hi+rnMOGIX0Bkk9+tfZd
6j1R6vfOCGcj6ybuYKTMpa53V9Bp5Oub3FvD57GBrmuyDznn4fBVj/lsEKn1
MiPff5g/3EKMDbVZ70n+u4JB6kF1cTY83L17CufLp6I4asUCNkjkKr8j66n8
fTmzFrIhSFr4AlmPBZ8x/CjBhpjxDmVkvYLZj54vYoP6w6cDaC/bF67QzZJk
A9/ayGzkdcOcK0HSbPi9LmYx8sfqtf4ui6nxl8l9g/aZe7J/l5kMG/xCjgYg
t9u7H12+lA0ul0RJ/9KBd6pFs5axIfLddRfk6o/PZw9TfN+p8C/6Q0yA9Gjp
Cjao3VtK+k2oeg6czJVlw9+BzQ9I/ah7cTrJK9nw+Ey1FvLoJG/QaxU1n6oe
Ouh/PtuNBrbKs8G53OMxrjcaqngCOgpsSO4LZCB/vJh5eKEiG7RkL8/G54cR
afuEp8pseBZ/MBL9/+zKK1tvqVDXV5tYj3qhev8j+yyNDWfsbcj7Cg9ZbXVP
BhsOHponieuPbl+fXVuZbOr5azgA9ebHi+tXdVhsqG6L6cH3s21tbB9JDhtm
qG/oQ/0Sc078j5/Lhqh25VB8v/vRYdbVHxT/OK65DJ+filSN1MpU2aCttP0I
rkecUpMTDmpQf9/UQfKXe2UUepzWsUHj4YFy1Nt0/oGt5ppsKFmmTPIL/juo
HqaozYZPdXs6UK+7nr1aK7GeDXlLH06hnot8vSjKr8OGxc7Jq5BzNXT4WoEa
3wXXzmC8yFVYIFuhywbpG9HNGF+euupue6jHhj/hocrIkVtrb6frs+G7vkc0
xqe2za+lEgzYYHp+5XeMb75P5S+FGlLzs/KEHYnfw0OaezawYfxcJOlfc5f5
tWyDERs6xM+3YT6p29jCPJ4xG0bP7PNFHpl8+VDOhA0PBq3mIv+5NF4vZkr5
1/CSfMxXdVp/b84/iv955JB67xVrf9n/MGOD/eov0shN39+Xt25iwzyhix8x
H3bvfU2zN+aUPXYXXkVm/ND9XmjBhoW3pPYjf/jdfS3Tkg3X1JJJPvISLs3/
vBUbZoZLKiNfn5R2iN7MBpMDBxYgW2Xfcz6whQ2P5iUIIJen/4pw2Urph6nR
f5jfmwMjhZutKb2ih5B65p8+XxfRs2HDh2IRPvy80NeFh9i21PgI1s9Fbr6u
PyVrx4ZLMg/kkBdGrk0T20b9/4JT65Htmic2821nw3MRbSfkGOGjCkMUy8pn
xCFv9P4s3rmDDS+iLxchr3eTlK6xZ0PWjnnDyCbmq9c+30nZX1MtHcdH/Ngi
v3sObGAyKnyRzby+lV3dxYbCizWPST10uwxuoiMbNrm8Ecbx73jzxd7PmdK7
RfMLkeVFfKVdXNiw5aK0NM6nx5uJH1tc2dCdlxBK+hkZCvSqulP+9NuYzP/s
J/Eiih4U/zR+h9y2Zo2R9G7Kfv6obiTnCV1OiE95soEtb2mM9kU/e679hTcb
QPwv6afVJDxem+/DBoZUzRK0VyvXyM4b+9jwBOIKkTfqrzWL209dv7vqNNr7
589xDlsPsuHN77a7pL9lWb38xkPU+A+7uaL//AvxFlwXQH2/WwPJl5Jrv75I
NpANApWdZ3B9z8u45PcjhNJjIc5l9L+FxrFyp6IoffS4MBfXFzmzmw93nmVD
xazPj0j+21heYmMSG167+6/E9YG3p0fZ23NssM0KjCP5c16BoY+T2eB5O307
6o2M8ANW0gU2LBvLGUY9+hHTL3viIhsM78iT815KEXK0yEtsqOGeeYScbXn1
rO8VNtBezw8k73PvW2eaZ1B6ebGd9G8uUZ3hu+E6G07zzMj6AVbUb1l/gw02
CtzLyBkX+vcyMtlwPlbFGPU4Miiwe/5tNqSpiseR/n77HsQI57Bh+45T5Dx7
cCHPkD+XGp+5guT5Xu2p5ILRO2ww77xFzmMtr2sZbbrPhtWO80m8Wp5Z5Fub
z4Ybww+6kCueCsyuesCG9d+ayfkjN8X2E88KKP2Xcz2CfE318KHCR2zQCc6+
h5z052TI/UIqfrlw2pFZKqqtN4vYwFGppGM+p6N5LffaEzYI8h5bIUte+515
oZgNF2Rz/ZB/RdxVP/+UDb4nzyUgfzX970vCM+p+F7ncRo7c1Z51ooTyV3uh
UuRDi3eePPacDZKCvk3I15pC4468YMPxBwnfkDN/6V8PecmG0IXbSL1zvab8
5oBSSv/ePubDfFiVhlpl/1dsuHw6g+THCpmlJ/uUUeMpPGsO8sOLSrJeryl7
/NEggty2au8rt3I2bBudFiL1z3V8opwq2HC41u8ffr+rGc9xZyWlP3rypF64
SdZL221vqN+bMaMb+WT+sj3WVWzY8OEfqRfeVWGcZvWWso/Dc54gj20w7d70
jg2x+ZJXka+eWG1m8p5aX5gtOEL+f+zT+w3VbFg+f3Ansv2nYG/9GjaUvr6k
hjyS9VcRaqn51J9P8qdH8/b+1apjwyobXivOh5T1myGNejawGqZvIksPL/mn
1kDZd5K9D3Jal5sS7wMbNH112cjhcTn72I3U+BpcGkR78NIfq2U0UePx05Gc
9xLYq2tJ+8iGY1ahDmS9dHT6qmILFe/qjhahfT2nH/RXaGVDb4kFqUdw89kM
51VtlL0Irp1BzmPNCTi7ooPy1y0ryXn9rZGujcs+seGLzswqUi/LJkh1aScb
XDeV25H+7PEso8VfKP28m0fqdzndbZ6S6qL8d7qI1EP1yCiukvxKrdccdu9A
jg7XfS7RQ+nFbn+yvrhh9OKP+Hc2JJ3LfIL++9w0/4x4PxWfnBlzkeXEBQzF
Byg9y/hsh/5uvq38r9hPNlh/TezA9cTl5A1C4oOUPsrsl0aeOZ+nLD5E+QdP
1wzXE1YrkrzEh9nwVeZMKL4fXSfgXS4+wobdjEuPcH0xLlgGC0bZkPKmKxz3
Q4JMrzUuGKPWM9p1W3C94Ss7ZSsxQa0vz85fjuuN6uFI/UW/KH+bWiCBemUW
m2Eq+ZsNv/QVF+HzUsjp0jzp/9gg9qqf1P/dtv7dfJkpSl/zLLfh+mPv2qi4
JX+o9cV3ZjTul5jFz2tc/pcN636+nkI91GcM3JT9xwb/K9wNyLEXTiTJ8XFg
jWdUGj6/JbrJv14twAFvay1HfD9sPXONiNIMDvw4bVeL+po5zr9HZSYHXs8r
NUUO3/7oG12QAzf32VSjHotv3XSUJcQBs80/diBvnlG5jjuLA4k7nYdRv9fF
MuerCXPAaX1CPPK00DE+jdkcKMm0UkNOvFQ7T0uEAy82H+lG/RfwkVqnM4cD
5/9OXkTelmofqSfKgQjf8/bICXCz13AuBxr82fLIH6MmPY3ncUCg5QbJN1kT
s2P2pvkciAl6/wY5cHdtmaUY9XfuMdJ/54+x45Wt4hyQ6s0k+QjZZnPP2y3g
wMmIeaHIpxLbs+wXckBzMGk/8j2NxhZHCQ7MUZIk9QBmu/9Z47aIA0LK3vtI
Pou6dZKnJPX5sQNkf2isunupjxQHOuKFjyP7WeS/9JPmAG3OjMvIIU0vowMW
cyAsSKeIfF/sYvcQGQ4Y/k5pQ14VXexyZAkHpq9/n4n31zRwL+zYUg7oZ87n
Ist8nio4sYwDz1W63JFlj6aLJi7ngLYbkP6Zn0ezws+v4EDcSYFPyJu3Sold
lOXAxc6Zq3C8W3avjc2U44CcknoR8ojDxP7cVRxof7xsLs7fnwrG4Xx5DvRR
/kc4ZFV7yWoO7NposZLkDwnkzG5R5kDTR8e3aC8LVN91dKpwwGv5fUB7Wvs1
sbaXxoG9DicLkQM1ZcQmGBz4NMfkPtrfwT0Fwwu5HLCSH6xEe21edvTBEh4H
jsucskF7rtq69NwqVQ5kKyR2Iw82VNzlqnPgVPA6EVyPpxSlmlprciA4YqkX
+ssvwZSVl/U5MFEURc4rPgtPKs004IDINuMZ6J/Np+8ezTOk7PWFMznfKD9s
7VC2kQPyy6InkG+7jIb+NKXsP/TMWvT3T30/vDZs5cDDTjqpN7tCTXPYypoD
7KbJH8iuaybP7bThwKpbRWR/Vfpo67qDdhxY96me9E95eady5IY9B/wOHqjF
9YJ7hYr3/Z0cODI9IYbrA88ERaESBw68Leo0J/lwd/mSPjpyYKNWRhlyeEXF
irluHDjdNHER9cxiJCZexp0DP33L3pHzAHWzl6/x4IDwTp8/yLNPbKlS3c0B
nbmda0g9RC2vZH1Pyn7Ghbcgz521JdLKiwNFp5uCkN+ILjy5aw8Hflutu0rq
CW+i/wn25gDH6lAX8lBlonOcDwc8E2n8qL8lgl96U/ZxIGkmm9SXzl656mSm
LzVePD/e/+sfb7co2M+BwtwOY+Te0JPsMj8O6PK52SO78pVwGvw58OXZKMnv
lOid2Nx1gPLn8ECSP0nbonFm5CAHZrd+JfmV19xODPEHcCDIW/44spfOiLf4
YQ7Uf1hN8jOL+f1FVgZS+lXQQvI9T75b8JoVxIGz+QySr1lb2ngVgqn5OCQe
QfJNBV+lWYZwwDxrP8kntXzwKd8xlLKPKW0P5INDjAHfMGq+l7pZI7u3Fugf
CedA+ssPOsjS50OKEiM4QL8eRs7zHtGNtkw/woGnweYkH7bp7wfB/EhKH4V4
pJ6S2KB/S+lRigWXlyKv5Lq+b4jigIHWFKnfDAO3P3dHc6DRt2gvsoumpcSv
YxyQ8TbRRD6na+MufJwaz+lUQeTPK0qbFsdywH0kmdQP0Pp1YbdKHAe6l3FP
Ibd/65bWPkHNt/V2E+SiRTe/mZ+k9M//jwBy+eXPTY6nOOC4WZisT+eafJKI
jqf0o05aHHnDndvOyQkc0NOcKkB7HR6ZVZOVyIEZowJ2yI+uRc2uPktdzz/t
E2jf05vufvicxIEprsUy5HcOYS/GzlH+dEg3m5w34Sz/LZPCgbUzox/gevum
+qQeI5UD1RsfsJEDFE7l6qZx4NLxiCz0t0Sdsc+7L3Lg+oKc4xhfhe7U3g65
xIHOPX2D6J9/fEPOJVym7l+o0hj5lZNZReFV6vocbrRgPJ21NFT83TUOhOc+
SsT9g5GxhKDP6RyoMEy2xvj6pSUwR+QGNd6zFs3AeLqkYfvBFTc5UHvZYQDj
6YpXag68TA4Ibnv7GfWG7fQr3iGLA1t37RnC/QbD/3o/+mdzQM3KaDbyAed+
3djbHOjKu0pHPXsUP6vqcg4HhtxMdqLeGR3WO/AglwP/7JakoD6uWJCu/eYO
5e+hfe3keWULTbHzLhV/3scxkF9kfNwuep+Kf1OXB1GPla8I3ZDLp+xz6Oku
ZHWZgPkaDzhQoC3cQvRdhJVm8ZDSZ/6tDsgrPNQN3Qs40OwYMIDxg65wViz0
EXV/0UZRyAKaxn/OFnKAmXGJ7CenXN4lfPsxB5xHzGrwfbDihjbeyyJKX/Jp
UcjZimVHmp9Qf2cu1EWW1pAdHCrmwO78RiFSj9l3NET4GQcendv0AZ/f7F8Z
qMiWcGAp1zwHWV5Z5j/15xw4MHjnBLJWSmCfxQsO3FPd4I98eabnpMdLDtQF
fHdGBrefShGl1Pgx/LYj77o3PzjlFQe4rfnbkEdb6wbulVH+P+OYI+F27fDK
1xxYpl7ig5yWY8P5Us6BgyJqUaTeofYqoakKKp7KvCD9tp7FZP238A0HFouo
vyL5oBGD8+lVHIiO8vmJ/H3ZlOGGt5S+a65fgfe33qbu4q53HGjrCbFBDloR
LBH4nopXG/mTkM/vm8o5U82BQ6vSSb5jldY295waDmgZq5H6JhKhafC6lopf
p5J8kT1Wl2l21lHz8/ZsGXLjyZ9JEh8o/6iuCcf5+606OcJo5MCkd/FX5EOy
gn7GTRxIe3bdHOc/I3FtfVgzNR9B5SyMx1XvH8j1t3PghEirElmv7fWNFfrE
AXjIvo+cM2UvLtdJxY967fVoj9/KO6O2feGA6uZ6R7TXRL51U5U9HIhUC6/C
+Du03ks5b5ADi8otF6K/LLTky3w/RMVjz6FS5O/5qw0Hhqn1j1XxQfSvJlOt
HsUx6vovqLeh/929yS6++pta79CV7dA/w7aGFKfwc2FF57816O+Xe79sLRTg
wlYdwyPIegyN+R9ncIGd/+kj8rM7b/ukhLigLv4qGvVDy01NPVWEC88mljaQ
9XvYi0+P53ChlNMuj3pk9WdPdosoF4Qttxwg9Vim1G4unc+F1ibx+ahn5eOm
a9MXckE5OpeN+me0OHCkVIIL85aMHEQ2thp/372ICzRd80LkwcaRn0rSXCix
+6uGelshFsExW8wFj05lf9IvXv1Aio8MF27Iy+aS8xByWVX5S6nrV5Mk+fm9
9eMpjcu4MPlw0Iz0UzB+cXxyOResbPVDkXuCxC8sleWCech0NrLAzoFqKijA
6TiRRmTtHltFFzkuaPTb/EU+Lbr92rFVXBCcU70Kn4fYr39rZ8tzQWn7LlJ/
YvnsddPvFLjgbTbmhuxSterT8GpqvLcFkXrD82cUdy1aw4VFU+0XyH7zTeE5
65S4UHBvzn3kZ9nzrR2UufB9apDU0x0TanoRqcIFRecAcn4x/56rVSaNC157
T3ciq19+NuMtnQuamSv7kAPLvn8cYnAhJ33ZT+RjSwdrFrG4sH3Eh9T39U6t
7V/HpsaPLkDqD8tzUpQcOVyI/Fnag/y9zSgumsuF7vqrbcgP4vvm3uZR4xMe
/R45CCIe1KhyYc55h2Lye90LwibUuDD4XJrUS751INNr6Vou2OVcPUHqE3/V
D9LT4AJDuGvv/+t1/MzZvY4LXTFvyfuTas0cgXhNLvh+MSb9UM3FooIfanFh
R93GCRxvw0vBUm3aXLi/KL8M+fbHlEYBHS6I+hwm/Sn8ufbPLHUp+zr4itRH
LF0/rzdAj/q9IvkGtIfvNdOcK/pcMNA+c4L0W/7ESn9twAXXukltcv7GKZf3
05ALuyyN+tHebM0Cvy/ayIWERK+zyPPOp5VqG3Gh3X+TGnLc8vFPp0yo+78h
vJf0szJet6rAlAtuL4r+or2n3h6I7TDjwtvFn08gl/2494JpwYUMWH8O/eXN
4/dn7Cy50PjbXBx587n9MUesKPt9HhOD/vV2s0Nr/RYunAxUcCb1eWUfrJve
yoVHvq6vMR4XN958utqGC9ePhssju9cGMYLsuPCR+fcd+vdXufBiuZ2UPwuW
XkR9uPHQRWOTAxdstk1p4np84IJUS8AuLphpuZD352mGs2PeOXEhcd4MH4yv
3v9tPfvbmQvGL1sNUH9su0+UrnLlQvkpBSWMryehKT7InQvfLMwXo34tTJ9U
uenBBblN7+VR3/yWrhqo3c0Fy3382hg/193aXjPtyQVP80In1EeD9ZkflfZw
ITeu9Azq56qm+YI2e7mQ/na0GvXVa88F60hvLoiXLV6MbOGp7tK6jwu9ZbHv
Uc/XvLKWFd7PBdh2cB2y8vR9flU/yr8LU/MwXvSK2sxy9ucCt6Sc5PuvHTBk
xx+g5te85jmpj3o2Nrz4IBdUraJIfbhPU4ojfYe4cLPoAamvmr5sTazUYS6M
RXMykU8MJxgYBlLzV/B+J7KKr6e8fxAXQu22L0e2P1O45lowZS/hN7/h+/48
y2ir6hDq+42iipGLMxovT4dyQajpVSqpFxuVL0YL58IXO40IZIl+ucztEVwY
Ecgn9WWP1ag4xx7hQtaCGbuRY+gfdAsjuZD37j/Ct/5T2NB7lNLXyD1+yCEs
hX2S0Vzoi15N8u06ypuLDY9R9qo+fQl512MT5sEYarz/Pi9BTpwOe339OOX/
xvp9yBanQiMbYin7jbeWIffntMll5gku6FpWbkYu3D++m3eSC50Lfc8gv38U
ctb1FBd2ey0h/eP5ad+/JJ3mwoaBi6txPLteG9iWxXOBte51ELL5kbND4wlc
WDa9+wNy/Zb2O6vPcGFLj40azo+QutIZ27OUHt91uoSctKCr/PE5Sv+HJEJx
fml/HGT6z1P6MNOJ9CNgN/9OXJpC6RFb3B/jtZRl+lB4Ghde7e4m9WqdXeP3
Gl3hwu01W98OkvXns29BV7mwJv2RF+lvdlIvLvca5b/c+aTfPH/Qbu2F16n5
Ve8i9SoinvS7dt7iwrGupfJo/0/3nBCVyObC+/Hl7chz0gqbN97mwhtmZgr6
i9eWpq93c7mw/vlZSfQns719z47c50JL5pc16H9zqgKP04q5sPPu+xL0z6Q7
m29bPOXCidzrZP/Lf0XOoN8zLlyptQtHnvvyV9vj59R4d4qtR/+uKzhrYlxG
sUJBAepBed6CIO/XXKja4L8Q9cJ6D1QllnNh8clAUl+ogVNS11LJBSOQUkB9
OVDSf8jnPRealRKiUI8sdkQ+OFtN+Scnvhl5sGd84eMaLlxT0aejnkn2xK2d
WU/FM4mIGmQua97ii03UeO42nol66TNBd3/5kZrfU/1myEfb7T58a+bCb627
Z5GlFHsXq7VxIbvCagnqsfDWGK26Tmp+5wqIo75/eHctbfIzdb0jd4yQS1LH
ZVZ2cSH2zfdQ0m8w9PhTo69cUNiccY+c1wfHSN9uLtzZ+JrEu+zMSM+UHi4s
8dYl+V1RgeN+z3u5cDFGgNTbEDzUNSD2nfKX53OPIU/QvHZq9HOhKJB7C3mx
h92Q0wAXyuxtypFvf8+/EfeDC9I6rl3I9aGRofk/ucCZNPmD/KinMqBtkAuV
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
hWK5IFnmHoHrtf8Bf9+K9A==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2516191#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm], None, None}, 
                    PlotRange -> {0.5000281436779114, 1.5000844310337342`}, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm]}, AxesOrigin -> 
                    NCache[{Rational[1, 4] Pi, 0.9999827543212422}, {
                    0.7853981633974483, 0.9999827543212422}], AxesStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "(", "1", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], TraditionalForm], PlotRange -> {All, All}, 
                    PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"y", "(", "1", ")"}], "\[LongEqual]", "1"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Right}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Right}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{None}}, "Rows" -> {None, None}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{2}}}], "Column"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Sample solution family", "scanner" -> "ODE", "id" -> 
     "SampleSolutionFamily", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                AbsoluteThickness[1], {{
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1:eJxN0AlME2YUAODSyioUaKmMAQrIsbGD0ZbaFbAdXSTOgmiQO2OkKFUwq2ZF
Q4scQgWlOg5FdK0aiKU6M+wGdHVBxQGxMJgHhCzjEDcOMx2jtWVIObot2d7r
n7y8fHkv7738QXsP7xETCQRCwT/xb15Qv7+eQDDFEv57rJMGlwAHq2/JKTwH
C81aqszBmx9r/EwOPk5ibH3qhF5dqtDeI6Hl0vS3KshoQfmbg2QqOirH1ukf
gO4LlymP8NCKOwWTj+Toe3Uash/RDPaotSjPVaIra7KTda4vwTGTUqZfE/rZ
Dk7ieaYFbCHkrXMZRn+VSo+akVnB08GXm77zXQBHeD7pEDxE23+VBlrK/gJL
YtrmC7YsgkvCeGPeTq/AK73BNFMf2m240PzG10tg7fWXvTcabWCvXGVka/Ey
eOo+caZKsQLuzlvd1FC1CjYs28k63RqYvDea2jJjx/mFhrkDZwiC/81eZk/1
853AarUy3vAnmtG5fWDhGhH8+f7G2utlJPBEdD1FmrEOHJrh8W5JmjN4ZEKo
fSx+Dbyfn2SJkZPBKitdNd61HpwuSWwlUl3Bo9w140EZBTzw/bWL9e+5g5mD
IbMbzB7gn+eDZ3d/QQMbhizJ99s88T5z/ojcRgd/m9Qj5J/3Aodv5Otvp3qD
X2+gS7gXfMBLKTfDWDs2gsernf8QZQeAm87kZMftDAJ/M0rcsvIkBLw9NCut
UBAGTrQcu6orCwdXNwRmsF0jwWa33bZqCpo0wHr41A3tHvGhZy0VfXT65uKc
FzqsayJdH4j2uVCnP8hB28pVUmkOWrir25NyG91411juXcwG86mKbkYEB/+n
dL6dzESnEbIWJ1loxajySD0HzTBejH/FQ7e/kyobSUD3M8ekD/LRWdNjP3Rp
0XuUS5/2hX4APlBSyh2O5IKHijKZLhy08tCLhlguuiZX19y6FR0v9PmpJg6d
e0dVJU5DPz/LE4mL0G8rLB36HnThaf+7w59E4b7TlzTbstEm7o/kDhH6hNAY
1yhGGyr2XRYdRsdKGM/dFGhZXt1q7w302HS7qnPZod83fiJhDc0LytWOE6LB
Lcn9g3Zn9HHl1KGdNIe68fdweyi6SC+6NbALLadZN0mS0JqqTHdqCvoXpvBs
Siaa+dkJ1uw+9PjC3IsQObq5LDr4wTH0hiDfZ7JS9JW2j/0fKdAnMxMElTVo
a/5mE7veYf4pM2PqHLonhS/a9iW6/Td6klWN9v5INdRyBc2iOc2kN6OLSUdP
uWrQfwPbwJfv
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1: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
UtRLCNT2ZZWrrpfA/wBBZ3Dg
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1:eJwV1Hs41AkXB/DfuCwlYVy2lMpQdstmZjTN/Go4Z6s396zNdbfVEJXeZBvb
24ylSSKmzW1RUWJjkl20Mi5JuS2KVvHqxsRbVFubhnEZDLPz/nGe83ye73nO
X+c51qFRX4drEQQRran/98m8L/QJQg4z3Vyen58UGGdqFq3S+PGh8tA4jfNq
hQZcjWW3KPuLNXYbkxgJNKa+sDkyqfGaR0WWco0D94pF2f5SOKntsHWIIofT
TxbK+wKkMD9zStKoLQeLFFdn/2+kIOQHrDulJ4fkO2+dA/dKAePXdukZySGd
v6djb4QUOCGz9Var5HCpRL04Lk4KHfYC8Q9cObSpZzrkxVJIaIgefCiUg3Bg
3LFpWgqN6UV6llpjIJffMBeUVcPSNIX458QxUKbdaG3dUwOJqcG7KxaPg860
aC0srYUtg3y6ZcE4XDLQ9xb01cIbV5ZXNl0BOuG6gpU5daAgDuos6lWAYYR5
Q/WRW3Ddj8oZEUzAC0a874BHPQzTLhdUL58EIb2q35V2GzaavKjC7kkoVsd6
+Js1gPp//NUK0RQEVZ3rH1U3QOSWyo/Rm6ah5+rI5Vz5HYiz4/ZbUJSQkuqg
rCMaQdVKM5Z3KKE0lMGbTGyEJb3Hxz79bQZSS+q54VZNICkZby3NmQXdjnpa
e10TmIWJmWWxc7BzvMxx1e5meNWmNZKUoIKpaVNlkFYLNB+cX5mVNA8X9q71
NKxogZo5tV5FxQKEVnuwVx9rBb1Q0qh4RA2/d+qHtGz/AyTHaz4c+InA/I6M
CrFxGzjOOb6650TB9eXPqYbzbZCXJ3avGaVgacpw0MTbdnCo39k5eU0LmxVm
PuODHXB0f05aiUgb9wv9vM+q74GMzDDgB+rgrkeHlOfXdIJt4NL1cf66KNWR
RPlEd0GfzE3yKPwTHGrZVvCp7AHsd/JRbBHqYcxHVv4uz27InaDmDtzVxypl
DP+t6CEERHqVaRktxrTREAzY+wiesxfaDwkMkKYt+rfLVz3QWXftQsYGQ8x3
22wXwu8FepfNa9OxpVgkqKbVFvwXnnykvfY+Z4wPaELFXZPHUNOj2N1WaYLW
Q2c69S8+AduxiD7hLBXnmzePT3s9g999Wtycss2QZ7Wddu1oP9ivcJLe9rPA
xtz5LEm7DMyzqJHs88vwGE/0uDtsCGZ8y+0YriuQ+68zVGv6SxhI0f2bF7wK
c6ISK987D0PBTyHBOzytMazXs+Zb4zdw47nWJtULG7yfMLBGcuId7LTd438c
7TBjSlZ+hfgIXoofr1aI7DFb6dl5Xz0OKVmrAx0XM/HgOjIt11AJY0u8Z1MM
mFh4OHr/PiMlaHcyuoeWMNEreFu8vYkSDDc6m6QZMdH1P7L4u2ZKODZcPv3B
jIl/PW2+8XaFEuzuygKkq5l4OcKq12W9EpadT5ceYjExvvH6BdJFCbPxuXx+
CBPbYgfzRuOV4Lar2cTgNhP/cCvedGtWCTl32uMtYh3xaLtUeG92BpyMEpod
NrKQujy/L9tJBeYnPt7Uo7NQMGRqboAq8Cf2TA8yWMhwGGo6uU0FCc/FP2Sw
WMjZMLEv0kUFDu0X3JVcFj5Y/tUDDx8V3PzcT9DnwcLMSgNvq3AV3KP38/+M
YGH4EH3I9JwK9gz3N92VaPZnb2jze6GCr8Uz33XYbsbx+/MRIZq7PxB3gt3L
ZOPLV591R40uQE9MEH0Ri41Lgn79PnRsAcRH3mcBm40SuzeFfhMLkBpWUVi2
lY2/7dxY5TS7AO5uyx6k7mBj2S3+JbNP1BDWkJsU7s/G5rnsKzIrNbzL5PLC
Y9h4+L1PqsxLDZ8lKKqkLWxM9rmol1+hhuNnre70fstBtU2DP8eJQPHZS0Xb
gzmY+TnV5akzgXL2fb0qHgf/vpksFiCBp93ad+SEc1A0TBrc2k5gzal9l3lR
HDTOcptCdwIh0uHdkgQO6tvqJgcHECg4mD7fWspB7i+5Xz47SmD/8M3c+jkO
HmDOPum5pplf7i7zWODgjuzXgcnXCeRah0kGCBKrzTMcnX8lsHj3vS61rsbP
06dKywk8KX51xNOYxEDerupkqSZv/8tebUuisi6Q5ddCYIyUV9u5i8TvisOn
mIMECo0nVkb6kGhzMmVEMURgUVKQoZEviUe6RxnSlwQ+o7tl+gaRyN88+pLz
mkD64dOM1/tIXEftLdnxgcCByQ/vbYQk6vK6BiLnCCwUkbQ/fySxS39T2aZ5
Ak2tl78RnCDx0KP8gbkFzV+qdLF6mECi+IvRwLNaFDwT5IGJqSTGqpLuly+i
4ETEGrljBokd6ZY5AgMKDiSPObz6mcTblplN2wwp2OLrxNt+kcTvYy5znhpT
8OZLqs9EHolXEiNOX6VS0OLL3J7ifBK9x1LoUWYUZBhTRgIKSeQ8tXTaakHB
WO1jyYuLSDT245TqLaPgP5n3Wi4=
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1: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
3TwC/wsUxDDE
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1: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
mZhgsDd9bgmJRAC/zHgeE/8HNKVFeg==
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1: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
A/kuJh7Xif5Fr4BAr/D6zAWBTPwHFRdJZw==
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1:eJwdzHs01AkbB/Axase1YcLMjySazb67bcYwzfxEz7OHt1xrbYjVOlSDtOpF
jpmSKYOtqTBuWbaOziJrk1Yu7aa0aXOpZRCVu1xqU5oxLkV4533/eM73fM73
ex7r/Ue/EVIpFEqc5v6Xs4Vf6lAoSlj8fyrA/oc63fUaWyuoeus1Lrwl1nfW
eJP3aQNnjT1UpXSRxukTBQyRxhs6is2VGic3XbVSanxK227bsJYSfrYG12Et
BSx9SC69p62EjvDa6/e0FSCO3bspmaaEifQtdsk0BeDpTx/T6Ep44//vHhpd
AYKwhduW65UQfxeaLdcroHmzSHbMWQndktt5x5wVIL0TN6QQKyH407kJhVgB
9zKLaeZUFVRXuxmZUztgTYZalp2qgoXDKdnZqR2Qmh6yp1JvGlw/WO2r1OsE
p6FYjnnRNNTo7NhmXtQJL915PrkcNTTqr/o2l9MFakrkKt0uNbSuURjqdnXB
L/4MwbhoBiLGQ2Fc9ATGbC4V1RKzEMxuKq4lumGL8WA1ts9CfcOlW9jeDSsj
sVZqyRy47ixnqyU9EO1U9S7OcR4Gnb6fi3N8CidtnfvMtN5Dm//OGTOtZ/Dx
gY2Rsvk9UEw8NfkMDLoSVMxrH6AnkehjXnsOpWXTD8rzFkDnGlFdntcLJgdl
3IrERYiaTPGpSOyD0YfU8TTpR5hWW86kSfvhfuTSupy0JRDSBdPZaQNQt7hC
q6xchhy5qvN65SDQ9pP0kvEVkNlfMC4ZH4LShLq3EecpmBBQoR15fhgcFh1G
W1y0sIjKbmtxGYHCQpln3ZQWYsRh17qpEbC7vePR7FUqdta2189efQEx4XkZ
ZRJtNLQ4daJMMgoDpFw/NnAVLq77eiEmcAzYgWs+PxmwGs9I69eeDBiH7gGP
0g7hJ/iKwb3VIZyAcBdftZOYhj/Flc05iV9CwQyjoL9BB+nxt37tb3gFe6N9
Kqh0PXw6njVMpb+GXv5yU5RIH6tTtlsfFk3Co9+v5su/MMToIx1/yL94C5zH
GyfWqtbgfLWxo4lqCp6+s5nYfcEIzXsL5nZfUEJdp3rPwypjJF6V5D+sUgFb
dahbvMDA7YxfZsUL0/Cbb6OHS64J6gRUBbnkzsBmC5eaen8zNHK8+67efw5M
cxjR/IssvGHU8Cf/4nv44Hfd1t7dAntfthbauy9C/9nVb0JD1uN+2+ZzYSHL
UHQ+LMTN2xrPXRa3uHlr4Y1equPHwY34bH9J/sdBbdzB3heQgLb4VrSpMQFp
6KM+8XOlZDMOH1NzbkgM8GyOVaCDHhfb+qMmHfQYqDLYvXBWn4tiec95mT4D
tR/Ztw8bcPGPh6rQEQMGGm7ZbpxB52ItK/xKBp2B8WPX59+acLHSJitlyoSB
tg0De2usuLiVHjBYY8VA1sXMmigeF8O+lnAP8xi4cLogNjaMi7mXXs7EhjHQ
Y9d9Y/16LvrNn7iqX8/AvLtNp80SHTDX392CmbgWXejS+3ZbeNiWtTWUs8UU
TZPe3aRxePjtq7bdOhxTDKDsmx+y56FwY6R82N4Upb2yY3IeD6M2zOtl8UzR
rinf872zZr/24/P3zqZ481/+om4vHk795b7Y7WWKLZy+2LZDPPQuY79qO2SK
+8b6/mwo5aH5jSK/e6Wm+I3sw3fN7K24NTCJ3sI2w4iTSfwuLh9fl4f0dXGZ
2Hk8iKPL42NL8qknujwmyo5M5gCfj3e+iyaRz8T0g5VXKrbxUavGZuf1bUz0
9GD9ne7GR6pBQHyGGxMP3ilIEwbwsTPxBj88gImvs5xDhcf5KP/Pnc/DjzPx
M6m6uqaRj5uWqlJrG5mYcM7yblewAFdqLJKfBLNQdu6nYtcQAe7bXhjlFsJC
Jb+VVh0qwBeGf7dXh7IwxaPJLU8owIaeHqOLQhbWJR+4FHpUgETIkZiwoyyE
aLvXBlIBGtTSHhtKWSiKzFx6UC7AYHXEi7/KWdg3drPg9qIAC73mXesXNXvC
c8BrWYATQ0Gp3sssdLY+WNpPIVFeFOQzQCGwZE/L45XVJDLcn8dQPiHwlGz0
iLcRiamZ8cY+Rpq+6Z/NK2wSZ81WK1bYBB6vCb31aBeJBqL8mMe7CBQbzayL
9iWRh7ueRfsSWJwWZEj3I3ETf6KV7kfgc45Hll8Qib/6Cv38gwjkfJ9iP3GA
RLLQeWniAIH9s28nN4pJ1MnkPmKLCbwiIW3aTpDoYNim3X6CwLXWxEtREokb
nKZaxUkEXq7aaamQkrjbTbi6Q0rgD0FemJpO4u3jrXZp6QTOHNqgdJCT+OVz
2xFHueb/GZXdaDaJ5p8F24xlE9jo5xLq+iOJZfw3fm4/EnjzBcN3ppDEo+6X
d8wWEmj2VUFnyWUS5/9pay69TKC9kdb43isk+ruV9QVeITBRO/6MXjGJ+RI/
iX4xgf8FJW0z+A==
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1: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
qp08p51FYlfqlwC9IQL/D/YlS9Q=
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1: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
1jqWqVeGg1Egq4JIpsL/ADjoRrA=
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1: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
XzQoxqByd8pvS91Z8H8LQinx
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1:eJwVzXs81HkXB/BBjFtulcIaxsysaGKMppmf6HuerafWJaVcI4uo3GobK6MN
McsulTvbYpVCsqRCY5OmxRpFCtXWGLnTug5jyt0zzx/ndV7v1+e8zocYcO5o
kDwOh4uQzf+3NH+nMg4nRgsKTnXl5UJk9TNPhSDzNcXj9SKZ8+ui1WxlzjFL
4Gv8IUT2s6WaHJmvv614zpbZuLNYXyyzxZewPpsKIbqsYLmnX06Mgq491W+r
FKLVxYTSZwpidOIP4cuJ+0IUzfb4OgEvRubTt5wteEIE8ZR2vKYY7UqLeMxr
EiKW/1K9IUGMmjL5h0QiIWqlclJ+sBWjP+NYy2GaPYjbENH3OlrWnzVz+UFk
D3qWXozXl59F1J2GBu88RUgjTZKSlTiLPleLpFLrXpSY6nusSnUO/T3fN92h
/RHZ9LFp+jfnEFfjRcA71T409i3jUA5Ngv77VCn39nIfkuDObFDplqC7/jt3
0xP70V03HdYIZx7t4L+uCdYcQMMmv998pCdFToVHksNzBpCF9scaeCVFrUYW
M7XUQbQ+wDaSxH1Gdekseyl/EIXbPJyJ2PUFBSZV3fJzH0IxprY9unILiMre
c+ETbhitNJtoiVsXkHu9XR37zjBS746a3VqxiKozx688DRxBpWVzzeW5Swj/
OGSCtX0UbQ5MoVdeWkYfzv72bGRsFA21yI8kcVeQVLrtgrhxDDWeWf0qO2kV
xfEsbrzO+4R4y+v4qqo1tHKboHg681+ED8A0S0bWUeGaA1aTPY5Ko3hTp6/i
QGBzwbsyewJZL1sPPbeTg0deGR5Hnkyi/PwUB960HOhWnPjeamgKWdYfaJPe
kYca2vGR6a0z6Pyp3LSyOAXoD83R5iEx6sUy1NieG6Cz8Ztl33kxIntqmMe4
K8Jco2BEp3UWve21L+0MUoKwx2bNFuVz6JSdi8QmGg+VtQMmD9IkKG9eJ0/E
V4bBR3ppgzfmkUf4oUp5TVWwDrmotZMnRULmmiCEowaTTb4HvIY/o7Y/71zP
2LERlEQK5xedFxCtnTS6aVYDOnQDd4y2LqJ/ZkxGD1/TgvhQD7Fl7jLidUmO
tTzUBvP3wWsOcauIPBv8NnpJBxoimqcji9bRA5cme7uczeAzFxypbCoHVAO7
2iduulB3mWDYWiAPW7J1wpm/boMsllG7QuwGWHS9Z2r1rQFc0TXzMHuiBKJk
xUk/XwLEtH19o9RZBW5e9ffd70QEO2XjEvYbdbgvlN+18pEE33UlvzFN04ID
ZB/3KDAFg8cOL0/6bYJDkh9vV8VRoX63cWwDfyskZxt5WqvSQf57vLWcNgFm
1Q8vJavR4cVBLbDdRACFNqtX/ep0GJBmFkVtIcBGi73aaZp0EHa7BszoESBy
+N6Xqc10IKdJRIMmBDDl93rUGtFBsXlY8GEXAbb9ml4bwqDDLdqbNbwXAZbi
89hsfzosev/zTcgtAtg7N2qrPaEDs6DjrzOYEeQ+FcTrXrKGOwXakw22xmCn
yW20tGBAxauEkphSImyJnanG0xjgGEadUiojgjvO50ufFQPiDKnR6XeJwBWm
/JDBYIBCPse3uIIIloLrDgu2DCBqHfV79ZAI1WZunLeODCg4fNqFzifCc1oP
uyOYAXCVEEZ9TwSf4Z6/+KUMCLXryZeqmsDRlMUTreTd8L5w7+BKhAmcjoll
dtOZcDY1ekDRjQRdF71oKgwmlG0NTep1J0HK2YlsxGRCK4eWWOtJgtTAqqLK
PUygThakn/IhgYP9tpep+5lQWSMYaD9JgsCGvKQgdyYcb2jglrNJMJ5p6xd0
kQlkawmnPJ0E27mSmtomJki7+M2NL0kQdcXwabc3C9bDwsKSnMiQcqWgeJ8v
Cxaq33mmOpNBzHyBr/FjwVi/eWXuETL8ZC/YnxvEghsnlFPLXMnASzj5u985
FmxZ7LHu9CEDCrccV+eyQDVcyXx3OBk4Z9JXm8tZ0O4gl3k4lQw9w9V59css
kOMvXBN0yu71HHod11iQY2N8brybDLbEwFIRDgOyd+Szje/IUHLsefu6IgZB
2owaNyEZLqcMnXXSwuDcwsDQ+KAsF/xLXSdjEPXpXoL5PBku1vrVtTljUKux
Xr2uS4Forfmvwl0woPZPfKTpUaA4yWujpisGjtyQ2AADCnyg2We6emGg2XzX
QGBEAVrYT1ajJzG4/w7fnbOdAiLp1AQpGgM8Z/2YvQ0FiuIwk44fMcCpxb+P
t6XAJqLeGCcWg5bElu7HeylQ+PCg4WsuBlN1ZpYW+yjws5cjJKZiUFC/PUbf
iQLzwcZi6wwMlncV1bs7y/7/Mms5lIVBaNHn81lHKNDkaue37zcM1D80H9Bw
o0D1oI7LfL6sf4wb5ORBAd3/5HWVFGJwO7xiJcWLAlZaciMeRRgcTPVXf+FN
gUsKkb+oFmPgGtKSreJLgf8BWgtKnQ==
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1: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
1ZMupmFwSu14rlYlDjNJunytMxj8ByDBNv0=
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1: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
yzAokgvlxDIm/BeerDMw
                   "]]}}}, PlotLabel -> None, ImageSize -> 
               240, Axes -> True, PlotRange -> All, AspectRatio -> 
               NCache[GoldenRatio^(-1), 0.6180339887498948], AxesLabel -> {
                 FormBox["x", TraditionalForm], 
                 FormBox["y", TraditionalForm]}, PlotLabel -> FormBox[
                 RowBox[{"{", 
                   RowBox[{"y", "(", "1", ")"}], "}"}], TraditionalForm]], 
              "\"  \"", 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TemplateBox[{"\"sampling \"", 
                   RowBox[{"y", "(", "1", ")"}]}, "RowDefault"], "\[NoBreak]",
                  "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Interactive differential equation solution plots", 
     "scanner" -> "ODE", "id" -> 
     "InteractiveDifferentialEquationSolutionPlots", "position" -> "900", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = True, 
                 CalculateScan`ODEScan`Private`iSQ$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                 False, $CellContext`Y1$$ = 0.7853981633974483, 
                 CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                 0.2575795557527179, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[$CellContext`Y1$$], 0.7853981633974483, 
                    $CellContext`y[1]}, -1.5550883635269477`, 
                    1.5550883635269477`}, {{
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$], 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}}, {{
                    Hold[CalculateScan`ODEScan`Private`yTS$$], {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`y], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 1 + 1]]]}, {{
                    Hold[CalculateScan`ODEScan`Private`yyTS$$], {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
3891717[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
3891717["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}}]]}, {{
                    Hold[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$], 
                    0.2575795557527179, 
                    Subscript["x", "max"]}, -1, 1}, {{
                    Hold[CalculateScan`ODEScan`Private`iSQ$$], True, ""}, {
                    True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[2], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[3], 
                    Manipulate`Place[4]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
3891717["`1`\[Hyphen]range", {
                    Style["x", Italic]}], 
                    Manipulate`Place[5], 
                    Row[{
                    Manipulate`Place[6], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3895299$$ = 
                 False, $CellContext`Y1$3895304$$ = 0, 
                 CalculateScan`ODEScan`Private`functionOrPhasePlotQ$3895305$$ = 
                 False, CalculateScan`ODEScan`Private`\[CapitalDelta]x$\
3895306$$ = 0, CalculateScan`ODEScan`Private`iSQ$3895307$$ = False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = 
                    True, CalculateScan`ODEScan`Private`iSQ$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, $CellContext`Y1$$ = 0.7853981633974483, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                    0.2575795557527179}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3895299$\
$, False], 
                    Hold[$CellContext`Y1$$, $CellContext`Y1$3895304$$, 0], 
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$\
3895305$$, False], 
                    Hold[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$3895306$$, 
                    0], 
                    Hold[
                    CalculateScan`ODEScan`Private`iSQ$$, 
                    CalculateScan`ODEScan`Private`iSQ$3895307$$, False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Module[{
                    CalculateScan`ODEScan`Private`eqs$, 
                    CalculateScan`ODEScan`Private`sol$, 
                    CalculateScan`ODEScan`Private`addInits$, 
                    CalculateScan`ODEScan`Private`nds$, 
                    CalculateScan`ODEScan`Private`xRanges$, 
                    CalculateScan`ODEScan`Private`xRange$, 
                    CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    CalculateScan`ODEScan`Private`yPlotRe$, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$, 
                    CalculateScan`ODEScan`Private`yPlotReIm$, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$,
                     CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$, CalculateScan`ODEScan`Private`yyPPlotRe$}, 
                    CalculateScan`ODEScan`Private`eqs$ = 
                    Flatten[{{
                    Derivative[
                    1][$CellContext`y][$CellContext`x] == $CellContext`x^(-1) \
$CellContext`y[$CellContext`x]}, {}, CalculateScan`ODEScan`Private`addInits$ = 
                    Thread[{
                    $CellContext`y[1]} == Tan[{$CellContext`Y1$$}]]}]; 
                    CalculateScan`ODEScan`Private`sol$ = Quiet[
                    Check[CalculateScan`ODEScan`Private`nds$ = Quiet[
                    NDSolve[
                    CalculateScan`ODEScan`Private`eqs$, $CellContext`y, \
{$CellContext`x, 1, 1 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[0.999 Pi 2^(-1) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}, PrecisionGoal -> ControlActive[4, Automatic], 
                    AccuracyGoal -> ControlActive[4, Automatic], MaxSteps -> 
                    ControlActive[10^4, 5 10^4]], {
                    MessageName[NDSolve, "mxst"], 
                    MessageName[NDSolve, "ndsz"]}], 
                    CalculateScan`ODEScan`Private`failedNDSolve = 
                    Hold[NDSolve][
                    CalculateScan`ODEScan`Private`eqs$, $CellContext`y, \
{$CellContext`x, 1, 1 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[0.999 Pi 2^(-1) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}]; "$Failed"]]; If[
                    Or[
                    MatchQ[CalculateScan`ODEScan`Private`sol$, 
                    Blank[NDSolve]], CalculateScan`ODEScan`Private`sol$ === 
                    "$Failed", Chop[
                    Apply[Subtract, 
                    Part[CalculateScan`ODEScan`Private`nds$, 1, 1, 2, 1, 1]]] == 
                    0], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
3891717["could not numerically solve the differential equation for the \
specified parameters", 14242], 
                    CalculateScan`ODEScan`Private`xRanges$ = 
                    Map[Part[#, 1, 2, 1, 1]& , 
                    CalculateScan`ODEScan`Private`nds$]; 
                    CalculateScan`ODEScan`Private`xRange$ = {
                    1, 1 + Sign[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$] Min[
                    Abs[
                    Apply[
                    Subtract, CalculateScan`ODEScan`Private`xRanges$, {1}]]]}; 
                    CalculateScan`ODEScan`Private`IsPurelyRealQ$ = Not[
                    MemberQ[
                    Cases[CalculateScan`ODEScan`Private`nds$, 
                    Blank[List], {0, Infinity}], 
                    Blank[Complex], {0, Infinity}]]; 
                    If[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    If[CalculateScan`ODEScan`Private`yTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}]; 
                    If[CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    CalculateScan`ODEScan`Private`yPlotRe$ = Plot[
                    Evaluate[
                    ReplaceAll[
                    Map[Derivative[# - 1][$CellContext`y][$CellContext`x]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    CalculateScan`ODEScan`Private`nds$]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange$}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotStyle -> Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`y, 
                    Superscript[$CellContext`y, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$ = 
                    Part[
                    Lookup[
                    AbsoluteOptions[
                    CalculateScan`ODEScan`Private`yPlotRe$, PlotRange], 
                    PlotRange], 2]; If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
, 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]],
                     Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]]/
                    Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
] > 1/3], Null, CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$ + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]]]\
; Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotRe$, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe}\
], CalculateScan`ODEScan`Private`yPlotRe$], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], Right], 
                    CalculateScan`ODEScan`Private`yPlotReIm$ = Plot[
                    Evaluate[
                    ReplaceAll[
                    Join[
                    Map[Re[
                    Derivative[# - 1][$CellContext`y][$CellContext`x]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    Map[Im[
                    Derivative[# - 1][$CellContext`y][$CellContext`x]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    CalculateScan`ODEScan`Private`nds$]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange$}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotRange -> Automatic, PlotStyle -> Join[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    (
                    ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    If[Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`y, 
                    Superscript[$CellContext`y, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$ = 
                    Part[
                    Lookup[
                    AbsoluteOptions[
                    CalculateScan`ODEScan`Private`yPlotReIm$, PlotRange], 
                    PlotRange], 2]; If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$], 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
], Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
]/Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$]] > 1/3], Null, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$ = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$ + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
]]; Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotReIm$, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$}], CalculateScan`ODEScan`Private`yPlotReIm$], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    Join[
                    MapIndexed[Re[
                    Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Im[
                    Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    Join[
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    
                    MapIndexed[(
                    ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], Right]], 
                    If[CalculateScan`ODEScan`Private`yyTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}]; 
                    CalculateScan`ODEScan`Private`yyPPlotRe$ = 
                    ParametricPlot[
                    Evaluate[
                    Map[ReplaceAll[#, CalculateScan`ODEScan`Private`nds$]& , 
                    Re[
                    Apply[{
                    Derivative[#][$CellContext`y][$CellContext`x], 
                    Derivative[#2][$CellContext`y][$CellContext`x]}& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], {1}]]]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange$}]], AxesLabel -> {
                    Superscript[$CellContext`y, 
                    Row[{"(", 
                    Style["m", Italic], ")"}]], 
                    Superscript[$CellContext`y, 
                    Row[{"(", 
                    Style["n", Italic], ")"}]]}, PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotStyle -> Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], AspectRatio -> 
                    1/GoldenRatio, PlotRange -> Automatic, 
                    ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    Labeled[CalculateScan`ODEScan`Private`yyPPlotRe$, 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[
                    Map[If[CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    Identity[
                    Blank[Slot]], 
                    Re[
                    Blank[Slot]]]& , {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}]& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]]], Right]]]],
                   "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> 
                    None}, {{$CellContext`Y1$$, 0.7853981633974483, 
                    $CellContext`y[1]}, -1.5550883635269477`, 
                    1.5550883635269477`, ControlPlacement -> 1}, {{
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}, ControlPlacement -> 2}, {{
                    CalculateScan`ODEScan`Private`yTS$$, {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`y], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 1 + 1]]], ControlType -> CheckboxBar, 
                    ContinuousAction -> False, ControlPlacement -> 3}, {{
                    CalculateScan`ODEScan`Private`yyTS$$, {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
3891717[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
3891717["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}}]], ControlType -> CheckboxBar,
                     ContinuousAction -> False, ControlPlacement -> 4}, {{
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    0.2575795557527179, 
                    Subscript["x", "max"]}, -1, 1, ControlPlacement -> 5}, {{
                    CalculateScan`ODEScan`Private`iSQ$$, True, ""}, {
                    True, False}, ControlPlacement -> 6}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[2], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[3], 
                    Manipulate`Place[4]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
3891717["`1`\[Hyphen]range", {
                    Style["x", Italic]}], 
                    Manipulate`Place[5], 
                    Row[{
                    Manipulate`Place[6], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkcqQBh+\
QGN0YkwaUpHzvLXESC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLolSVPDkGj67Y0xI9B5h8IPEznfTmPdCzkC78xt8H1hUMNDkq\
6aMakrU9EBCntFI1Z6xpCfmJ1MmImD0J3m2/er1cGe442AwljFoTSRX220h80yCIkkPgW4Y844B/+\
aOj8vjp4KxkHwvCI+\
Iemi8EwmxgREcGObjfevVZuoeJqaBxyDjS6fJynPU9gKlJeXphMxyfONisoZtgUGmynFzv+RmnYJc+\
LfwgQhtTM5jk7ZnS6BfGFeMvvOy+ufcDfD8ti28FKericP8dhnyBpqeELVM5/\
PWdXKMVF1ro59zdVnzZaNBXjxl6v+lI6r0chgv2oZBZsemxqu1twz/si28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AgOTEuGLL7R5NqR5lICEywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UHHWVf/qi4lVzONRnyfsg1SYlcK/\
rbWB9pyOXxRHhGEuIFTb16c1glNQbpLftBCRLmwClC0l/mY7+5h4uVQKoOJKpLOhYHtjRn/\
kn0ywIfEZ7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/yXTjhuZA9yXBtyT+\
A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgMt5Li+"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, 
   Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, 
   Typeset`pod38$$, Typeset`pod39$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False, False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "9", "datatypes" -> "", "timedout" -> "Recurrence", 
     "timedoutpods" -> "", "timing" -> "1.471", "parsetiming" -> "0.232", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa522147a242ed3a8ihhe00004ig529de5a3gd82i8350669649384844499", "id" -> 
     "MSP523147a242ed3a8ihhe0000441dfb76defg3ibc", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "16", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa524147a242ed3a8ihhe00005e2i8bci31e1f5fg8350669649384844499", "version" -> 
     "2.6", "inputstring" -> "y'[x]==1/x y"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "1", "datatypes" -> "", "timedout" -> "Recurrence", 
     "timedoutpods" -> "", "timing" -> "1.851", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "18", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "18", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "y'[x]==1/x y"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 5, 13, 9, 44, 16.525093`7.97071889708509}, "Line" -> 22, 
    "SessionID" -> 27877248076222430147}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7, 8, 9}, Typeset`failedpods$$ = {10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 39}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "Derivative[1][y][x] == (1/x)*y"}, Typeset`open$$ = True, Typeset`newq$$ =
    "y'[x]==1/x y"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {2408., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$}, 
         Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa522147a242ed3a8ihhe00004ig529de5a3gd82i8350669649384844499", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"e54d5973-0986-42b8-b054-414f290d3be6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["y", "\[Prime]",
    MultilineFunction->None], "[", "x", "]"}], "\[Equal]", 
  FractionBox["y", "x"]}]], "Output",
 CellChangeTimes->{3.861420234658806*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"e3387976-fd1c-4661-be80-a02b580d9901"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Integrate", "["}]], "Input",
 CellChangeTimes->{{3.861421892883301*^9, 
  3.8614218940156927`*^9}},ExpressionUUID->"5ccc9313-ae49-4754-9923-\
65e00cc1244c"],

Cell[BoxData[
 RowBox[{"With", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"y", "=", 
     RowBox[{"x", "+", 
      RowBox[{"\[Epsilon]", " ", 
       RowBox[{"Sin", " ", "[", 
        RowBox[{"2", " ", "Pi", " ", "x"}], "]"}]}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dydx", "=", 
     RowBox[{"D", "[", 
      RowBox[{"y", ",", "x"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     SuperscriptBox["dydx", "2"], "-", 
     RowBox[{"2", " ", "x", " ", "y"}], " ", "+", " ", 
     SuperscriptBox["y", "2"]}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.861422059951191*^9, 3.861422156715773*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"b71167b5-5d6d-4062-a837-9c1bbcb39f2d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"2", " ", "\[Pi]", " ", "\[Epsilon]", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}], "2"], "-", 
    RowBox[{"2", " ", "x", " ", 
     RowBox[{"(", 
      RowBox[{"x", "+", 
       RowBox[{"\[Epsilon]", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"x", "+", 
       RowBox[{"\[Epsilon]", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}], "2"]}], ",",
    "\[Epsilon]"}], "]"}]], "Input",
 CellChangeTimes->{{3.861422174313348*^9, 3.8614221810878143`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"0181505d-4e53-42a1-a4fd-805918a771b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"4", " ", "\[Pi]", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"2", " ", "\[Pi]", " ", "\[Epsilon]", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}]}], "-", 
  RowBox[{"2", " ", "x", " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}], "+", 
  RowBox[{"2", " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}], " ", 
   RowBox[{"(", 
    RowBox[{"x", "+", 
     RowBox[{"\[Epsilon]", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}]}]}]], "Output",\

 CellChangeTimes->{3.861422181596569*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"89d2157e-597e-4970-a4c7-9060482260bf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"4", " ", "\[Pi]", " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "\[Pi]", " ", "\[Epsilon]", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}]}], "-", 
   RowBox[{"2", " ", "x", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}], "+", 
   RowBox[{"2", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}], " ", 
    RowBox[{"(", 
     RowBox[{"x", "+", 
      RowBox[{"\[Epsilon]", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}]}]}], 
  "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[26]:=",ExpressionUUID->"c6a4ba78-b632-47bb-81ac-98a6fbb5a2ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"4", " ", "\[Pi]", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}], "+", 
  RowBox[{"8", " ", 
   SuperscriptBox["\[Pi]", "2"], " ", "\[Epsilon]", " ", 
   SuperscriptBox[
    RowBox[{"Cos", "[", 
     RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}], "2"]}], "+", 
  RowBox[{"2", " ", "\[Epsilon]", " ", 
   SuperscriptBox[
    RowBox[{"Sin", "[", 
     RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}], "2"]}]}]], "Output",
 CellChangeTimes->{3.861422191935708*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"53343db7-1ad5-4c2d-84fc-0674b24bee69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"1", "-", 
    SuperscriptBox["x", "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8614224009281673`*^9, 3.8614224097461042`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"92ce0371-4047-419a-bf19-cf6f1ede2318"],

Cell[BoxData[
 FractionBox["2", "3"]], "Output",
 CellChangeTimes->{3.861422410043655*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"73d31d42-5fde-4e88-b0eb-e7c4a015ab3b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Cos", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", "Pi"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.861422456199739*^9, 3.8614224769701567`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"3a6ed10a-486c-4a88-81b3-b4d28e535d4c"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.86142247171379*^9, 3.86142247739959*^9}},
 CellLabel->"Out[29]=",ExpressionUUID->"e758faa7-37d8-465a-bacd-b03045661896"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "\[Pi]", " ", "\[Epsilon]", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}], "2"], "-", 
   RowBox[{"2", " ", "x", " ", 
    RowBox[{"(", 
     RowBox[{"x", "+", 
      RowBox[{"\[Epsilon]", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "+", 
      RowBox[{"\[Epsilon]", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}], 
    "2"]}]}]], "Input",
 CellChangeTimes->{{3.861422557198987*^9, 
  3.861422567663474*^9}},ExpressionUUID->"4e811b41-5399-4882-a4ab-\
16fa549f47da"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "\[Pi]", " ", "\[Epsilon]", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}], "2"], "-", 
   RowBox[{"2", " ", "x", " ", 
    RowBox[{"(", 
     RowBox[{"x", "+", 
      RowBox[{"\[Epsilon]", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "+", 
      RowBox[{"\[Epsilon]", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}], "2"]}], "/.", 
  RowBox[{"{", 
   RowBox[{"\[Epsilon]", "->", "0.1"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.861422571648649*^9, 3.861422580277906*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"c55058a2-96bb-4e0f-a19b-b1504a18f1b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"0.6283185307179586`", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}], "2"], "-", 
    RowBox[{"2", " ", "x", " ", 
     RowBox[{"(", 
      RowBox[{"x", "+", 
       RowBox[{"0.1`", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"x", "+", 
       RowBox[{"0.1`", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}], "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.861422603180266*^9, 3.86142261042313*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"04d5de5d-0f33-4863-a5b1-7ed52c7259dc"],

Cell[BoxData["0.8690587546884538`"], "Output",
 CellChangeTimes->{3.8614226109156513`*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"f52fab5a-8bc2-44fd-90db-4304805dfd71"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "\[Pi]", " ", "\[Epsilon]", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}], "2"], "-", 
   RowBox[{"2", " ", "x", " ", 
    RowBox[{"(", 
     RowBox[{"x", "+", 
      RowBox[{"\[Epsilon]", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "+", 
      RowBox[{"\[Epsilon]", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}]}], ")"}], "2"]}], "/.", 
  RowBox[{"{", 
   RowBox[{"\[Epsilon]", "->", "0"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.861422628468706*^9, 3.861422634315262*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"1753d4a3-beee-43fd-ba18-43ccf150cd31"],

Cell[BoxData[
 RowBox[{"1", "-", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{{3.861422629508976*^9, 3.861422634742515*^9}},
 CellLabel->"Out[33]=",ExpressionUUID->"2f11aa9a-11f8-41f8-9258-b4c20ed31ef7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "-2x+2y-2y''-\[Lambda]==0", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, PodStates -> {"Solution__Step-by-step solution"}, 
    Method -> {
     "ExtrusionChosen" -> {
       "Solution", "Differential equation solutions", 1, 2, "Input", 
        "DSolve[{-2 x - \[Lambda] + 2 y[\[Lambda]] - 2 y''[\[Lambda]] == 0}, \
y[\[Lambda]], \[Lambda]]"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> "Input"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "-2 x + 2 y[\[Lambda]] - 2 y''[\[Lambda]] - \[Lambda] == 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"-", "2"}], " ", "x"}], "+", 
                 RowBox[{"2", " ", 
                   RowBox[{"y", "(", "\[Lambda]", ")"}]}], "-", 
                 RowBox[{"2", " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "\[Lambda]", ")"}]}], "-", "\[Lambda]"}], "\[LongEqual]", 
               "0"}], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "ODEClassification", "numsubpods" -> 
     "1", "position" -> "200", "scanner" -> "ODE", "title" -> 
     "ODE classification"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"second\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "AlternateForm", "numsubpods" -> "2", 
     "position" -> "300", "scanner" -> "Simplification", "title" -> 
     "Alternate forms"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "moutput", {}, {"y''[\[Lambda]] == -x - \[Lambda]/2 + y[\[Lambda]]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                SuperscriptBox[
                "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                "\[Lambda]", ")"}], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"-", 
                   FractionBox["\[Lambda]", "2"]}], "-", 
                 RowBox[{"x"}], "+", 
                 RowBox[{"y", "(", "\[Lambda]", ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[-2 x - \[Lambda] + 2 y[\[Lambda]] - 2 y''[\[Lambda]] == \
0]"}], 
       XMLElement[
       "moutput", {}, {
        "2 x + \[Lambda] + 2 y''[\[Lambda]] == 2 y[\[Lambda]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[Lambda]", "+", 
                RowBox[{"2", " ", "x"}], "+", 
                RowBox[{"2", " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "\[Lambda]", ")"}]}]}], "\[LongEqual]", 
              TagBox[
               RowBox[{"2", " ", 
                 RowBox[{"y", "(", "\[Lambda]", ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Solution", "numsubpods" -> "2", 
     "position" -> "400", "primary" -> "true", "scanner" -> "ODE", "title" -> 
     "Differential equation solutions"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "DSolve[{-2 x - \[Lambda] + 2 y[\[Lambda]] - 2 y''[\[Lambda]] == 0}, \
y[\[Lambda]], \[Lambda]]"}], 
       XMLElement[
       "moutput", {}, {
        "y[\[Lambda]] == x + \[Lambda]/2 + E^\[Lambda] Subscript[c, 1] + \
Subscript[c, 2]/E^\[Lambda]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "\[Lambda]", ")"}], "\[LongEqual]", 
              RowBox[{
                RowBox[{
                  SubscriptBox["c", "1"], " ", 
                  SuperscriptBox["\[ExponentialE]", "\[Lambda]"]}], "+", 
                RowBox[{
                  SubscriptBox["c", "2"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"-", "\[Lambda]"}]]}], "+", 
                FractionBox["\[Lambda]", "2"], "+", "x"}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Solve \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "2", " ", "x"}], "-", "\[Lambda]", "-", 
                    RowBox[{"2", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "\[Lambda]", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[Lambda]", "2"]}], MultilineFunction -> 
                    None], HoldForm]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"y", "(", "\[Lambda]", ")"}]}]}], HoldForm], 
                    "\[LongEqual]", "0"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"]}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                  GrayLevel[0.3], StripOnInput -> False], {
                 LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"will \"", 
                    "\"be \"", "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"complementary \"", "\"solution \"", "\"and \"", 
                    "\"particular \"", "\"solution.\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\"Find the complementary solution by solving \"", 
                    FontColor -> GrayLevel[0.5], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "2", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "\[Lambda]", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[Lambda]", "2"]}], MultilineFunction -> 
                    None], HoldForm]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"y", "(", "\[Lambda]", ")"}]}]}], HoldForm], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "0", FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox[
                    "\":\"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False]}, "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Assume \"", "\"a \"", "\"solution \"", "\"will \"", 
                    "\"be \"", "\"proportional \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    SuperscriptBox["\[Lambda]", "2"]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"for \"", "\"some \"", "\"constant \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\".\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"y", "(", "\[Lambda]", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    SuperscriptBox["\[Lambda]", "2"]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "2", " ", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[Lambda]", "2"]}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "\[Lambda]"}]], ")"}]}], 
                    HoldForm]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "\[Lambda]"}]]}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", "0"}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[Lambda]", "2"]}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "\[Lambda]"}]], ")"}]}], 
                    HoldForm], FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    SuperscriptBox["\[Lambda]", "2"]], " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "2", " ", 
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "\[Lambda]"}]]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "\[Lambda]"}]]}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", "0"}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor \"", "\"out \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    SuperscriptBox["\[Lambda]", "2"]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "2", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], "+", "2"}], HoldForm],
                     ")"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "\[Lambda]"}]]}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{"\"Since \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    SuperscriptBox["\[Lambda]", "2"]], "\[NotEqual]", "0"}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\" \""}, "RowDefault"], "\"for \"", "\"any \"", 
                    "\"finite \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False]}, "RowDefault"]}, "RowDefault"], "\",\"", "\" \""},
                     "RowDefault"], "\"the \"", "\"zeros \"", "\"must \"", 
                    "\"come \"", "\"from \"", "\"the \"", "\"polynomial:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "2", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], "+", "2"}], HoldForm],
                     "\" \""}, "RowDefault"], "\"\[LongEqual] \"", "0"}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "2", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"\[Lambda]", "-", "1"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"\[Lambda]", "+", "1"}], HoldForm], ")"}]}], 
                    "\[LongEqual]", "0"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Solve \"", "\"for \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], 
                    StyleBox[
                    "\" or \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    RowBox[{"\[Lambda]", "\[LongEqual]", "1"}]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\" \""}, 
                    "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "\[Lambda]", ")"}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "\[Lambda]"}]]}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\" \""}, 
                    "RowDefault"], "\"as \"", "\"a \"", "\"solution, \"", 
                    "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["\[Lambda]", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "1", FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" \""}, "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "\[Lambda]", ")"}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", "\[Lambda]"]}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" \""}, "RowDefault"], "\"as \"", 
                    "\"a \"", "\"solution, \"", "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is \"", 
                    "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"above \"", "\"solutions:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "\[Lambda]", ")"}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "\[Lambda]", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "\[Lambda]", ")"}]}], 
                    HoldForm], "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "\[Lambda]"}]]}], "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", "\[Lambda]"]}]}], 
                    HoldForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Determine \"", "\"the \"", "\"particular \"", 
                    "\"solution \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "2", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "\[Lambda]", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[Lambda]", "2"]}], MultilineFunction -> 
                    None], HoldForm]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"y", "(", "\[Lambda]", ")"}]}]}], HoldForm], 
                    "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "\[Lambda]"}], HoldForm]}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\" \""}, "RowDefault"], "\"by \"", "\"the \"", 
                    "\"method \"", "\"of \"", "\"undetermined \"", 
                    "\"coefficients:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"particular \"", "\"solution \"", "\"to \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "2", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "\[Lambda]", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[Lambda]", "2"]}], MultilineFunction -> 
                    None], HoldForm]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"y", "(", "\[Lambda]", ")"}]}]}], HoldForm], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox["\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "\[Lambda]"}], HoldForm], 
                    FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" \""}, "RowDefault"], "\"is \"", 
                    "\"of \"", "\"the \"", "\"form:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "\[Lambda]", ")"}], 
                    "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", "1"], "+", 
                    RowBox[{
                    SubscriptBox["a", "2"], " ", "\[Lambda]"}]}], 
                    HoldForm]}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Solve \"", "\"for \"", "\"the \"", "\"unknown \"", 
                    "\"constants \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["a", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    StyleBox[
                    "\" and \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    SubscriptBox["a", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Compute \"", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "\[Lambda]", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[Lambda]", "2"]}], MultilineFunction -> 
                    None], HoldForm], FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "\[Lambda]", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[Lambda]", "2"]}], MultilineFunction -> 
                    None], HoldForm], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[Lambda]", "2"]}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", "1"], "+", 
                    RowBox[{
                    SubscriptBox["a", "2"], " ", "\[Lambda]"}]}], HoldForm], 
                    ")"}]}], HoldForm]}, "RowDefault"]}, {
                    
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", "0"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{" \[LongEqual] "}}, 
                    "Rows" -> {{" \[LongEqual] "}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Substitute \"", "\"the \"", "\"particular \"", 
                    "\"solution \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "\[Lambda]", ")"}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\" \""}, "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "2", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "\[Lambda]", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[Lambda]", "2"]}], MultilineFunction -> 
                    None], HoldForm]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "\[Lambda]", ")"}]}]}], 
                    HoldForm], "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "\[Lambda]"}], HoldForm], 
                    HoldForm]}, "RowDefault"], HoldForm]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "2", " ", "0"}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", "1"], "+", 
                    RowBox[{
                    SubscriptBox["a", "2"], " ", "\[Lambda]"}]}], HoldForm], 
                    ")"}]}]}], HoldForm], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "\[Lambda]"}], HoldForm], 
                    HoldForm]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Simplify:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", 
                    SubscriptBox["a", "1"]}], "+", 
                    RowBox[{"2", " ", 
                    SubscriptBox["a", "2"], " ", "\[Lambda]"}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "\[Lambda]"}], HoldForm]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Equate \"", "\"the \"", "\"coefficients \"", "\"of \"", 
                    TemplateBox[{
                    StyleBox[
                    "1", FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\" \""}, "RowDefault"], "\"on \"", "\"both \"", 
                    "\"sides \"", "\"of \"", "\"the \"", "\"equation:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"2", " ", 
                    SubscriptBox["a", "1"]}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    RowBox[{"2", " ", "x"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Equate \"", "\"the \"", "\"coefficients \"", "\"of \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\" \""}, "RowDefault"], "\"on \"", "\"both \"", 
                    "\"sides \"", "\"of \"", "\"the \"", "\"equation:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"2", " ", 
                    SubscriptBox["a", "2"]}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", "1"}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Solve \"", "\"the \"", "\"system:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    SubscriptBox["a", "1"], "\[LongEqual]", "x"}]}, {
                    RowBox[{
                    SubscriptBox["a", "2"], "\[LongEqual]", 
                    FractionBox["1", "2"]}]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 3, RowAlignments -> Baseline, 
                    ColumnAlignments -> Left], 
                    Function[BoxForm`e$, 
                    TableForm[BoxForm`e$, TableSpacing == {1, 3}]]]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["a", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    StyleBox[
                    "\" and \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    SubscriptBox["a", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\" \""}, 
                    "RowDefault"], "\"into \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "\[Lambda]", ")"}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", "1"], "+", 
                    RowBox[{"\[Lambda]", " ", 
                    SubscriptBox["a", "2"]}]}], HoldForm], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "\[Lambda]", ")"}], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"x", "+", 
                    FractionBox["\[Lambda]", "2"]}], HoldForm]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "\[Lambda]", ")"}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "\"c\""], "(", "\[Lambda]", ")"}], "+", 
                    
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "\[Lambda]", ")"}]}], 
                    HoldForm], "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"x", "+", 
                    FractionBox["\[Lambda]", "2"], "+", 
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "\[Lambda]"}]]}], "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", "\[Lambda]"]}]}], 
                    HoldForm]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Solve with undetermined coefficients", 
         "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Solve with undetermined coefficients", "input" -> 
           "Solution__Solve with undetermined coefficients"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with variation of parameters", "input" -> 
           "Solution__Solve with variation of parameters"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with Laplace transform", "input" -> 
           "Solution__Solve with Laplace transform"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Solution__Hide steps"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "PossibleLagrangian", "numsubpods" -> 
     "1", "position" -> "500", "scanner" -> "ODE", "title" -> 
     "Possible Lagrangian"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[ScriptCapitalL]", "(", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  ",", "y", ",", "\[Lambda]"}], ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"2", " ", "y", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["\[Lambda]", "2"]}], "-", 
                    RowBox[{"x"}]}], ")"}]}], "+", 
                    SuperscriptBox["y", "2"], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], ")"}], 
                    "2"]}], ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "5", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.225", "parsetiming" -> "0.326", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP127623b5i8d3ec3b4eb900003153ihh8i0629915", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "14", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa127723b5i8d3ec3b4eb900002e84c4efed545c424307842769377011871", "version" -> 
    "2.6", "inputstring" -> "-2x+2y-2y''-\[Lambda]==0"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 5, 13, 10, 29, 27.86334`8.197608156217637}, "Line" -> 35,
     "SessionID" -> 27877248076222430147}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Solution", "Differential equation solutions", 1, 2, "Input", 
    "DSolve[{-2 x - \[Lambda] + 2 y[\[Lambda]] - 2 y''[\[Lambda]] == 0}, y[\
\[Lambda]], \[Lambda]]"}, Typeset`open$$ = True, Typeset`newq$$ = 
   "-2x+2y-2y''-\[Lambda]==0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {2515., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[35]:=",ExpressionUUID->"d4ebc829-599e-414a-9b32-6ce1da082efe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "\[Lambda]", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", " ", "x"}], "+", "\[Lambda]"}], ")"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", "\[Lambda]"], " ", 
      TemplateBox[{"1"},
       "C"]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "\[Lambda]"}]], " ", 
      TemplateBox[{"2"},
       "C"]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.861422768416896*^9, 3.861422967907969*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"fce9f9bd-6bb3-42f2-a13f-8edec6053c1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"2", " ", "x"}], "+", "\[Lambda]"}], ")"}]}], "+", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", "x"], " ", 
     TemplateBox[{"1"},
      "C"]}], "+", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", "x"}]], " ", 
     TemplateBox[{"2"},
      "C"]}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8614231685880213`*^9, 3.861423206329134*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"10e96130-0f42-4797-ae1b-6eadc22ba216"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   SuperscriptBox["x", "2"], "2"], "+", 
  FractionBox[
   RowBox[{"x", " ", "\[Lambda]"}], "2"], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", "x"], " ", 
   TemplateBox[{"1"},
    "C"]}], "-", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "x"}]], " ", 
   TemplateBox[{"2"},
    "C"]}]}]], "Output",
 CellChangeTimes->{3.861423206651444*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"600034e8-5a05-425c-8275-d944f0bdd39b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"1", "/", "2"}], "+", 
      RowBox[{
       RowBox[{"\[Lambda]", "/", "2"}], " ", "E", " ", "c1"}], "-", 
      RowBox[{"c2", "/", "E"}], "-", "c1", " ", "+", "c2"}], "==", "1"}], "&&", 
    RowBox[{
     RowBox[{"\[Lambda]", "+", "c1", "+", "c2"}], "==", "0"}], "&&", 
    RowBox[{
     RowBox[{"1", "+", 
      RowBox[{"\[Lambda]", "/", "2"}], "+", 
      RowBox[{"c1", "/", "E"}], "+", 
      RowBox[{"c2", " ", "E"}]}], "==", "1"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"c1", ",", "c2", ",", "\[Lambda]"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.861423355811442*^9, 3.861423440210178*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"f1d11091-08c5-4e7d-be1a-1bb8fa4ca8e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"c1", "\[Rule]", 
      FractionBox[
       RowBox[{"4", "-", 
        RowBox[{"6", " ", "\[ExponentialE]"}], "+", 
        RowBox[{"4", " ", 
         SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
        RowBox[{"4", " ", 
         SuperscriptBox["\[ExponentialE]", "3"]}], "-", 
        SqrtBox[
         RowBox[{"16", "-", 
          RowBox[{"48", " ", "\[ExponentialE]"}], "+", 
          RowBox[{"68", " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
          RowBox[{"80", " ", 
           SuperscriptBox["\[ExponentialE]", "3"]}], "+", 
          RowBox[{"56", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}], "-", 
          RowBox[{"16", " ", 
           SuperscriptBox["\[ExponentialE]", "5"]}], "+", 
          RowBox[{"24", " ", 
           SuperscriptBox["\[ExponentialE]", "6"]}], "-", 
          RowBox[{"16", " ", 
           SuperscriptBox["\[ExponentialE]", "7"]}]}]]}], 
       RowBox[{
        RowBox[{
         RowBox[{"-", "4"}], " ", 
         SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
        RowBox[{"4", " ", 
         SuperscriptBox["\[ExponentialE]", "4"]}]}]]}], ",", 
     RowBox[{"c2", "\[Rule]", 
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         FractionBox["8", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "4"}], " ", 
            SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
           RowBox[{"4", " ", 
            SuperscriptBox["\[ExponentialE]", "4"]}]}]]}], "+", 
        FractionBox[
         RowBox[{"16", " ", "\[ExponentialE]"}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"14", " ", 
          SuperscriptBox["\[ExponentialE]", "2"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "+", 
        FractionBox[
         RowBox[{"12", " ", 
          SuperscriptBox["\[ExponentialE]", "3"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"4", " ", 
          SuperscriptBox["\[ExponentialE]", "4"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "+", 
        FractionBox[
         RowBox[{"2", " ", 
          SqrtBox[
           RowBox[{"16", "-", 
            RowBox[{"48", " ", "\[ExponentialE]"}], "+", 
            RowBox[{"68", " ", 
             SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
            RowBox[{"80", " ", 
             SuperscriptBox["\[ExponentialE]", "3"]}], "+", 
            RowBox[{"56", " ", 
             SuperscriptBox["\[ExponentialE]", "4"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "5"]}], "+", 
            RowBox[{"24", " ", 
             SuperscriptBox["\[ExponentialE]", "6"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "7"]}]}]]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"\[ExponentialE]", " ", 
          SqrtBox[
           RowBox[{"16", "-", 
            RowBox[{"48", " ", "\[ExponentialE]"}], "+", 
            RowBox[{"68", " ", 
             SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
            RowBox[{"80", " ", 
             SuperscriptBox["\[ExponentialE]", "3"]}], "+", 
            RowBox[{"56", " ", 
             SuperscriptBox["\[ExponentialE]", "4"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "5"]}], "+", 
            RowBox[{"24", " ", 
             SuperscriptBox["\[ExponentialE]", "6"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "7"]}]}]]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]]}], 
       RowBox[{
        RowBox[{"-", "\[ExponentialE]"}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[ExponentialE]", "2"]}]}]]}], ",", 
     RowBox[{"\[Lambda]", "\[Rule]", 
      FractionBox[
       RowBox[{
        FractionBox["8", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"12", " ", "\[ExponentialE]"}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "+", 
        FractionBox[
         RowBox[{"4", " ", 
          SuperscriptBox["\[ExponentialE]", "3"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"8", " ", 
          SuperscriptBox["\[ExponentialE]", "4"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "+", 
        FractionBox[
         RowBox[{"8", " ", 
          SuperscriptBox["\[ExponentialE]", "5"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"2", " ", 
          SqrtBox[
           RowBox[{"16", "-", 
            RowBox[{"48", " ", "\[ExponentialE]"}], "+", 
            RowBox[{"68", " ", 
             SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
            RowBox[{"80", " ", 
             SuperscriptBox["\[ExponentialE]", "3"]}], "+", 
            RowBox[{"56", " ", 
             SuperscriptBox["\[ExponentialE]", "4"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "5"]}], "+", 
            RowBox[{"24", " ", 
             SuperscriptBox["\[ExponentialE]", "6"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "7"]}]}]]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "+", 
        FractionBox[
         RowBox[{"2", " ", 
          SuperscriptBox["\[ExponentialE]", "2"], " ", 
          SqrtBox[
           RowBox[{"16", "-", 
            RowBox[{"48", " ", "\[ExponentialE]"}], "+", 
            RowBox[{"68", " ", 
             SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
            RowBox[{"80", " ", 
             SuperscriptBox["\[ExponentialE]", "3"]}], "+", 
            RowBox[{"56", " ", 
             SuperscriptBox["\[ExponentialE]", "4"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "5"]}], "+", 
            RowBox[{"24", " ", 
             SuperscriptBox["\[ExponentialE]", "6"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "7"]}]}]]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]]}], 
       RowBox[{
        RowBox[{"-", "\[ExponentialE]"}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[ExponentialE]", "2"]}]}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"c1", "\[Rule]", 
      FractionBox[
       RowBox[{"4", "-", 
        RowBox[{"6", " ", "\[ExponentialE]"}], "+", 
        RowBox[{"4", " ", 
         SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
        RowBox[{"4", " ", 
         SuperscriptBox["\[ExponentialE]", "3"]}], "+", 
        SqrtBox[
         RowBox[{"16", "-", 
          RowBox[{"48", " ", "\[ExponentialE]"}], "+", 
          RowBox[{"68", " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
          RowBox[{"80", " ", 
           SuperscriptBox["\[ExponentialE]", "3"]}], "+", 
          RowBox[{"56", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}], "-", 
          RowBox[{"16", " ", 
           SuperscriptBox["\[ExponentialE]", "5"]}], "+", 
          RowBox[{"24", " ", 
           SuperscriptBox["\[ExponentialE]", "6"]}], "-", 
          RowBox[{"16", " ", 
           SuperscriptBox["\[ExponentialE]", "7"]}]}]]}], 
       RowBox[{
        RowBox[{
         RowBox[{"-", "4"}], " ", 
         SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
        RowBox[{"4", " ", 
         SuperscriptBox["\[ExponentialE]", "4"]}]}]]}], ",", 
     RowBox[{"c2", "\[Rule]", 
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         FractionBox["8", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "4"}], " ", 
            SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
           RowBox[{"4", " ", 
            SuperscriptBox["\[ExponentialE]", "4"]}]}]]}], "+", 
        FractionBox[
         RowBox[{"16", " ", "\[ExponentialE]"}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"14", " ", 
          SuperscriptBox["\[ExponentialE]", "2"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "+", 
        FractionBox[
         RowBox[{"12", " ", 
          SuperscriptBox["\[ExponentialE]", "3"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"4", " ", 
          SuperscriptBox["\[ExponentialE]", "4"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"2", " ", 
          SqrtBox[
           RowBox[{"16", "-", 
            RowBox[{"48", " ", "\[ExponentialE]"}], "+", 
            RowBox[{"68", " ", 
             SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
            RowBox[{"80", " ", 
             SuperscriptBox["\[ExponentialE]", "3"]}], "+", 
            RowBox[{"56", " ", 
             SuperscriptBox["\[ExponentialE]", "4"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "5"]}], "+", 
            RowBox[{"24", " ", 
             SuperscriptBox["\[ExponentialE]", "6"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "7"]}]}]]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "+", 
        FractionBox[
         RowBox[{"\[ExponentialE]", " ", 
          SqrtBox[
           RowBox[{"16", "-", 
            RowBox[{"48", " ", "\[ExponentialE]"}], "+", 
            RowBox[{"68", " ", 
             SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
            RowBox[{"80", " ", 
             SuperscriptBox["\[ExponentialE]", "3"]}], "+", 
            RowBox[{"56", " ", 
             SuperscriptBox["\[ExponentialE]", "4"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "5"]}], "+", 
            RowBox[{"24", " ", 
             SuperscriptBox["\[ExponentialE]", "6"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "7"]}]}]]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]]}], 
       RowBox[{
        RowBox[{"-", "\[ExponentialE]"}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[ExponentialE]", "2"]}]}]]}], ",", 
     RowBox[{"\[Lambda]", "\[Rule]", 
      FractionBox[
       RowBox[{
        FractionBox["8", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"12", " ", "\[ExponentialE]"}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "+", 
        FractionBox[
         RowBox[{"4", " ", 
          SuperscriptBox["\[ExponentialE]", "3"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"8", " ", 
          SuperscriptBox["\[ExponentialE]", "4"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "+", 
        FractionBox[
         RowBox[{"8", " ", 
          SuperscriptBox["\[ExponentialE]", "5"]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "+", 
        FractionBox[
         RowBox[{"2", " ", 
          SqrtBox[
           RowBox[{"16", "-", 
            RowBox[{"48", " ", "\[ExponentialE]"}], "+", 
            RowBox[{"68", " ", 
             SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
            RowBox[{"80", " ", 
             SuperscriptBox["\[ExponentialE]", "3"]}], "+", 
            RowBox[{"56", " ", 
             SuperscriptBox["\[ExponentialE]", "4"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "5"]}], "+", 
            RowBox[{"24", " ", 
             SuperscriptBox["\[ExponentialE]", "6"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "7"]}]}]]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]], "-", 
        FractionBox[
         RowBox[{"2", " ", 
          SuperscriptBox["\[ExponentialE]", "2"], " ", 
          SqrtBox[
           RowBox[{"16", "-", 
            RowBox[{"48", " ", "\[ExponentialE]"}], "+", 
            RowBox[{"68", " ", 
             SuperscriptBox["\[ExponentialE]", "2"]}], "-", 
            RowBox[{"80", " ", 
             SuperscriptBox["\[ExponentialE]", "3"]}], "+", 
            RowBox[{"56", " ", 
             SuperscriptBox["\[ExponentialE]", "4"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "5"]}], "+", 
            RowBox[{"24", " ", 
             SuperscriptBox["\[ExponentialE]", "6"]}], "-", 
            RowBox[{"16", " ", 
             SuperscriptBox["\[ExponentialE]", "7"]}]}]]}], 
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[ExponentialE]", "2"]}], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", "4"]}]}]]}], 
       RowBox[{
        RowBox[{"-", "\[ExponentialE]"}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[ExponentialE]", "2"]}]}]]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.861423440575856*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"0625c1e1-f1ff-4d78-b555-f160971c5794"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"\[Lambda]", "/", "2"}], "+", "c1", "+", "c2"}], "==", "0"}], "&&", 
    RowBox[{
     RowBox[{"1", "+", 
      RowBox[{"\[Lambda]", "/", "2"}], "+", 
      RowBox[{"c1", "/", "E"}], "+", 
      RowBox[{"c2", " ", "E"}]}], "==", "1"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"c1", ",", "c2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.861423513711678*^9, 3.861423566126946*^9}, {
  3.86142368878511*^9, 3.8614236913911533`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"2f2d1caf-9606-460d-8780-f45d0649b9f1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"c1", "\[Rule]", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"\[ExponentialE]", " ", "\[Lambda]"}], 
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[ExponentialE]"}], ")"}]}]]}]}], ",", 
    RowBox[{"c2", "\[Rule]", 
     RowBox[{"-", 
      FractionBox["\[Lambda]", 
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[ExponentialE]"}], ")"}]}]]}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.861423566373884*^9, 3.861423691666871*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"0025f82b-023d-48e7-9e22-7e59cb53c6db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"x", "+", 
    RowBox[{"u", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Exp", "[", "x", "]"}], "+", 
       RowBox[{"Exp", "[", 
        RowBox[{"1", "-", "x"}], "]"}], "-", "1", "-", "E"}], ")"}]}]}], ",", 
   
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.861423826921762*^9, 3.861423923480462*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"f6b62c3b-a439-43c3-99ae-022be2271771"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "3"}], "+", "\[ExponentialE]"}], ")"}], " ", 
   "u"}]}]], "Output",
 CellChangeTimes->{3.8614238904679747`*^9, 3.8614239239981728`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"deb89da3-0624-4ef8-b8eb-c346f40cd3d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "y''+1/x y' - y/x^2 == 0", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "Derivative[2][y] + (1/x)*Derivative[1][y] - y/x^2 == 0"}, 
      "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"Solution__Step-by-step solution"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"y''[x] + (1/x) y'[x] - y[x]/x^2 == 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 RowBox[{
                   SuperscriptBox[
                   "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                   "x", ")"}], "+", 
                 RowBox[{
                   TagBox[
                    FractionBox["1", "x"], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}], "-", 
                 TagBox[
                  FractionBox[
                   RowBox[{"y", "(", "x", ")"}], 
                   SuperscriptBox["x", "2"]], 
                  PolynomialForm[#, TraditionalOrder -> False]& ]}], 
               "\[LongEqual]", "0"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "ODE names", "scanner" -> "ODE", "id" -> "ODENames", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Euler-Cauchy equation"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{
                  RowBox[{
                    SuperscriptBox["x", "2"], " ", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "x", ")"}]}], "+", 
                  RowBox[{"x", " ", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}], "-", 
                  RowBox[{"y", "(", "x", ")"}]}], "\[LongEqual]", "0"}], 
              HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> "Emden-Fowler equation"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{
                  RowBox[{"x", " ", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "x", ")"}]}], "+", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}], "\[LongEqual]", 
                TagBox[
                 FractionBox[
                  RowBox[{"y", "(", "x", ")"}], "x"], Identity]}], HoldForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> "Sturm-Liouville equation"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    RowBox[{"x", " ", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}], ")"}]}], "-", 
                  FractionBox[
                   RowBox[{"y", "(", "x", ")"}], "x"]}], "\[LongEqual]", 
                "0"}], HoldForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/Sturm-LiouvilleEquation.html", 
           "text" -> "Sturm\[Hyphen]Liouville equation"}, {}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"second\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"y[x] == x y'[x] + x^2 y''[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "x", ")"}], "\[LongEqual]", 
              RowBox[{
                RowBox[{
                  SuperscriptBox["x", "2"], " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "x", ")"}]}], "+", 
                RowBox[{"x", " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"FullSimplify[-(y[x]/x^2) + y'[x]/x + y''[x] == 0]"}], 
       XMLElement["moutput", {}, {"y'[x] + x y''[x] == y[x]/x"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"x", " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "x", ")"}]}], "+", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  "(", "x", ")"}]}], "\[LongEqual]", 
              TagBox[
               FractionBox[
                RowBox[{"y", "(", "x", ")"}], "x"], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Factor[-(y[x]/x^2) + y'[x]/x + y''[x] == 0]"}], 
       XMLElement["moutput", {}, {"(-y[x] + x y'[x] + x^2 y''[x])/x^2 == 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox[
               RowBox[{
                 RowBox[{
                   SuperscriptBox["x", "2"], " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "x", ")"}]}], "+", 
                 RowBox[{"x", " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}], "-", 
                 RowBox[{"y", "(", "x", ")"}]}], 
               SuperscriptBox["x", "2"]], "\[LongEqual]", "0"}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming x is positive", "scanner" -> 
     "Simplification", "id" -> "PositiveAlternateForm", "position" -> "500", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[-(y[x]/x^2) + y'[x]/x + y''[x] == 0, x > 0]"}], 
       XMLElement["moutput", {}, {"y[x] == x (y'[x] + x y''[x])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "x", ")"}], "\[LongEqual]", 
              RowBox[{"x", " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "x", ")"}]}], "+", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}], ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Differential equation solutions", "scanner" -> "ODE", 
     "id" -> "Solution", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "DSolve[{-(y[x]/x^2) + y'[x]/x + y''[x] == 0}, y[x], x]"}], 
       XMLElement[
       "moutput", {}, {"y[x] == Subscript[c, 1]/x + x Subscript[c, 2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "x", ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox[
                 SubscriptBox["c", "1"], "x"], "+", 
                RowBox[{
                  SubscriptBox["c", "2"], " ", "x"}]}]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Solve \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    HoldForm], "+", 
                    FractionBox[
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm], "x"], "-", 
                    FractionBox[
                    RowBox[{"y", "(", "x", ")"}], 
                    SuperscriptBox["x", "2"]]}], HoldForm], "\[LongEqual]", 
                    "0"}], FontColor -> GrayLevel[0], StripOnInput -> False]},
                     "RowDefault"]}, "RowDefault"]}, "RowDefault"], "\":\""}, 
                   "RowWithSeparators"], 
                  GrayLevel[0.3], StripOnInput -> False], {
                 LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Multiply \"", "\"both \"", "\"sides \"", "\"by \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["x", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["x", "2"], " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    HoldForm]}], "+", 
                    RowBox[{"x", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm]}], "-", 
                    RowBox[{"y", "(", "x", ")"}]}], HoldForm], "\[LongEqual]",
                     "0"}]}, "RowDefault"], HoldForm]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Assume \"", "\"a \"", "\"solution \"", "\"to \"", 
                    "\"this \"", "\"Euler\[Hyphen]Cauchy \"", "\"equation \"",
                     "\"will \"", "\"be \"", "\"proportional \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["x", "\[Lambda]"], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"for \"", "\"some \"", "\"constant \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\".\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"y", "(", "x", ")"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    SuperscriptBox["x", "\[Lambda]"], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["x", "2"], " ", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["x", "\[Lambda]"], ")"}]}], HoldForm]}], 
                    "+", 
                    RowBox[{"x", " ", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["x", "\[Lambda]"], ")"}]}], HoldForm]}], 
                    "-", 
                    SuperscriptBox["x", "\[Lambda]"]}], HoldForm], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["x", "\[Lambda]"], ")"}]}], HoldForm], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"\[Lambda]", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"\[Lambda]", "-", "1"}], HoldForm], ")"}], " ", 
                    SuperscriptBox["x", 
                    TagBox[
                    RowBox[{"\[Lambda]", "-", "2"}], HoldForm]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    StyleBox[
                    "\" and \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["x", "\[Lambda]"], ")"}]}], HoldForm], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"\[Lambda]", " ", 
                    SuperscriptBox["x", 
                    TagBox[
                    RowBox[{"\[Lambda]", "-", "1"}], HoldForm]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["x", "\[Lambda]"]}], "-", 
                    SuperscriptBox["x", "\[Lambda]"]}], HoldForm], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor \"", "\"out \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["x", "\[Lambda]"], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], "-", "1"}], HoldForm], 
                    ")"}], " ", 
                    SuperscriptBox["x", "\[Lambda]"]}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\"Assuming \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"x", "\[NotEqual]", "0"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\",\"", "\" \""}, "RowDefault"], "\"the \"", 
                    "\"zeros \"", "\"must \"", "\"come \"", "\"from \"", 
                    "\"the \"", "\"polynomial:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], "-", "1"}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", "0"}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"\[Lambda]", "-", "1"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"\[Lambda]", "+", "1"}], HoldForm], ")"}]}], 
                    "\[LongEqual]", "0"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Solve \"", "\"for \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], 
                    StyleBox[
                    "\" or \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    RowBox[{"\[Lambda]", "\[LongEqual]", "1"}]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\" \""}, 
                    "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "x", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    FractionBox[
                    SubscriptBox["c", "1"], "x"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\" \""}, 
                    "RowDefault"], "\"as \"", "\"a \"", "\"solution, \"", 
                    "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "1", FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" \""}, "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "x", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "2"], " ", "x"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"as \"", "\"a \"", 
                    "\"solution, \"", "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is \"", 
                    "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"above \"", "\"solutions:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "x", ")"}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "x", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "x", ")"}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    SubscriptBox["c", "1"], "x"], "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", "x"}]}], HoldForm]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> "Solve as a homogeneous linear equation", 
         "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Solve as a homogeneous linear equation", "input" -> 
           "Solution__Solve as a homogeneous linear equation"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve as an exact equation", "input" -> 
           "Solution__Solve as an exact equation"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with a substitution", "input" -> 
           "Solution__Solve with a substitution"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with a substitution", "input" -> 
           "Solution__Solve with a substitution"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Solution__Hide steps"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Plots of sample individual solutions", "scanner" -> 
     "ODE", "id" -> "PlotsOfSampleIndividualSolutions", "position" -> "700", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$3155198#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm]}, AxesOrigin -> 
                    NCache[{Rational[1, 4] Pi, 1.}, {0.7853981633974483, 1.}],
                     AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "1", ")"}], "\[LongEqual]", "1"}], ",", 
                    
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "1", 
                    ")"}], "\[LongEqual]", "0"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
Bqr6N6vbi53NWSNWYKuB8kxrVT9g/x8IeCoz
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$3155224#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm], None, None}, DisplayFunction -> 
                    Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm]}, AxesOrigin -> 
                    NCache[{Rational[1, 4] Pi, 0}, {0.7853981633974483, 0}], 
                    AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "1", ")"}], "\[LongEqual]", "1"}], ",", 
                    
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "1", 
                    ")"}], "\[LongEqual]", "0"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"y", "(", "1", ")"}], "\[LongEqual]", "1"}]}, {
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "1", 
                    ")"}], "\[LongEqual]", "0"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Right}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Right}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}, {
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
xw==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$3155252#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm]}, AxesOrigin -> 
                    NCache[{Rational[1, 4] Pi, 0}, {0.7853981633974483, 0}], 
                    AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "1", ")"}], "\[LongEqual]", "0"}], ",", 
                    
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "1", 
                    ")"}], "\[LongEqual]", "1"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
883+Fw==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$3155278#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm], None, None}, DisplayFunction -> 
                    Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm]}, AxesOrigin -> 
                    NCache[{Rational[1, 4] Pi, 0.5001952699951133}, {
                    0.7853981633974483, 0.5001952699951133}], AxesStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "1", ")"}], "\[LongEqual]", "0"}], ",", 
                    
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "1", 
                    ")"}], "\[LongEqual]", "1"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"y", "(", "1", ")"}], "\[LongEqual]", "0"}]}, {
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "1", 
                    ")"}], "\[LongEqual]", "1"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Right}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Right}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {None, 
                  RGBColor[
                  0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
                   None}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{2}}}], "Column"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Sample solution family", "scanner" -> "ODE", "id" -> 
     "SampleSolutionFamily", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                AbsoluteThickness[1], {{
                  RGBColor[0.624866, 0.673302, 0.264296], 
                  BSplineCurveBox[CompressedData["
1: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
YJd7rgn9P/UI4vA=
                   "]]}, {
                  RGBColor[
                  0.5926051666666666, 0.64554475, 0.29019741666666665`], 
                  BSplineCurveBox[CompressedData["
1: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
/wVJp8r2
                   "]]}, {
                  RGBColor[
                  0.5603443333333334, 0.6177874999999999, 
                   0.31609883333333333`], 
                  BSplineCurveBox[CompressedData["
1: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
ON+azkH/D+HHoIw=
                   "]]}, {
                  RGBColor[0.5280835, 0.59003025, 0.34200025], 
                  BSplineCurveBox[CompressedData["
1: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
FfK1of8HITDO4A==
                   "]]}, {
                  RGBColor[
                  0.4958226666666667, 0.5622729999999999, 0.3679016666666666], 
                  BSplineCurveBox[CompressedData["
1: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
sb81XoD+Hw3vjHw=
                   "]]}, {
                  RGBColor[
                  0.4635618333333334, 0.53451575, 0.39380308333333336`], 
                  BSplineCurveBox[CompressedData["
1:eJxt1nk0lWsXAPDXMROZipBMiUKZSbyvmQxJVObxaDKlIk33IK5SkhSHyFgu
GeIcX5f0umUqiRR1KXEl+TK8qWMo8T39++3717N+a+1n77X3s/Zaj1JQpBud
hmGYBReG/TpFrgcLYBiFfxvduNPDg03+v5UaOd0KyIb3KwhN5MfSj7PMkK2Y
pBH3v9ju5Gr108hMh2Nq99yhZ86mUUxkm48yCinI7Cb7P+8jR3sMrPFH1p6J
cJxDVnrswCfyLy77Z0BqDReFD36dXx7dwyZfSCYM6SGvl+LMNyA36SZEH0UO
ogb/exCZOu2QN4lsdMj7VYsb9LMTVw4K0yg8V5vRnYscyxLT34zcfvfr02jk
p9ytnQeQT/7V9kgReTc35+c/yInv5OvP7GaTOc7Hwv/mpvDTJskV+q7Q7ivh
OxaQZziZFcLIG3hKhKV5KDwDn634ZxebPCf0qNwd+UNMdmU6sodK2+du5L7Q
a6xJFzbp6jxzso0Xzcvd6kWJM5ssetRJ1vFT+OGqqzZrHKHpV3Vv9CJ/eB+9
a3Inm+zqfhX2BdmuscjzMbLKrU7ZrQIUPhkzHXEUmSpIiCtHTtQ1zOtyYJNh
i2stCwXRfJRTBJLt2eQbi/cracIUXjeyQ3behk2+9FXUPrKawsMuFWoMENBH
VA5LXkSusttsdw+ZJ2NmoQz5nBYXPQX5VXhly0dkj8PMQkNkcROOX5AY6s/t
mMI1nE06jrPzPcUpfN34UzUnczaJT3M52ktSeOtu7uiHpmxSWmx+r5o0hZ9q
fzpbbMgm/3o9YTamQOF3/HfWRWtCVzeoWvBsQPfP9c87IKs15FqrIFep1+xQ
Qt4tYe4UiHxjvVN79xY2uUy4+71DVsxWG9ZEpoLaL/cpUrhIRqjiuAabnJbs
XtemTOF+hfKD3pvYZIVo1sc7ahSucarWxFaZTS5GFbpHaFP4ikMBU0EGvc+D
iCt85hSuw5/c+44bWidxe/dGZAM+jxA28m1Xq9U2yC9yo+YuIX/lXpWeiGx3
/rLcDuSlsbhMDKfwLHm/Qzk0NjkV2lH2HdlrZb/kPi42KddvuDJtgfbDs7yg
Z5lF6tpdDn5jQ+Eh2fSClkUWeci5WbjKmcKNeWZ0amZYpMo1p/EQXwqP5K1O
vz7IIiWyvPW5zlI4z8fy9uw66AOSh3JVkC014m+EI3symmm2yF0vq+iWyN+3
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
9xvzOej/AToIeGw=
                   "]]}, {
                  RGBColor[0.43130100000000005`, 0.5067585, 0.4197045], 
                  BSplineCurveBox[CompressedData["
1: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
Dw==
                   "]]}, {
                  RGBColor[
                  0.39904016666666675`, 0.47900125, 0.4456059166666667], 
                  BSplineCurveBox[CompressedData["
1:eJxt1nk0llsXAPDHayYyFSGZEoUykziPmQxJVObx1WRKRZrui7hKSVK8RMZy
yRDv6+uSuGUqiRR1KXEl+TI8KVOJ7/Tvt+9fZ/3W2mfvtfdZe62jEBDuQqcR
BGHGQRC/TqHrgXwEQaFvIxt3urmx0f9boX62Sw5b/34ZqY79WPJxhgm2BbPR
gPNfbHNyteppbKbdMZV7rtDTZ1MoJrbVRym5JGx2g+2f97Ej3frX+GJrTofZ
z2ErPLbjEfoXl/zTL7GGg0IDX+eXR/aw0QvxuEEd7PUSs/N12A3acZFHsQOo
gf8exKZO2+VMYBsc8nzV7AL97MSVg4I0CmVrMrqysaNZIrqbsdvufn0aif2U
s6XjAPbJv1ofyWPv5pz9+Q92/DvZ2jO72SjL8Vjo35wUOm2UWKbrDO26Erpj
AXt6Nr1MEHsDV5GgJBeF0tBM2T+72OicwKNSV+wPUZnlqdhuSq2fu7B7g6+x
JpzYyNlx+mQrN56Xq8WLIkc2KnjU0VjDS6HDFVet1thD069q3+jB/vA+ctfE
Tjbq7HoV8gXbpr7A/TG20q0O6a18FJqImgo7ik3lxcWUYsdr6+d02rFRyOJa
83x+PB/FJL5EWzZ6Y/Z+JUWQQjXDO6Tnrdjopbe85pHVFAq5lK/WT0IfUTos
fhG7wmazzT1srrTphRLscxoc9CTsV6HlzR+x3Q4z8/WxRY1mfQJEcH8ux+Su
ITayH2PnuotSaN3YUxUHUzZCUxz2tuIUatnNGfnQmI0kReb3qkhS6FTb05lC
fTb66/W4yagche747qyJVIeurFM249qA75/rm7fDVqnLtlTCrlCt2qGAvVvM
1MEf+8Z6h7auLWy0TLr6vMOWz1QZUsemAtou98pTSCgtWH5MjY2mxLvWtSpS
yCdfdsBzExuVCWd8vKNCIbVT1UbWimy0GJHvGqZJoRW7PKacFH6fB2FXeEwp
pMWb2POOE1orfnvXRmw9HrcgNvZtZ4vVVtgvsiPmLmF/5VyVGo9tc/6yzA7s
pdGYdAJRKEPW51AWjY0mg9tLvmN7rOwX38fBRjJ9+itTZng/3EvzupdZSNvm
cuAbKwoFZdLzmhdZ6JBjk2CFI4UMuaa1qqZZSOmaw1iQN4XCuStTrw+wkFiG
py7HWQpxfSxty6yBPiB+KFsJ21wt9kYotjujiWaN3fmygm6O/X2bY89F7PXu
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
btfd
                   "]]}, {
                  RGBColor[
                  0.36677933333333335`, 0.451244, 0.4715073333333333], 
                  BSplineCurveBox[CompressedData["
1:eJxt1nk01dsXAPDrmolMRUimRKHMPHG+ZjIkUVFmV5MpypDyLuIpkqQyRMby
yJDpFRnKvSiJFPUo8SR5Gb6RqcTv9O9vv7/O+qy1z95r77P2WkfGK9CBRqVQ
KEYsFMqvk++6NxeFQqJvo1v3ODkx0f9bpmG+Wwpb+0EpoYzdKtp60wDbJKNZ
h/U/bBG+XjESO8MqROG+I/TM+WQyA9vsk5hUAnZto+XDB9jBTgMb3LFVZwKs
F7BlWq04+P7Dxf8MiGxgIdHg3OLq6H4meikcM6SBvVlkfrEeu1E9JvgUthc5
+O8xbDLSKnsSW+f44dcMB+jnZ64c46WSKEuV3p2FHVYjoLkdu/3e3LNg7Ges
zM6j2OGP255IY+9jnf/5D3bse8m6c/uYKNM2xP9vVhJF6sWXatpDO675717C
nplPK+XF3sJWyCvKRqJUNFv6z14miuJ5UuKI/TE0vSwF20mu7Us3dp/vtZpJ
Oyayt50Jb2PH83I0eVloy0T5TzqbqzlJdKL8qtkGa2jaVfUbvdgfPwTvndzD
RF3dr/2+Yls05Du3Ysvd7hTfyUWiydDpgFPYZG5MRAl2rLp2dpcVE/ktbzTO
48bzkU3girdkordGH9aSeUlUPbJbfNGMiV65SqueXE8iv6Q8pQEC+qTcCeFL
2OUW2y3uY7OlziwVY0epsNASsF/7lzE+YTudyMjTxhbUm3fzEsD9OYRIXUNM
ZD1em+MsSKJN488UbAyZCE2zWFsKk4i5jzW4SZ+JRAUWDyiIkuhs+7PZAm0m
evxmwmBMikR33fdUBytDV9TLG7Ftwfej+hetsBXqs0zlsMsVK3fLYO8TMrTx
xL6x2aa9ewcTrRKObu+xpdMVhpWxSa/2y33SJOJL9ZUeV2KiaeHuTW2yJHLL
kxw8vI2JSvlvfrqrQCKls1V65rJMtByU5xigSqI1q9wMKTH8Po8CrnAYkkiN
M773PSu0Wuxv3VuxtTicfGqx79ibrDfDfpkVtJCEPce6LiUW2+LCZYnd2Ctj
EWkURKKbkm7HM6lMNOXbUfwd22XtkPBBFiaS6NdemzbC++FcktuzykDqFpe9
35qRyCedlstYZqDjti285bYk0mWbUaucYSC5azbjPq4kCmSvSLk+yEBCNw9r
spwnEdunkvb0auijwsez5LCNlaJv+GM701uo5thdr8ppxtjfd9n2XsLe7CzA
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
D1Xr7Q==
                   "]]}, {
                  RGBColor[
                  0.33451850000000005`, 0.42348675, 0.49740874999999996`], 
                  BSplineCurveBox[CompressedData["
1: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
LmA=
                   "]]}, {
                  RGBColor[
                  0.30225766666666665`, 0.39572949999999996`, 
                   0.5233101666666666], 
                  BSplineCurveBox[CompressedData["
1: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
AeMtAAw=
                   "]]}, {
                  RGBColor[
                  0.26999683333333335`, 0.36797225, 0.5492115833333333], 
                  BSplineCurveBox[CompressedData["
1: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

                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1: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
9m5CcA==
                   "]]}}}, PlotLabel -> None, ImageSize -> 240, Axes -> 
               True, PlotRange -> All, AspectRatio -> 
               NCache[GoldenRatio^(-1), 0.6180339887498948], AxesLabel -> {
                 FormBox["x", TraditionalForm], 
                 FormBox["y", TraditionalForm]}, PlotLabel -> FormBox[
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"y", "(", "1", ")"}], ",", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "1", 
                    ")"}]}], "}"}], TraditionalForm]], "\"  \"", 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TemplateBox[{"\"sampling \"", 
                   TemplateBox[{
                    RowBox[{"y", "(", "1", ")"}], "\" and \"", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "1", 
                    ")"}]}, "RowDefault"]}, "RowDefault"], "\[NoBreak]", 
                 "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Interactive differential equation solution plots", 
     "scanner" -> "ODE", "id" -> 
     "InteractiveDifferentialEquationSolutionPlots", "position" -> "900", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = True, 
                 CalculateScan`ODEScan`Private`iSQ$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                 False, $CellContext`Y1$$ = 
                 0.7853981633974483, $CellContext`Y2$$ = 0.7853981633974483, 
                 CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                 0.2575795557527179, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[$CellContext`Y1$$], 0.7853981633974483, 
                    $CellContext`y[1]}, -1.5550883635269477`, 
                    1.5550883635269477`}, {{
                    Hold[$CellContext`Y2$$], 0.7853981633974483, 
                    Derivative[1][$CellContext`y][1]}, -1.5550883635269477`, 
                    1.5550883635269477`}, {{
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$], 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}}, {{
                    Hold[CalculateScan`ODEScan`Private`yTS$$], {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`y], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 2 + 1]]]}, {{
                    Hold[CalculateScan`ODEScan`Private`yyTS$$], {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
2747659[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
2747659["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}, {0, 2}, {1, 2}}]]}, {{
                    Hold[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$], 
                    0.2575795557527179, 
                    Subscript["x", "max"]}, -1, 1}, {{
                    Hold[CalculateScan`ODEScan`Private`iSQ$$], True, ""}, {
                    True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[3], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[4], 
                    Manipulate`Place[5]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
2747659["`1`\[Hyphen]range", {
                    Style["x", Italic]}], 
                    Manipulate`Place[6], 
                    Row[{
                    Manipulate`Place[7], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2749931$$ = 
                 False, $CellContext`Y1$2749936$$ = 
                 0, $CellContext`Y2$2749937$$ = 0, 
                 CalculateScan`ODEScan`Private`functionOrPhasePlotQ$2749938$$ = 
                 False, CalculateScan`ODEScan`Private`\[CapitalDelta]x$\
2749939$$ = 0, CalculateScan`ODEScan`Private`iSQ$2749940$$ = False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = 
                    True, CalculateScan`ODEScan`Private`iSQ$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, $CellContext`Y1$$ = 
                    0.7853981633974483, $CellContext`Y2$$ = 
                    0.7853981633974483, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                    0.2575795557527179}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2749931$\
$, False], 
                    Hold[$CellContext`Y1$$, $CellContext`Y1$2749936$$, 0], 
                    Hold[$CellContext`Y2$$, $CellContext`Y2$2749937$$, 0], 
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$\
2749938$$, False], 
                    Hold[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$2749939$$, 
                    0], 
                    Hold[
                    CalculateScan`ODEScan`Private`iSQ$$, 
                    CalculateScan`ODEScan`Private`iSQ$2749940$$, False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Module[{
                    CalculateScan`ODEScan`Private`eqs$, 
                    CalculateScan`ODEScan`Private`sol$, 
                    CalculateScan`ODEScan`Private`addInits$, 
                    CalculateScan`ODEScan`Private`nds$, 
                    CalculateScan`ODEScan`Private`xRanges$, 
                    CalculateScan`ODEScan`Private`xRange$, 
                    CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    CalculateScan`ODEScan`Private`yPlotRe$, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$, 
                    CalculateScan`ODEScan`Private`yPlotReIm$, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$,
                     CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$, CalculateScan`ODEScan`Private`yyPPlotRe$}, 
                    CalculateScan`ODEScan`Private`eqs$ = 
                    Flatten[{{-$CellContext`x^(-2) \
$CellContext`y[$CellContext`x] + $CellContext`x^(-1) 
                    Derivative[1][$CellContext`y][$CellContext`x] + 
                    Derivative[2][$CellContext`y][$CellContext`x] == 0}, {}, 
                    CalculateScan`ODEScan`Private`addInits$ = Thread[{
                    $CellContext`y[1], 
                    Derivative[1][$CellContext`y][1]} == 
                    Tan[{$CellContext`Y1$$, $CellContext`Y2$$}]]}]; 
                    CalculateScan`ODEScan`Private`sol$ = Quiet[
                    Check[CalculateScan`ODEScan`Private`nds$ = Quiet[
                    NDSolve[
                    CalculateScan`ODEScan`Private`eqs$, $CellContext`y, \
{$CellContext`x, 1, 1 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[0.999 Pi 2^(-1) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}, PrecisionGoal -> ControlActive[4, Automatic], 
                    AccuracyGoal -> ControlActive[4, Automatic], MaxSteps -> 
                    ControlActive[10^4, 5 10^4]], {
                    MessageName[NDSolve, "mxst"], 
                    MessageName[NDSolve, "ndsz"]}], 
                    CalculateScan`ODEScan`Private`failedNDSolve = 
                    Hold[NDSolve][
                    CalculateScan`ODEScan`Private`eqs$, $CellContext`y, \
{$CellContext`x, 1, 1 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[0.999 Pi 2^(-1) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}]; "$Failed"]]; If[
                    Or[
                    MatchQ[CalculateScan`ODEScan`Private`sol$, 
                    Blank[NDSolve]], CalculateScan`ODEScan`Private`sol$ === 
                    "$Failed", Chop[
                    Apply[Subtract, 
                    Part[CalculateScan`ODEScan`Private`nds$, 1, 1, 2, 1, 1]]] == 
                    0], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
2747659["could not numerically solve the differential equation for the \
specified parameters", 14242], 
                    CalculateScan`ODEScan`Private`xRanges$ = 
                    Map[Part[#, 1, 2, 1, 1]& , 
                    CalculateScan`ODEScan`Private`nds$]; 
                    CalculateScan`ODEScan`Private`xRange$ = {
                    1, 1 + Sign[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$] Min[
                    Abs[
                    Apply[
                    Subtract, CalculateScan`ODEScan`Private`xRanges$, {1}]]]}; 
                    CalculateScan`ODEScan`Private`IsPurelyRealQ$ = Not[
                    MemberQ[
                    Cases[CalculateScan`ODEScan`Private`nds$, 
                    Blank[List], {0, Infinity}], 
                    Blank[Complex], {0, Infinity}]]; 
                    If[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    If[CalculateScan`ODEScan`Private`yTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}]; 
                    If[CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    CalculateScan`ODEScan`Private`yPlotRe$ = Plot[
                    Evaluate[
                    ReplaceAll[
                    Map[Derivative[# - 1][$CellContext`y][$CellContext`x]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    CalculateScan`ODEScan`Private`nds$]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange$}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotStyle -> Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`y, 
                    Superscript[$CellContext`y, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$ = 
                    Part[
                    Lookup[
                    AbsoluteOptions[
                    CalculateScan`ODEScan`Private`yPlotRe$, PlotRange], 
                    PlotRange], 2]; If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
, 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]],
                     Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]]/
                    Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
] > 1/3], Null, CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$ + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]]]\
; Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotRe$, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe}\
], CalculateScan`ODEScan`Private`yPlotRe$], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], Right], 
                    CalculateScan`ODEScan`Private`yPlotReIm$ = Plot[
                    Evaluate[
                    ReplaceAll[
                    Join[
                    Map[Re[
                    Derivative[# - 1][$CellContext`y][$CellContext`x]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    Map[Im[
                    Derivative[# - 1][$CellContext`y][$CellContext`x]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    CalculateScan`ODEScan`Private`nds$]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange$}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotRange -> Automatic, PlotStyle -> Join[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    (
                    ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`y, 
                    Superscript[$CellContext`y, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$ = 
                    Part[
                    Lookup[
                    AbsoluteOptions[
                    CalculateScan`ODEScan`Private`yPlotReIm$, PlotRange], 
                    PlotRange], 2]; If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$], 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
], Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
]/Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$]] > 1/3], Null, 
                    
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$ = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$ + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
]]; Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotReIm$, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$}], CalculateScan`ODEScan`Private`yPlotReIm$], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    Join[
                    MapIndexed[Re[
                    Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Im[
                    Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    Join[
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    
                    MapIndexed[(
                    ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], Right]], 
                    If[CalculateScan`ODEScan`Private`yyTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}]; 
                    CalculateScan`ODEScan`Private`yyPPlotRe$ = 
                    ParametricPlot[
                    Evaluate[
                    Map[ReplaceAll[#, CalculateScan`ODEScan`Private`nds$]& , 
                    Re[
                    Apply[{
                    Derivative[#][$CellContext`y][$CellContext`x], 
                    Derivative[#2][$CellContext`y][$CellContext`x]}& , 
                    Part[{{0, 1}, {0, 2}, {1, 2}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], {1}]]]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange$}]], AxesLabel -> {
                    Superscript[$CellContext`y, 
                    Row[{"(", 
                    Style["m", Italic], ")"}]], 
                    Superscript[$CellContext`y, 
                    Row[{"(", 
                    Style["n", Italic], ")"}]]}, PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotStyle -> Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], AspectRatio -> 
                    1/GoldenRatio, PlotRange -> Automatic, 
                    ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    Labeled[CalculateScan`ODEScan`Private`yyPPlotRe$, 
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[
                    Map[If[CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    Identity[
                    Blank[Slot]], 
                    Re[
                    Blank[Slot]]]& , {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}]& , 
                    Part[{{0, 1}, {0, 2}, {1, 2}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Part[{{0, 1}, {0, 2}, {1, 2}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]]], Right]]]],
                   "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> 
                    None}, {{$CellContext`Y1$$, 0.7853981633974483, 
                    $CellContext`y[1]}, -1.5550883635269477`, 
                    1.5550883635269477`, ControlPlacement -> 
                    1}, {{$CellContext`Y2$$, 0.7853981633974483, 
                    Derivative[1][$CellContext`y][1]}, -1.5550883635269477`, 
                    1.5550883635269477`, ControlPlacement -> 2}, {{
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}, ControlPlacement -> 3}, {{
                    CalculateScan`ODEScan`Private`yTS$$, {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`y], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 2 + 1]]], ControlType -> CheckboxBar, 
                    ContinuousAction -> False, ControlPlacement -> 4}, {{
                    CalculateScan`ODEScan`Private`yyTS$$, {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
2747659[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
2747659["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}, {0, 2}, {1, 2}}]], 
                    ControlType -> CheckboxBar, ContinuousAction -> False, 
                    ControlPlacement -> 5}, {{
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    0.2575795557527179, 
                    Subscript["x", "max"]}, -1, 1, ControlPlacement -> 6}, {{
                    CalculateScan`ODEScan`Private`iSQ$$, True, ""}, {
                    True, False}, ControlPlacement -> 7}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[3], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[4], 
                    Manipulate`Place[5]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
2747659["`1`\[Hyphen]range", {
                    Style["x", Italic]}], 
                    Manipulate`Place[6], 
                    Row[{
                    Manipulate`Place[7], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMxBhMfEACOhiTBpSkfK8XX1IL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJPWaJrz0ixI/uTCZcJ4ewnPN7a2d558fylh8FYRsQYUEI/\
awuZTxXRkPYQ6Io1bzkR3/zxQXn8VHAew/cCRAL6nvWOFaEWRgrCMZ/\
gWy82U7cxMUMEJYqeO01OnsO2F2ijmMjGMMvxjbPJetoWmKhMe27ulNysU5AP/zo+\
kLGLyXtc0u7sCAwL44LRd1pW/5y7AZ5ft4VX8ng1cZjfG468EcOOQC/T+\
aR1nTwjVde66Odcndd82WiQZ0+Z+n/pgGmzHMZW2zBgdmhrvFp7y/DbbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5MMv3yR8Wt5HKqyZD3fWEgA7VW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAIjPT5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DRS2uN4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Possible Lagrangian", "scanner" -> "ODE", "id" -> 
     "PossibleLagrangian", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[ScriptCapitalL]", "(", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  ",", "y", ",", "x"}], ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    FractionBox[
                    SuperscriptBox["y", "2"], "x"], "+", 
                    RowBox[{"x", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], ")"}], 
                    "2"]}]}], ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False, False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "10", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.52", "parsetiming" -> "0.602", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP247816cec954c3h77d570000106giagd077ai5h2", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "20", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa247916cec954c3h77d5700002hh0g6b1569509008458888475783217078", "version" -> 
    "2.6", "inputstring" -> "y''+1/x y' - y/x^2 == 0"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 5, 13, 10, 48, 34.014424`8.28423810090572}, "Line" -> 43,
     "SessionID" -> 27877248076222430147}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "Derivative[2][y] + (1/x)*Derivative[1][y] - y/x^2 == 0"}, 
   Typeset`open$$ = True, Typeset`newq$$ = "y''+1/x y' - y/x^2 == 0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {3293., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"ea7bad84-92d8-4d4a-a0cf-902d1a1bdd98"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    FractionBox["y", 
     SuperscriptBox["x", "2"]]}], "+", 
   FractionBox[
    SuperscriptBox["y", "\[Prime]",
     MultilineFunction->None], "x"], "+", 
   SuperscriptBox["y", "\[Prime]\[Prime]",
    MultilineFunction->None]}], "\[Equal]", "0"}]], "Output",
 CellChangeTimes->{3.861424107180819*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"db8c4f6a-1d00-4704-b5cb-6238551d9f11"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1", "/", "x"}], "+", "x"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.861424227324676*^9, 3.8614242355105343`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"c13824df-2828-4444-badc-b002384b75f7"],

Cell[BoxData[
 RowBox[{"1", "-", 
  FractionBox["1", 
   SuperscriptBox["x", "2"]]}]], "Output",
 CellChangeTimes->{{3.86142423140799*^9, 3.861424236100279*^9}},
 CellLabel->"Out[44]=",ExpressionUUID->"f0fa7257-15c0-4f68-b82b-bb816880cb63"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1254, 1387},
WindowMargins->{{-2498, Automatic}, {540, Automatic}},
FrontEndVersion->"12.3 for Mac OS X ARM (64-bit) (2021\:5e747\:67089\:65e5)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"0e299983-73d7-4baa-92e1-5ac5f7da912b"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 357, 6, 65, "Input",ExpressionUUID->"454785e1-a198-46b5-bd3b-1f8cc638a380"],
Cell[CellGroupData[{
Cell[940, 30, 161, 3, 98, "Title",ExpressionUUID->"1d9cb3d7-c7d8-4810-bf43-ecafb0833ed7"],
Cell[CellGroupData[{
Cell[1126, 37, 2018, 58, 377, "Input",ExpressionUUID->"c1c4301f-4194-4fdf-8b3e-2731a45cd906"],
Cell[CellGroupData[{
Cell[3169, 99, 509, 12, 24, "Print",ExpressionUUID->"40d5fd23-fd4a-4119-83df-c0c60baf0643"],
Cell[3681, 113, 474, 11, 24, "Print",ExpressionUUID->"b489e14c-2ddc-435a-94ab-d8239ddec2ed"],
Cell[4158, 126, 676, 19, 24, "Print",ExpressionUUID->"4a536dac-12ce-49c5-8974-09ec16725bd6"]
}, Open  ]],
Cell[4849, 148, 257, 6, 34, "Output",ExpressionUUID->"c0878eca-b17b-4470-9f61-face2d0776b1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[5155, 160, 163, 3, 98, "Title",ExpressionUUID->"4d2b649a-fb04-41a9-838e-f0f169d17b7e"],
Cell[CellGroupData[{
Cell[5343, 167, 4179, 113, 400, "Input",ExpressionUUID->"91dde3f9-779b-4525-a19f-05f69f3569aa"],
Cell[CellGroupData[{
Cell[9547, 284, 851, 24, 27, "Print",ExpressionUUID->"58eb7c8c-1c8c-4c41-a499-7e00e51e6408"],
Cell[10401, 310, 469, 12, 24, "Print",ExpressionUUID->"42504abf-0cce-454e-a8cb-5875b36a783c"],
Cell[10873, 324, 417, 10, 24, "Print",ExpressionUUID->"82cefded-c80f-4ac3-a2e4-c07855ec79e4"]
}, Open  ]],
Cell[11305, 337, 154, 3, 34, "Output",ExpressionUUID->"ee408cde-b027-4654-af30-7d79b093c05b"]
}, Open  ]],
Cell[11474, 343, 152, 3, 30, "Input",ExpressionUUID->"151af007-b1e3-4d00-ab55-4d1f127abd06"],
Cell[11629, 348, 153, 3, 30, "Input",ExpressionUUID->"f1139cf5-d38a-441b-9238-aa3c5f7b8844"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11819, 356, 207, 4, 98, "Title",ExpressionUUID->"3e9114e5-25e0-4dd3-b943-19012e0fe37e"],
Cell[12029, 362, 171, 3, 52, "Input",ExpressionUUID->"ee65b125-5f88-457a-ab65-dcd0c8404e3b"],
Cell[CellGroupData[{
Cell[12225, 369, 4524, 111, 651, "Input",ExpressionUUID->"68e1549f-c307-4b64-9b0e-ca8d7a85edb5"],
Cell[CellGroupData[{
Cell[16774, 484, 703, 15, 24, "Print",ExpressionUUID->"95b8c1f4-5341-42a0-a5fe-091da9b29768"],
Cell[17480, 501, 2032, 55, 27, "Print",ExpressionUUID->"94ad5276-b105-46ee-a0c9-a8171e7cf017"],
Cell[19515, 558, 1502, 39, 27, "Print",ExpressionUUID->"8b4c0355-3d01-4523-b58d-a8206f3ad555"],
Cell[21020, 599, 1119, 27, 25, "Print",ExpressionUUID->"06655fd1-6ea3-4126-8188-f0e8788010fc"],
Cell[22142, 628, 850, 19, 25, "Print",ExpressionUUID->"bc2494b8-6226-4e1c-8f49-f9a4dcb5b987"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[23053, 654, 205, 4, 98, "Title",ExpressionUUID->"768c76d4-39ce-47ad-bfdd-f5a2e8e26976"],
Cell[CellGroupData[{
Cell[23283, 662, 2596, 56, 357, "Input",ExpressionUUID->"6acf40b7-b7d2-447b-88e1-e4df9d0b7819"],
Cell[CellGroupData[{
Cell[25904, 722, 1140, 23, 25, "Print",ExpressionUUID->"e4444b17-4d16-4287-a27b-d42a9e1adca4"],
Cell[27047, 747, 1101, 22, 24, "Print",ExpressionUUID->"6c0a0a09-f1b3-4fe0-ad8f-8ab6509b0390"],
Cell[28151, 771, 1448, 33, 45, "Print",ExpressionUUID->"6d4424f9-613d-40b4-90da-2d9ccaa24a0d"],
Cell[29602, 806, 1144, 24, 28, "Print",ExpressionUUID->"4a42b358-8c75-479e-a5e0-a576c22184b1"]
}, Open  ]],
Cell[30761, 833, 511, 8, 34, "Output",ExpressionUUID->"618295a6-156e-4736-8884-31c80a3d292e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31309, 846, 432, 13, 46, "Input",ExpressionUUID->"635afcc9-338c-4242-b14a-ca9d814bd38c"],
Cell[31744, 861, 502, 16, 39, "Output",ExpressionUUID->"47b991dc-5f59-4901-b23a-7333da44bca7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[32295, 883, 151, 3, 98, "Title",ExpressionUUID->"b02ae45a-a7fe-4c7a-b3d6-24a561e8c8ed"],
Cell[CellGroupData[{
Cell[32471, 890, 5782, 132, 835, "Input",ExpressionUUID->"82712719-29d9-431e-bf1d-0a5e883d49d2"],
Cell[CellGroupData[{
Cell[38278, 1026, 1140, 30, 43, "Print",ExpressionUUID->"7288e5d2-7846-465b-a62c-d8de788c0ef3"],
Cell[39421, 1058, 2364, 64, 84, "Print",ExpressionUUID->"fb26d1a3-90f5-4875-ae1b-cd39c636c0ac"],
Cell[41788, 1124, 2361, 64, 84, "Print",ExpressionUUID->"f621ad63-aaf8-4450-a388-f65f264a9b7e"],
Cell[44152, 1190, 884, 26, 56, "Print",ExpressionUUID->"09b638ed-5ac0-4cd2-b8d1-0f83d402fb6a"],
Cell[45039, 1218, 920, 25, 47, "Print",ExpressionUUID->"e4ded364-f92e-4cd2-8494-55371cb4a800"],
Cell[45962, 1245, 802, 21, 47, "Print",ExpressionUUID->"ee56fcc4-4427-4cb3-9d62-fc30b7950f50"],
Cell[46767, 1268, 3149, 82, 80, "Print",ExpressionUUID->"8272fa6d-74d6-486b-90df-77dd00732037"],
Cell[49919, 1352, 772, 22, 47, "Print",ExpressionUUID->"4dcfefd6-0be3-431a-aef4-d9813ee39894"],
Cell[50694, 1376, 774, 21, 47, "Print",ExpressionUUID->"75aec9f7-98a6-4877-a700-8f58ed754454"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[51529, 1404, 251, 4, 98, "Title",ExpressionUUID->"9426b2f2-40fc-48b3-b7a9-5c2a073a62c5"],
Cell[51783, 1410, 605, 14, 44, "Input",ExpressionUUID->"4be11f7a-0b44-41cc-bf29-c3a4fde63ed4"],
Cell[CellGroupData[{
Cell[52413, 1428, 817, 22, 46, "Input",ExpressionUUID->"7f3b74b9-9fc8-4c3e-99d8-bf8b951ab585"],
Cell[53233, 1452, 819, 24, 34, "Output",ExpressionUUID->"b9eb6766-fda6-44f3-8be6-c370394e6664"]
}, Open  ]],
Cell[54067, 1479, 545, 15, 33, "Input",ExpressionUUID->"7d33fd12-08db-4048-94a4-4897b311d2c3"],
Cell[54615, 1496, 598, 18, 46, InheritFromParent,ExpressionUUID->"bfe43850-e968-4e6a-b152-30bffd438733"],
Cell[CellGroupData[{
Cell[55238, 1518, 2199, 68, 52, InheritFromParent,ExpressionUUID->"7a4d2a4f-9a01-435e-b3c2-f27aa934993a"],
Cell[57440, 1588, 409, 13, 51, "Output",ExpressionUUID->"c273567e-421c-4bc8-b41a-3e25436c8940"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[57898, 1607, 140, 2, 98, "Title",ExpressionUUID->"25f09848-e7ba-429a-8d1f-f58d6c8d6e6a"],
Cell[CellGroupData[{
Cell[58063, 1613, 4317, 112, 697, "Input",ExpressionUUID->"4138af34-9486-4122-b198-abc1de561e00"],
Cell[CellGroupData[{
Cell[62405, 1729, 890, 23, 49, "Print",ExpressionUUID->"07fcd1fa-349e-45c6-827f-0bb319381652"],
Cell[63298, 1754, 966, 26, 48, "Print",ExpressionUUID->"068d2860-43be-4740-a5cf-0e69f1fdd4fa"],
Cell[64267, 1782, 968, 26, 48, "Print",ExpressionUUID->"29aa6424-d52a-4a19-bb0a-0d3fb4e1191d"],
Cell[65238, 1810, 1158, 31, 53, "Print",ExpressionUUID->"86244048-5fe8-45d3-b3ac-4656cdfb813a"],
Cell[66399, 1843, 893, 23, 48, "Print",ExpressionUUID->"0d0228f5-a955-46d5-bb21-f83d46059ae3"]
}, Open  ]],
Cell[67307, 1869, 351, 7, 34, "Output",ExpressionUUID->"2560b832-ddd2-4f6c-be61-c0a072955d56"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[67707, 1882, 155, 3, 98, "Title",ExpressionUUID->"7b2b9068-e4a0-4b5a-9525-748f3bbf98ae"],
Cell[CellGroupData[{
Cell[67887, 1889, 3060, 77, 458, "Input",ExpressionUUID->"05b2d8e8-8916-498b-92ce-90815552ecb6"],
Cell[CellGroupData[{
Cell[70972, 1970, 1495, 37, 27, "Print",ExpressionUUID->"fc8d7b9c-bd06-4cea-b9d1-f1aa5417fbbe"],
Cell[72470, 2009, 1294, 31, 27, "Print",ExpressionUUID->"1ae4065b-1c86-41f5-b22f-9943d6cff209"],
Cell[73767, 2042, 1162, 29, 27, "Print",ExpressionUUID->"86633bc9-9b5a-4bcd-90b4-f1b069141837"],
Cell[74932, 2073, 1215, 31, 27, "Print",ExpressionUUID->"d4c4b623-3aec-4eb8-8fa1-b9b7901f7761"],
Cell[76150, 2106, 2174, 56, 27, "Print",ExpressionUUID->"e51b0ffd-0f14-4342-bd9c-a2d61cd05368"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[78373, 2168, 605, 17, 44, "Input",ExpressionUUID->"97d2eec0-8b49-43ec-8e46-8615c75d6402"],
Cell[78981, 2187, 107083, 1752, 272, "Output",ExpressionUUID->"f511df19-d54d-4bea-b832-9b0928f46c13"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186101, 3944, 559, 17, 47, "Input",ExpressionUUID->"11ddcf8a-e2df-4695-960b-5c520618f802"],
Cell[186663, 3963, 65768, 1078, 166, "Output",ExpressionUUID->"3eb508b9-35ee-4974-a14c-db2aeb251bef"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[252480, 5047, 161, 3, 98, "Title",ExpressionUUID->"3f857a31-b7fd-4a8b-b48b-ced764576258"],
Cell[CellGroupData[{
Cell[252666, 5054, 3714, 99, 632, "Input",ExpressionUUID->"9dd339be-be35-4a3f-82ae-c6dc590302d1"],
Cell[CellGroupData[{
Cell[256405, 5157, 1706, 51, 48, "Print",ExpressionUUID->"7f0f9010-9dcb-4bd8-94ea-eb5699898a39"],
Cell[258114, 5210, 1685, 49, 48, "Print",ExpressionUUID->"945ac908-b997-4687-ad2f-7590b5682d98"],
Cell[259802, 5261, 828, 24, 43, "Print",ExpressionUUID->"76f4433b-c3b8-4f74-88d8-6585238ae9a0"],
Cell[260633, 5287, 2844, 80, 58, "Print",ExpressionUUID->"e281f7e4-16bc-464a-a867-430db20bfc5a"],
Cell[263480, 5369, 1618, 44, 58, "Print",ExpressionUUID->"3b40a696-58be-48b7-8fa6-c688a7e913a7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[265147, 5419, 1274, 38, 46, "Input",ExpressionUUID->"1007441e-be2a-414e-af16-7f7863b7c397"],
Cell[266424, 5459, 612, 13, 28, "Message",ExpressionUUID->"d35b08f2-da2f-4ac1-a8bd-f9d49e58370b"],
Cell[267039, 5474, 1451, 45, 37, "Output",ExpressionUUID->"2f1df9fc-7daf-44fc-b842-68f2044acb57"]
}, Open  ]],
Cell[CellGroupData[{
Cell[268527, 5524, 867, 25, 44, "Input",ExpressionUUID->"5a04710c-dbc5-40b4-aaee-0ad9106f4b8e"],
Cell[269397, 5551, 1915, 50, 51, "Output",ExpressionUUID->"44d1bb12-d04c-491c-a89c-77c2bcdd0432"]
}, Open  ]],
Cell[CellGroupData[{
Cell[271349, 5606, 516042, 9057, 2454, "WolframAlphaShortInput",ExpressionUUID->"e54d5973-0986-42b8-b054-414f290d3be6"],
Cell[787394, 14665, 288, 7, 48, "Output",ExpressionUUID->"e3387976-fd1c-4661-be80-a02b580d9901"]
}, Open  ]],
Cell[787697, 14675, 180, 4, 44, "Input",ExpressionUUID->"5ccc9313-ae49-4754-9923-65e00cc1244c"],
Cell[787880, 14681, 737, 19, 143, "Input",ExpressionUUID->"b71167b5-5d6d-4062-a837-9c1bbcb39f2d"],
Cell[CellGroupData[{
Cell[788642, 14704, 892, 24, 46, InheritFromParent,ExpressionUUID->"0181505d-4e53-42a1-a4fd-805918a771b2"],
Cell[789537, 14730, 850, 23, 34, "Output",ExpressionUUID->"89d2157e-597e-4970-a4c7-9060482260bf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[790424, 14758, 881, 24, 44, "Input",ExpressionUUID->"c6a4ba78-b632-47bb-81ac-98a6fbb5a2ce"],
Cell[791308, 14784, 605, 15, 34, "Output",ExpressionUUID->"53343db7-1ad5-4c2d-84fc-0674b24bee69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[791950, 14804, 343, 8, 46, "Input",ExpressionUUID->"92ce0371-4047-419a-bf19-cf6f1ede2318"],
Cell[792296, 14814, 169, 3, 51, "Output",ExpressionUUID->"73d31d42-5fde-4e88-b0eb-e7c4a015ab3b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[792502, 14822, 344, 8, 44, "Input",ExpressionUUID->"3a6ed10a-486c-4a88-81b3-b4d28e535d4c"],
Cell[792849, 14832, 171, 2, 34, "Output",ExpressionUUID->"e758faa7-37d8-465a-bacd-b03045661896"]
}, Open  ]],
Cell[793035, 14837, 824, 24, 46, "Input",ExpressionUUID->"4e811b41-5399-4882-a4ab-16fa549f47da"],
Cell[793862, 14863, 890, 24, 44, "Input",ExpressionUUID->"c55058a2-96bb-4e0f-a19b-b1504a18f1b5"],
Cell[CellGroupData[{
Cell[794777, 14891, 916, 25, 46, InheritFromParent,ExpressionUUID->"04d5de5d-0f33-4863-a5b1-7ed52c7259dc"],
Cell[795696, 14918, 169, 2, 34, "Output",ExpressionUUID->"f52fab5a-8bc2-44fd-90db-4304805dfd71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[795902, 14925, 888, 24, 44, "Input",ExpressionUUID->"1753d4a3-beee-43fd-ba18-43ccf150cd31"],
Cell[796793, 14951, 219, 4, 34, "Output",ExpressionUUID->"2f11aa9a-11f8-41f8-9258-b4c20ed31ef7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[797049, 14960, 67421, 1394, 2549, "WolframAlphaShortInput",ExpressionUUID->"d4ebc829-599e-414a-9b32-6ce1da082efe"],
Cell[864473, 16356, 705, 21, 50, "Output",ExpressionUUID->"fce9f9bd-6bb3-42f2-a13f-8edec6053c1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[865215, 16382, 622, 19, 60, "Input",ExpressionUUID->"10e96130-0f42-4797-ae1b-6eadc22ba216"],
Cell[865840, 16403, 490, 16, 53, "Output",ExpressionUUID->"600034e8-5a05-425c-8275-d944f0bdd39b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[866367, 16424, 784, 20, 44, "Input",ExpressionUUID->"f1d11091-08c5-4e7d-be1a-1bb8fa4ca8e4"],
Cell[867154, 16446, 17237, 451, 335, "Output",ExpressionUUID->"0625c1e1-f1ff-4d78-b555-f160971c5794"]
}, Open  ]],
Cell[CellGroupData[{
Cell[884428, 16902, 614, 16, 44, "Input",ExpressionUUID->"2f2d1caf-9606-460d-8780-f45d0649b9f1"],
Cell[885045, 16920, 659, 19, 52, "Output",ExpressionUUID->"0025f82b-023d-48e7-9e22-7e59cb53c6db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[885741, 16944, 514, 14, 44, "Input",ExpressionUUID->"f6b62c3b-a439-43c3-99ae-022be2271771"],
Cell[886258, 16960, 329, 9, 50, "Output",ExpressionUUID->"deb89da3-0624-4ef8-b8eb-c346f40cd3d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[886624, 16974, 200122, 3762, 3339, "WolframAlphaShortInput",ExpressionUUID->"ea7bad84-92d8-4d4a-a0cf-902d1a1bdd98"],
Cell[1086749, 20738, 434, 12, 52, "Output",ExpressionUUID->"db8c4f6a-1d00-4704-b5cb-6238551d9f11"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1087220, 20755, 273, 6, 44, "Input",ExpressionUUID->"c13824df-2828-4444-badc-b002384b75f7"],
Cell[1087496, 20763, 240, 5, 74, "Output",ExpressionUUID->"f0fa7257-15c0-4f68-b82b-bb816880cb63"]
}, Open  ]]
}, Open  ]]
}
]
*)

